{
  "family": "STM32U0",
  "architecture": "arm-cortex-m0plus",
  "vendor": "Unknown",
  "mcus": {
    "STM32U083": {
      "flash": {
        "size_kb": 64,
        "base_address": "0x08000000",
        "page_size_kb": 1
      },
      "ram": {
        "size_kb": 20,
        "base_address": "0x20000000"
      },
      "peripherals": {
        "ADC": {
          "instances": [
            {
              "name": "ADC",
              "base": "0x40012400",
              "irq": 12
            }
          ],
          "registers": {
            "ADC_ISR": {
              "offset": "0x00",
              "size": 32,
              "description": "ADC interrupt and status register"
            },
            "ADC_IER": {
              "offset": "0x04",
              "size": 32,
              "description": "ADC interrupt enable register"
            },
            "ADC_CR": {
              "offset": "0x08",
              "size": 32,
              "description": "ADC control register"
            },
            "ADC_CFGR1": {
              "offset": "0x0C",
              "size": 32,
              "description": "ADC configuration register 1"
            },
            "ADC_CFGR2": {
              "offset": "0x10",
              "size": 32,
              "description": "ADC configuration register 2"
            },
            "ADC_SMPR": {
              "offset": "0x14",
              "size": 32,
              "description": "ADC sampling time register"
            },
            "ADC_AWD1TR": {
              "offset": "0x20",
              "size": 32,
              "description": "ADC watchdog threshold register"
            },
            "ADC_AWD2TR": {
              "offset": "0x24",
              "size": 32,
              "description": "ADC watchdog threshold register"
            },
            "ADC_CHSELR": {
              "offset": "0x28",
              "size": 32,
              "description": "ADC channel selection register"
            },
            "ADC_CHSELR_ALTERNATE": {
              "offset": "0x28",
              "size": 32,
              "description": "ADC channel selection register"
            },
            "ADC_AWD3TR": {
              "offset": "0x2C",
              "size": 32,
              "description": "ADC watchdog threshold register"
            },
            "ADC_DR": {
              "offset": "0x40",
              "size": 32,
              "description": "ADC data register"
            },
            "ADC_AWD2CR": {
              "offset": "0xA0",
              "size": 32,
              "description": "ADC analog watchdog 2 configuration register"
            },
            "ADC_AWD3CR": {
              "offset": "0xA4",
              "size": 32,
              "description": "ADC Analog Watchdog 3 Configuration register"
            },
            "ADC_CALFACT": {
              "offset": "0xB4",
              "size": 32,
              "description": "ADC calibration factor"
            },
            "ADC_CCR": {
              "offset": "0x308",
              "size": 32,
              "description": "ADC common configuration register"
            }
          },
          "bits": {
            "ADC_ISR": {
              "ADRDY": {
                "bit": 0,
                "description": "ADC ready \nThis bit is set by hardware after the ADC has been enabled (ADEN+1) and when the ADC reaches a state where it is ready to accept conversion requests.\nIt is cleared by software writing 1 to it."
              },
              "EOSMP": {
                "bit": 1,
                "description": "End of sampling flag\nThis bit is set by hardware during the conversion, at the end of the sampling phase.It is cleared by software by programming it to 1."
              },
              "EOC": {
                "bit": 2,
                "description": "End of conversion flag\nThis bit is set by hardware at the end of each conversion of a channel when a new data result is available in the ADC_DR register. It is cleared by software writing 1 to it or by reading the ADC_DR register."
              },
              "EOS": {
                "bit": 3,
                "description": "End of sequence flag\nThis bit is set by hardware at the end of the conversion of a sequence of channels selected by the CHSEL bits. It is cleared by software writing 1 to it."
              },
              "OVR": {
                "bit": 4,
                "description": "ADC overrun\nThis bit is set by hardware when an overrun occurs, meaning that a new conversion has complete while the EOC flag was already set. It is cleared by software writing 1 to it."
              },
              "AWD1": {
                "bit": 7,
                "description": "Analog watchdog 1 flag\nThis bit is set by hardware when the converted voltage crosses the values programmed in ADC_TR1 and ADC_HR1 registers. It is cleared by software by programming it to 1."
              },
              "AWD2": {
                "bit": 8,
                "description": "Analog watchdog 2 flag\nThis bit is set by hardware when the converted voltage crosses the values programmed in ADC_AWD2TR and ADC_AWD2TR registers. It is cleared by software programming it it."
              },
              "AWD3": {
                "bit": 9,
                "description": "Analog watchdog 3 flag\nThis bit is set by hardware when the converted voltage crosses the values programmed in ADC_AWD3TR and ADC_AWD3TR registers. It is cleared by software by programming it to 1."
              },
              "EOCAL": {
                "bit": 11,
                "description": "End Of Calibration flag\nThis bit is set by hardware when calibration is complete. It is cleared by software writing 1 to it."
              },
              "CCRDY": {
                "bit": 13,
                "description": "Channel Configuration Ready flag\nThis flag bit is set by hardware when the channel configuration is applied after programming to ADC_CHSELR register or changing CHSELRMOD or SCANDIR. It is cleared by software by programming it to it.\nNote: When the software configures the channels (by programming ADC_CHSELR or changing CHSELRMOD or SCANDIR), it must wait until the CCRDY flag rises before configuring again or starting conversions, otherwise the new configuration (or the START bit) is ignored. Once the flag is asserted, if the software needs to configure again the channels, it must clear the CCRDY flag before proceeding with a new configuration."
              }
            },
            "ADC_IER": {
              "ADRDYIE": {
                "bit": 0,
                "description": "ADC ready interrupt enable\nThis bit is set and cleared by software to enable/disable the ADC Ready interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared (this ensures that no conversion is ongoing)."
              },
              "EOSMPIE": {
                "bit": 1,
                "description": "End of sampling flag interrupt enable\nThis bit is set and cleared by software to enable/disable the end of the sampling phase interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared (this ensures that no conversion is ongoing)."
              },
              "EOCIE": {
                "bit": 2,
                "description": "End of conversion interrupt enable\nThis bit is set and cleared by software to enable/disable the end of conversion interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared (this ensures that no conversion is ongoing)."
              },
              "EOSIE": {
                "bit": 3,
                "description": "End of conversion sequence interrupt enable\nThis bit is set and cleared by software to enable/disable the end of sequence of conversions interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared (this ensures that no conversion is ongoing)."
              },
              "OVRIE": {
                "bit": 4,
                "description": "Overrun interrupt enable\nThis bit is set and cleared by software to enable/disable the overrun interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared (this ensures that no conversion is ongoing)."
              },
              "AWD1IE": {
                "bit": 7,
                "description": "Analog watchdog 1 interrupt enable\nThis bit is set and cleared by software to enable/disable the analog watchdog interrupt. \nNote: The Software is allowed to write this bit only when ADSTART bit is cleared (this ensures that no conversion is ongoing)."
              },
              "AWD2IE": {
                "bit": 8,
                "description": "Analog watchdog 2 interrupt enable\nThis bit is set and cleared by software to enable/disable the analog watchdog interrupt. \nNote: The Software is allowed to write this bit only when ADSTART bit is cleared (this ensures that no conversion is ongoing)."
              },
              "AWD3IE": {
                "bit": 9,
                "description": "Analog watchdog 3 interrupt enable\nThis bit is set and cleared by software to enable/disable the analog watchdog interrupt. \nNote: The Software is allowed to write this bit only when ADSTART bit is cleared (this ensures that no conversion is ongoing)."
              },
              "EOCALIE": {
                "bit": 11,
                "description": "End of calibration interrupt enable\nThis bit is set and cleared by software to enable/disable the end of calibration interrupt. \nNote: The software is allowed to write this bit only when ADSTART bit is cleared (this ensures that no conversion is ongoing)."
              },
              "CCRDYIE": {
                "bit": 13,
                "description": "Channel Configuration Ready Interrupt enable\nThis bit is set and cleared by software to enable/disable the channel configuration ready interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared (this ensures that no conversion is ongoing)."
              }
            },
            "ADC_CR": {
              "ADEN": {
                "bit": 0,
                "description": "ADC enable command\nThis bit is set by software to enable the ADC. The ADC is effectively ready to operate once the ADRDY flag has been set.\nIt is cleared by hardware when the ADC is disabled, after the execution of the ADDIS command."
              },
              "ADDIS": {
                "bit": 1,
                "description": "ADC disable command"
              },
              "ADSTART": {
                "bit": 2,
                "description": "ADC start conversion command"
              },
              "ADSTP": {
                "bit": 4,
                "description": "ADC stop conversion command"
              },
              "ADVREGEN": {
                "bit": 28,
                "description": "ADC Voltage Regulator Enable"
              },
              "ADCAL": {
                "bit": 31,
                "description": "ADC calibration\nThis bit is set by software to start the calibration of the ADC."
              }
            },
            "ADC_CFGR1": {
              "DMAEN": {
                "bit": 0,
                "description": "Direct memory access enable\nThis bit is set and cleared by software to enable the generation of DMA requests. This allows the DMA controller to be used to manage automatically the converted data. For more details, refer to Section113.6.5: Managing converted data using the DMA on page1333."
              },
              "DMACFG": {
                "bit": 1,
                "description": "Direct memory access configuration\nThis bit is set and cleared by software to select between two DMA modes of operation and is effective only when DMAEN1=11.\nFor more details, refer to Section113.6.5: Managing converted data using the DMA on page1333."
              },
              "SCANDIR": {
                "bit": 2,
                "description": "Scan sequence direction\nThis bit is set and cleared by software to select the direction in which the channels is scanned in the sequence. It is effective only if CHSELMOD bit is cleared. \nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "RES": {
                "bit": 3,
                "description": "Data resolution\nThese bits are written by software to select the resolution of the conversion.",
                "width": 2
              },
              "ALIGN": {
                "bit": 5,
                "description": "Data alignment\nThis bit is set and cleared by software to select right or left alignment. Refer to Figure141: Data alignment and resolution (oversampling disabled: OVSE = 0) on page1332"
              },
              "EXTSEL": {
                "bit": 6,
                "description": "External trigger selection\nThese bits select the external event used to trigger the start of conversion (refer to Table160: External triggers for details):",
                "width": 3
              },
              "EXTEN": {
                "bit": 10,
                "description": "External trigger enable and polarity selection\nThese bits are set and cleared by software to select the external trigger polarity and enable the trigger.",
                "width": 2
              },
              "OVRMOD": {
                "bit": 12,
                "description": "Overrun management mode\nThis bit is set and cleared by software and configure the way data overruns are managed."
              },
              "CONT": {
                "bit": 13,
                "description": "Single / continuous conversion mode\nThis bit is set and cleared by software. If it is set, conversion takes place continuously until it is cleared.\nNote: It is not possible to have both discontinuous mode and continuous mode enabled: it is forbidden to set both bits DISCEN1=11 and CONT1=11."
              },
              "WAIT": {
                "bit": 14,
                "description": "Wait conversion mode\nThis bit is set and cleared by software to enable/disable wait conversion mode.<sup>.</sup>"
              },
              "AUTOFF": {
                "bit": 15,
                "description": "Auto-off mode\nThis bit is set and cleared by software to enable/disable auto-off mode.<sup>.</sup>"
              },
              "DISCEN": {
                "bit": 16,
                "description": "Discontinuous mode\nThis bit is set and cleared by software to enable/disable discontinuous mode.\nNote: It is not possible to have both discontinuous mode and continuous mode enabled: it is forbidden to set both bits DISCEN1=11 and CONT1=11."
              },
              "CHSELRMOD": {
                "bit": 21,
                "description": "Mode selection of the ADC_CHSELR register\nThis bit is set and cleared by software to control the ADC_CHSELR feature:\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "AWD1SGL": {
                "bit": 22,
                "description": "Enable the watchdog on a single channel or on all channels\nThis bit is set and cleared by software to enable the analog watchdog on the channel identified by the AWDCH[4:0] bits or on all the channels"
              },
              "AWD1EN": {
                "bit": 23,
                "description": "Analog watchdog enable\nThis bit is set and cleared by software."
              },
              "AWD1CH": {
                "bit": 26,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They select the input channel to be guarded by the analog watchdog.\n.....\nOthers: Reserved\nNote: The channel selected by the AWDCH[4:0] bits must be also set into the CHSELR register.",
                "width": 5
              }
            },
            "ADC_CFGR2": {
              "OVSE": {
                "bit": 0,
                "description": "Oversampler Enable\nThis bit is set and cleared by software.\nNote: The software is allowed to write this bit only when ADEN bit is cleared."
              },
              "OVSR": {
                "bit": 2,
                "description": "Oversampling ratio\nThis bit filed defines the number of oversampling ratio.\nNote: The software is allowed to write this bit only when ADEN bit is cleared.",
                "width": 3
              },
              "OVSS": {
                "bit": 5,
                "description": "Oversampling shift\nThis bit is set and cleared by software.\nOthers: Reserved\nNote: The software is allowed to write this bit only when ADEN bit is cleared.",
                "width": 4
              },
              "TOVS": {
                "bit": 9,
                "description": "Triggered Oversampling\nThis bit is set and cleared by software.\nNote: The software is allowed to write this bit only when ADEN bit is cleared."
              },
              "LFTRIG": {
                "bit": 29,
                "description": "Low frequency trigger mode enable\nThis bit is set and cleared by software.\nNote: The software is allowed to write this bit only when ADEN bit is cleared."
              },
              "CKMODE": {
                "bit": 30,
                "description": "ADC clock mode\nThese bits are set and cleared by software to define how the analog ADC is clocked:\nIn all synchronous clock modes, there is no jitter in the delay from a timer trigger to the start of a conversion.\nNote: The software is allowed to write these bits only when the ADC is disabled (ADCAL1=10, ADSTART1=10, ADSTP1=10, ADDIS1=10 and ADEN1=10).",
                "width": 2
              }
            },
            "ADC_SMPR": {
              "SMP1": {
                "bit": 0,
                "description": "Sampling time selection 1\nThese bits are written by software to select the sampling time that applies to all channels.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 3
              },
              "SMP2": {
                "bit": 4,
                "description": "Sampling time selection 2\nThese bits are written by software to select the sampling time that applies to all channels.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 3
              },
              "SMPSEL0": {
                "bit": 8,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL1": {
                "bit": 9,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL2": {
                "bit": 10,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL3": {
                "bit": 11,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL4": {
                "bit": 12,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL5": {
                "bit": 13,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL6": {
                "bit": 14,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL7": {
                "bit": 15,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL8": {
                "bit": 16,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL9": {
                "bit": 17,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL10": {
                "bit": 18,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL11": {
                "bit": 19,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL12": {
                "bit": 20,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL13": {
                "bit": 21,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL14": {
                "bit": 22,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL15": {
                "bit": 23,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL16": {
                "bit": 24,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL17": {
                "bit": 25,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL18": {
                "bit": 26,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL19": {
                "bit": 27,
                "description": "Channel-x sampling time selection (x1=119 to 0)\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              }
            },
            "ADC_AWD1TR": {
              "LT1": {
                "bit": 0,
                "description": "Analog watchdog 1 lower threshold\nThese bits are written by software to define the lower threshold for the analog watchdog.\nRefer to Section113.8: Analog window watchdogs on page1337.",
                "width": 12
              },
              "HT1": {
                "bit": 16,
                "description": "Analog watchdog 1 higher threshold\nThese bits are written by software to define the higher threshold for the analog watchdog.\nRefer to Section113.8: Analog window watchdogs on page1337.",
                "width": 12
              }
            },
            "ADC_AWD2TR": {
              "LT2": {
                "bit": 0,
                "description": "Analog watchdog 2 lower threshold\nThese bits are written by software to define the lower threshold for the analog watchdog.\nRefer to Section113.8: Analog window watchdogs on page1337.",
                "width": 12
              },
              "HT2": {
                "bit": 16,
                "description": "Analog watchdog 2 higher threshold\nThese bits are written by software to define the higher threshold for the analog watchdog.\nRefer to Section113.8: Analog window watchdogs on page1337.",
                "width": 12
              }
            },
            "ADC_CHSELR": {
              "CHSEL0": {
                "bit": 0,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL1": {
                "bit": 1,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL2": {
                "bit": 2,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL3": {
                "bit": 3,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL4": {
                "bit": 4,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL5": {
                "bit": 5,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL6": {
                "bit": 6,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL7": {
                "bit": 7,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL8": {
                "bit": 8,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL9": {
                "bit": 9,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL10": {
                "bit": 10,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL11": {
                "bit": 11,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL12": {
                "bit": 12,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL13": {
                "bit": 13,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL14": {
                "bit": 14,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL15": {
                "bit": 15,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL16": {
                "bit": 16,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL17": {
                "bit": 17,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL18": {
                "bit": 18,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL19": {
                "bit": 19,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).\nNote: If CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              }
            },
            "ADC_CHSELR_ALTERNATE": {
              "SQ1": {
                "bit": 0,
                "description": "1st conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ2": {
                "bit": 4,
                "description": "2nd conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ3": {
                "bit": 8,
                "description": "3rd conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ4": {
                "bit": 12,
                "description": "4th conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ5": {
                "bit": 16,
                "description": "5th conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ6": {
                "bit": 20,
                "description": "6th conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ7": {
                "bit": 24,
                "description": "7th conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection. \nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ8": {
                "bit": 28,
                "description": "8th conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates the end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\n...\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing).",
                "width": 4
              }
            },
            "ADC_AWD3TR": {
              "LT3": {
                "bit": 0,
                "description": "Analog watchdog 3lower threshold\nThese bits are written by software to define the lower threshold for the analog watchdog.\nRefer to Section113.8: Analog window watchdogs on page1337.",
                "width": 12
              },
              "HT3": {
                "bit": 16,
                "description": "Analog watchdog 3 higher threshold\nThese bits are written by software to define the higher threshold for the analog watchdog.\nRefer to Section113.8: Analog window watchdogs on page1337.",
                "width": 12
              }
            },
            "ADC_DR": {
              "DATA": {
                "bit": 0,
                "description": "Converted data \nThese bits are read-only. They contain the conversion result from the last converted channel. The data are left- or right-aligned as shown in Figure141: Data alignment and resolution (oversampling disabled: OVSE = 0) on page1332.\nJust after a calibration is complete, DATA[6:0] contains the calibration factor.",
                "width": 16
              }
            },
            "ADC_AWD2CR": {
              "AWD2CH0": {
                "bit": 0,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH1": {
                "bit": 1,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH2": {
                "bit": 2,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH3": {
                "bit": 3,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH4": {
                "bit": 4,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH5": {
                "bit": 5,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH6": {
                "bit": 6,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH7": {
                "bit": 7,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH8": {
                "bit": 8,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH9": {
                "bit": 9,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH10": {
                "bit": 10,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH11": {
                "bit": 11,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH12": {
                "bit": 12,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH13": {
                "bit": 13,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH14": {
                "bit": 14,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH15": {
                "bit": 15,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH16": {
                "bit": 16,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH17": {
                "bit": 17,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH18": {
                "bit": 18,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH19": {
                "bit": 19,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              }
            },
            "ADC_AWD3CR": {
              "AWD3CH0": {
                "bit": 0,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH1": {
                "bit": 1,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH2": {
                "bit": 2,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH3": {
                "bit": 3,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH4": {
                "bit": 4,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH5": {
                "bit": 5,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH6": {
                "bit": 6,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH7": {
                "bit": 7,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH8": {
                "bit": 8,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH9": {
                "bit": 9,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH10": {
                "bit": 10,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH11": {
                "bit": 11,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH12": {
                "bit": 12,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH13": {
                "bit": 13,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH14": {
                "bit": 14,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH15": {
                "bit": 15,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH16": {
                "bit": 16,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH17": {
                "bit": 17,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH18": {
                "bit": 18,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH19": {
                "bit": 19,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              }
            },
            "ADC_CALFACT": {
              "CALFACT": {
                "bit": 0,
                "description": "Calibration factor\nThese bits are written by hardware or by software.\nOnce a calibration is complete,1they are updated by hardware with the calibration factors.\nSoftware can write these bits with a new calibration factor. If the new calibration factor is different from the current one stored into the analog ADC, it is then applied once a new conversion is launched.\nJust after a calibration is complete, DATA[6:0] contains the calibration factor.\nNote: Software can write these bits only when ADEN=1 (ADC is enabled and no calibration is ongoing and no conversion is ongoing).",
                "width": 7
              }
            },
            "ADC_CCR": {
              "PRESC": {
                "bit": 18,
                "description": "ADC prescaler\nSet and cleared by software to select the frequency of the clock to the ADC. \nOther: Reserved\nNote: Software is allowed to write these bits only when the ADC is disabled (ADCAL1=10, ADSTART1=10, ADSTP1=10, ADDIS1=10 and ADEN1=10).",
                "width": 4
              },
              "VREFEN": {
                "bit": 22,
                "description": "V<sub>REFINT</sub> enable\nThis bit is set and cleared by software to enable/disable the V<sub>REFINT</sub>.\nNote: Software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "TSEN": {
                "bit": 23,
                "description": "Temperature sensor enable\nThis bit is set and cleared by software to enable/disable the temperature sensor.\nNote: Software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)."
              },
              "VBATEN": {
                "bit": 24,
                "description": "V<sub>BAT</sub> enable\nThis bit is set and cleared by software to enable/disable the V<sub>BAT</sub> channel.\nNote: The software is allowed to write this bit only when ADSTART1=10 (which ensures that no conversion is ongoing)"
              }
            }
          }
        },
        "CRYPTO": {
          "instances": [
            {
              "name": "AES",
              "base": "0x40026000",
              "irq": 31
            }
          ],
          "registers": {
            "AES_CR": {
              "offset": "0x00",
              "size": 32,
              "description": "AES control register"
            },
            "AES_SR": {
              "offset": "0x04",
              "size": 32,
              "description": "AES status register"
            },
            "AES_DINR": {
              "offset": "0x08",
              "size": 32,
              "description": "AES data input register"
            },
            "AES_DOUTR": {
              "offset": "0x0C",
              "size": 32,
              "description": "AES data output register"
            },
            "AES_KEYR0": {
              "offset": "0x10",
              "size": 32,
              "description": "AES key register 0"
            },
            "AES_KEYR1": {
              "offset": "0x14",
              "size": 32,
              "description": "AES key register 1"
            },
            "AES_KEYR2": {
              "offset": "0x18",
              "size": 32,
              "description": "AES key register 2"
            },
            "AES_KEYR3": {
              "offset": "0x1C",
              "size": 32,
              "description": "AES key register 3"
            },
            "AES_IVR0": {
              "offset": "0x20",
              "size": 32,
              "description": "AES initialization vector register 0"
            },
            "AES_IVR1": {
              "offset": "0x24",
              "size": 32,
              "description": "AES initialization vector register 1"
            },
            "AES_IVR2": {
              "offset": "0x28",
              "size": 32,
              "description": "AES initialization vector register 2"
            },
            "AES_IVR3": {
              "offset": "0x2C",
              "size": 32,
              "description": "AES initialization vector register 3"
            },
            "AES_KEYR4": {
              "offset": "0x30",
              "size": 32,
              "description": "AES key register 4"
            },
            "AES_KEYR5": {
              "offset": "0x34",
              "size": 32,
              "description": "AES key register 5"
            },
            "AES_KEYR6": {
              "offset": "0x38",
              "size": 32,
              "description": "AES key register 6"
            },
            "AES_KEYR7": {
              "offset": "0x3C",
              "size": 32,
              "description": "AES key register 7"
            },
            "AES_SUSPR0": {
              "offset": "0x40",
              "size": 32,
              "description": "AES suspend registers"
            },
            "AES_SUSPR1": {
              "offset": "0x44",
              "size": 32,
              "description": "AES suspend registers"
            },
            "AES_SUSPR2": {
              "offset": "0x48",
              "size": 32,
              "description": "AES suspend registers"
            },
            "AES_SUSPR3": {
              "offset": "0x4C",
              "size": 32,
              "description": "AES suspend registers"
            },
            "AES_SUSPR4": {
              "offset": "0x50",
              "size": 32,
              "description": "AES suspend registers"
            },
            "AES_SUSPR5": {
              "offset": "0x54",
              "size": 32,
              "description": "AES suspend registers"
            },
            "AES_SUSPR6": {
              "offset": "0x58",
              "size": 32,
              "description": "AES suspend registers"
            },
            "AES_SUSPR7": {
              "offset": "0x5C",
              "size": 32,
              "description": "AES suspend registers"
            },
            "AES_IER": {
              "offset": "0x300",
              "size": 32,
              "description": "AES interrupt enable register"
            },
            "AES_ISR": {
              "offset": "0x304",
              "size": 32,
              "description": "AES interrupt status register"
            },
            "AES_ICR": {
              "offset": "0x308",
              "size": 32,
              "description": "AES interrupt clear register"
            }
          },
          "bits": {
            "AES_CR": {
              "EN": {
                "bit": 0,
                "description": "Enable\nThis bit enables/disables the AES peripheral.\nAt any moment, clearing then setting the bit re-initializes the AES peripheral.\nThis bit is automatically cleared by hardware upon the completion of the key preparation (MODE[1:0] at 0x1) and upon the completion of GCM/GMAC/CCM initialization phase.\nThe bit cannot be set as long as KEYVALID1is cleared"
              },
              "DATATYPE": {
                "bit": 1,
                "description": "Data type\nThis bitfield defines the format of data written in the AES_DINR register or read from the AES_DOUTR register, through selecting the mode of data swapping. This swapping is defined in Section121.4.14: AES data registers and data swapping.\nAttempts to write the bitfield are ignored when EN is set before the write access and it is not cleared by that write access.",
                "width": 2
              },
              "MODE": {
                "bit": 3,
                "description": "Operating mode\nThis bitfield selects the AES operating mode:\nAttempts to write the bitfield are ignored when EN is set before the write access and it is not cleared by that write access.",
                "width": 2
              },
              "CHMOD": {
                "bit": 5,
                "description": "CHMOD[1:0]: Chaining mode\nThis bitfield selects the AES chaining mode:\nothers: Reserved\nAttempts to write the bitfield are ignored when EN is set before the write access and it is not cleared by that write access.",
                "width": 2
              },
              "DMAINEN": {
                "bit": 11,
                "description": "DMA input enable\nThis bit enables automatic generation of DMA requests during the data phase, for incoming data transfers to AES via DMA.\nSetting this bit is ignored when MODE[1:0] is at 0x1 (key derivation)."
              },
              "DMAOUTEN": {
                "bit": 12,
                "description": "DMA output enable\nThis bit enables automatic generation of DMA requests during the data phase, for outgoing data transfers from AES via DMA.\nSetting this bit is ignored when MODE[1:0] is at 0x1 (key derivation)."
              },
              "GCMPH": {
                "bit": 13,
                "description": "GCM or CCM phase selection\nThis bitfield selects the phase, applicable only with GCM, GMAC or CCM chaining modes.",
                "width": 2
              },
              "CHMOD_1": {
                "bit": 16,
                "description": "CHMOD[2]"
              },
              "KEYSIZE": {
                "bit": 18,
                "description": "Key size selection\nThis bitfield defines the key length in bits of the key used by AES.\nAttempts to write the bit are ignored when the EN is set before the write access and it is not cleared by that write access."
              },
              "NPBLB": {
                "bit": 20,
                "description": "Number of padding bytes in last block\nThis padding information must be filled by software before processing the last block of GCM payload encryption or CCM payload decryption, otherwise authentication tag computation is incorrect.\n...",
                "width": 4
              },
              "IPRST": {
                "bit": 31,
                "description": "AES peripheral software reset\nSetting the bit resets the AES peripheral, putting all registers to their default values, except the IPRST bit itself. Hence, any key-relative data are lost. For this reason, it is recommended to set the bit before handing over the AES to a less secure application.\nThe bit must be kept low while writing any configuration registers."
              }
            },
            "AES_SR": {
              "RDERRF": {
                "bit": 1,
                "description": "Read error flag\nThis bit is set when an unexpected read to the AES_DOUTR register occurred. When set RDERRF bit has no impact on the AES operations.\nThe flag setting generates an interrupt if the RWEIE bit of the AES_IER register is set.\nThe flag is cleared by setting the RWEIF bit of the AES_ICR register."
              },
              "WRERRF": {
                "bit": 2,
                "description": "Write error flag\nThis bit is set when an unexpected write to the AES_DINR register occurred. When set WRERRF bit has no impact on the AES operations.\nThe flag setting generates an interrupt if the RWEIE bit of the AES_IER register is set.\nThe flag is cleared by setting the RWEIF bit of the AES_ICR register."
              },
              "BUSY": {
                "bit": 3,
                "description": "Busy\nThis flag indicates whether AES is idle or busy.\nAES is flagged as idle when disabled (when EN is low) or when the last processing is completed.\nAES is flagged as busy when processing a block data, preparing a key (ECB or CBC decryption only).\nWhen GCM encryption is selected, this flag must be at zero before suspending current process to manage a higher-priority message."
              },
              "KEYVALID": {
                "bit": 7,
                "description": "Key valid flag\nThis bit is set by hardware when the key of size defined by KEYSIZE is loaded in AES_KEYRx key registers.\nThe EN bit can only be set when KEYVALID is set.\nThe key must be written in the key registers in the correct sequence, otherwise the KEIF flag is set and KEYVALID remains cleared.\nIf set, KEIF must be cleared through the AES_ICR register, otherwise KEYVALID cannot be set. See the KEIF flag description for more details.\nFor further information on key loading, refer to Section121.4.15: AES key registers."
              }
            },
            "AES_DINR": {
              "DIN": {
                "bit": 0,
                "description": "Data input\nA four-fold sequential write to this bitfield during the Input phase results in writing a complete 16-bytes block of input data to the AES peripheral. From the first to the fourth write, the corresponding data weights are [127:96], [95:64], [63:32], and [31:0]. Upon each write, the data from the 32-bit input buffer are handled by the data swap block according to the DATATYPE[1:0] bitfield, then written into the AES core 16-bytes input buffer.\nReads return zero.",
                "width": 32
              }
            },
            "AES_DOUTR": {
              "DOUT": {
                "bit": 0,
                "description": "Data output\nThis read-only bitfield fetches a 32-bit output buffer. A four-fold sequential read of this bitfield, upon\nthe computation completion (CCF flag set), virtually reads a complete 16-byte block of output data from the AES peripheral. Before reaching the output buffer, the data produced by the AES core are\nhandled by the data swap block according to the DATATYPE[1:0] bitfield.\nData weights from the first to the fourth read operation are: [127:96], [95:64], [63:32], and [31:0].",
                "width": 32
              }
            },
            "AES_KEYR0": {
              "KEY": {
                "bit": 0,
                "description": "Cryptographic key, bits [31:0]\nThese are bits [31:0] of the write-only bitfield KEY[255:0] AES encryption or decryption key, depending on the MODE[1:0] bitfield of the AES_CR register.\nWrites to AES_KEYRx registers are ignored when AES is enabled (EN bit set).\n A special writing sequence is required. In this sequence, any valid write to AES_KEYRx register clears the KEYVALID flag except for the sequence-completing write that sets it. Also refer to the description of the KEYVALID flag in the AES_SR register.",
                "width": 32
              }
            },
            "AES_KEYR1": {
              "KEY": {
                "bit": 0,
                "description": "Cryptographic key, bits [63:32]\nRefer to the AES_KEYR0 register for description of the KEY[255:0] bitfield and for information relative to writing AES_KEYRx registers.",
                "width": 32
              }
            },
            "AES_KEYR2": {
              "KEY": {
                "bit": 0,
                "description": "Cryptographic key, bits [95:64]\nRefer to the AES_KEYR0 register for description of the KEY[255:0] bitfield and for information relative to writing AES_KEYRx registers.",
                "width": 32
              }
            },
            "AES_KEYR3": {
              "KEY": {
                "bit": 0,
                "description": "Cryptographic key, bits [127:96]\nRefer to the AES_KEYR0 register for description of the KEY[255:0] bitfield and for information relative to writing AES_KEYRx registers.",
                "width": 32
              }
            },
            "AES_IVR0": {
              "IVI": {
                "bit": 0,
                "description": "Initialization vector input, bits [31:0]\nAES_IVRx registers store the 128-bit initialization vector or the nonce, depending on the chaining mode selected. This value is updated by hardware after each computation round (when applicable).\nWrite to this register is ignored when EN bit is set in AES_SR register",
                "width": 32
              }
            },
            "AES_IVR1": {
              "IVI": {
                "bit": 0,
                "description": "Initialization vector input, bits [63:32]\nRefer to the AES_IVR0 register for description of the IVI[128:0] bitfield.",
                "width": 32
              }
            },
            "AES_IVR2": {
              "IVI": {
                "bit": 0,
                "description": "Initialization vector input, bits [95:64]\nRefer to the AES_IVR0 register for description of the IVI[128:0] bitfield.",
                "width": 32
              }
            },
            "AES_IVR3": {
              "IVI": {
                "bit": 0,
                "description": "Initialization vector input, bits [127:96]\nRefer to the AES_IVR0 register for description of the IVI[128:0] bitfield.",
                "width": 32
              }
            },
            "AES_KEYR4": {
              "KEY": {
                "bit": 0,
                "description": "Cryptographic key, bits [159:128]\nRefer to the AES_KEYR0 register for description of the KEY[255:0] bitfield and for information relative to writing AES_KEYRx registers.",
                "width": 32
              }
            },
            "AES_KEYR5": {
              "KEY": {
                "bit": 0,
                "description": "Cryptographic key, bits [191:160]\nRefer to the AES_KEYR0 register for description of the KEY[255:0] bitfield and for information relative to writing AES_KEYRx registers.",
                "width": 32
              }
            },
            "AES_KEYR6": {
              "KEY": {
                "bit": 0,
                "description": "Cryptographic key, bits [223:192]\nRefer to the AES_KEYR0 register for description of the KEY[255:0] bitfield and for information relative to writing AES_KEYRx registers.",
                "width": 32
              }
            },
            "AES_KEYR7": {
              "KEY": {
                "bit": 0,
                "description": "Cryptographic key, bits [255:224]\nRefer to the AES_KEYR0 register for description of the KEY[255:0] bitfield and for information relative to writing AES_KEYRx registers.",
                "width": 32
              }
            },
            "AES_SUSPR0": {
              "SUSP": {
                "bit": 0,
                "description": "Suspend data\nAES_SUSPRx registers contain the complete internal register states of the AES when the GCM, GMAC or CCM processing of the current task is suspended to process a higher-priority task. Refer to Section121.4.8: AES suspend and resume operations for more details.\nRead to this register returns zero when EN bit is cleared in AES_SR register.\nAES_SUSPRx registers are not used in other chaining modes than GCM, GMAC or CCM.",
                "width": 32
              }
            },
            "AES_SUSPR1": {
              "SUSP": {
                "bit": 0,
                "description": "Suspend data\nAES_SUSPRx registers contain the complete internal register states of the AES when the GCM, GMAC or CCM processing of the current task is suspended to process a higher-priority task. Refer to Section121.4.8: AES suspend and resume operations for more details.\nRead to this register returns zero when EN bit is cleared in AES_SR register.\nAES_SUSPRx registers are not used in other chaining modes than GCM, GMAC or CCM.",
                "width": 32
              }
            },
            "AES_SUSPR2": {
              "SUSP": {
                "bit": 0,
                "description": "Suspend data\nAES_SUSPRx registers contain the complete internal register states of the AES when the GCM, GMAC or CCM processing of the current task is suspended to process a higher-priority task. Refer to Section121.4.8: AES suspend and resume operations for more details.\nRead to this register returns zero when EN bit is cleared in AES_SR register.\nAES_SUSPRx registers are not used in other chaining modes than GCM, GMAC or CCM.",
                "width": 32
              }
            },
            "AES_SUSPR3": {
              "SUSP": {
                "bit": 0,
                "description": "Suspend data\nAES_SUSPRx registers contain the complete internal register states of the AES when the GCM, GMAC or CCM processing of the current task is suspended to process a higher-priority task. Refer to Section121.4.8: AES suspend and resume operations for more details.\nRead to this register returns zero when EN bit is cleared in AES_SR register.\nAES_SUSPRx registers are not used in other chaining modes than GCM, GMAC or CCM.",
                "width": 32
              }
            },
            "AES_SUSPR4": {
              "SUSP": {
                "bit": 0,
                "description": "Suspend data\nAES_SUSPRx registers contain the complete internal register states of the AES when the GCM, GMAC or CCM processing of the current task is suspended to process a higher-priority task. Refer to Section121.4.8: AES suspend and resume operations for more details.\nRead to this register returns zero when EN bit is cleared in AES_SR register.\nAES_SUSPRx registers are not used in other chaining modes than GCM, GMAC or CCM.",
                "width": 32
              }
            },
            "AES_SUSPR5": {
              "SUSP": {
                "bit": 0,
                "description": "Suspend data\nAES_SUSPRx registers contain the complete internal register states of the AES when the GCM, GMAC or CCM processing of the current task is suspended to process a higher-priority task. Refer to Section121.4.8: AES suspend and resume operations for more details.\nRead to this register returns zero when EN bit is cleared in AES_SR register.\nAES_SUSPRx registers are not used in other chaining modes than GCM, GMAC or CCM.",
                "width": 32
              }
            },
            "AES_SUSPR6": {
              "SUSP": {
                "bit": 0,
                "description": "Suspend data\nAES_SUSPRx registers contain the complete internal register states of the AES when the GCM, GMAC or CCM processing of the current task is suspended to process a higher-priority task. Refer to Section121.4.8: AES suspend and resume operations for more details.\nRead to this register returns zero when EN bit is cleared in AES_SR register.\nAES_SUSPRx registers are not used in other chaining modes than GCM, GMAC or CCM.",
                "width": 32
              }
            },
            "AES_SUSPR7": {
              "SUSP": {
                "bit": 0,
                "description": "Suspend data\nAES_SUSPRx registers contain the complete internal register states of the AES when the GCM, GMAC or CCM processing of the current task is suspended to process a higher-priority task. Refer to Section121.4.8: AES suspend and resume operations for more details.\nRead to this register returns zero when EN bit is cleared in AES_SR register.\nAES_SUSPRx registers are not used in other chaining modes than GCM, GMAC or CCM.",
                "width": 32
              }
            },
            "AES_IER": {
              "CCFIE": {
                "bit": 0,
                "description": "Computation complete flag interrupt enable\nThis bit enables or disables (masks) the AES interrupt generation when CCF (computation complete flag) is set."
              },
              "RWEIE": {
                "bit": 1,
                "description": "Read or write error interrupt enable\nThis bit enables or disables (masks) the AES interrupt generation when RWEIF (read and/or write error flag) is set."
              },
              "KEIE": {
                "bit": 2,
                "description": "Key error interrupt enable\nThis bit enables or disables (masks) the AES interrupt generation when KEIF (key error flag) is set."
              }
            },
            "AES_ISR": {
              "CCF": {
                "bit": 0,
                "description": "Computation complete flag\nThis flag indicates whether the computation is completed. It is significant only when the DMAOUTEN bit is cleared, and it may stay high when DMAOUTEN is set.\nThe flag setting generates an interrupt if the CCFIE bit of the AES_IER register is set.\nThe flag is cleared by setting the corresponding bit of the AES_ICR register."
              },
              "RWEIF": {
                "bit": 1,
                "description": "Read or write error interrupt flag\nThis read-only bit is set by hardware when a RDERRF or a WRERRF error flag is set in the AES_SR register.\nThe flag setting generates an interrupt if the RWEIE bit of the AES_IER register is set.\nThe flag is cleared by setting the corresponding bit of the AES_ICR register.\nThe flags has no meaning when key derivation mode is selected.\nSee the AES_SR register for details."
              },
              "KEIF": {
                "bit": 2,
                "description": "Key error interrupt flag\nThis read-only bit is set by hardware when the key information fails to load into key registers.\nThe flag setting generates an interrupt if the KEIE bit of the AES_IER register is set.\nThe flag is cleared by setting the corresponding bit of the AES_ICR register.\nKEIF is raised upon any of the following events:\nAES_KEYRx register write does not respect the correct order. (For KEYSIZE1cleared, AES_KEYR0 then AES_KEYR1 then AES_KEYR2 then AES_KEYR3 register, or reverse. For KEYSIZE set, AES_KEYR0 then AES_KEYR1 then AES_KEYR2 then AES_KEYR3 then AES_KEYR4 then AES_KEYR5 then AES_KEYR6 then AES_KEYR7, or reverse).\nKEIF must be cleared by the application software, otherwise KEYVALID cannot be set."
              }
            },
            "AES_ICR": {
              "CCF": {
                "bit": 0,
                "description": "Computation complete flag clear\nSetting this bit clears the CCF status bit of the AES_ISR register."
              },
              "RWEIF": {
                "bit": 1,
                "description": "Read or write error interrupt flag clear\nSetting this bit clears the RWEIF status bit of the AES_ISR register, and clears both RDERRF and WRERRF flags in the AES_SR register."
              },
              "KEIF": {
                "bit": 2,
                "description": "Key error interrupt flag clear\nSetting this bit clears the KEIF status bit of the AES_ISR register."
              }
            }
          }
        },
        "COMP": {
          "instances": [
            {
              "name": "COMP",
              "base": "0x40010200"
            }
          ],
          "registers": {
            "COMP1_CSR": {
              "offset": "0x00",
              "size": 32,
              "description": "Comparator 1 control and status register"
            },
            "COMP2_CSR": {
              "offset": "0x04",
              "size": 32,
              "description": "Comparator 2 control and status register"
            }
          },
          "bits": {
            "COMP1_CSR": {
              "EN": {
                "bit": 0,
                "description": "Comparator 1 enable bit \nThis bit is controlled by software (if not locked). It enables the comparator 1:"
              },
              "INMSEL": {
                "bit": 4,
                "description": "Comparator 1 signal selector for inverting input INM\nThis bitfield is controlled by software (if not locked). It selects the signal for the inverting input COMP_INM of the comparator 1:\nRefer to Table176: COMP1 inverting input assignment.",
                "width": 4
              },
              "INPSEL": {
                "bit": 8,
                "description": "Comparator 1 signal selector for noninverting input\nThis bitfield is controlled by software (if not locked). It selects the signal for the noninverting input COMP_INP of the comparator 1 (also see the WINMODE bit):\nRefer to Table175: COMP1 noninverting input assignment.",
                "width": 3
              },
              "WINMODE": {
                "bit": 11,
                "description": "Comparator 1 noninverting input selector for window mode\nThis bit is controlled by software (if not locked). It selects the signal for COMP_INP input of the comparator 1:"
              },
              "WINOUT": {
                "bit": 14,
                "description": "Comparator 1 output selector\nThis bit is controlled by software (if not locked). It selects the comparator 1 output:"
              },
              "POLARITY": {
                "bit": 15,
                "description": "Comparator 1 polarity selector\nThis bit is controlled by software (if not locked). It selects the comparator 1 output polarity:"
              },
              "HYST": {
                "bit": 16,
                "description": "Comparator 1 hysteresis selector\nThis bitfield is controlled by software (if not locked). It selects the hysteresis of the comparator 1:",
                "width": 2
              },
              "PWRMODE": {
                "bit": 18,
                "description": "Comparator 1 power mode selector\nThis bitfield is controlled by software (if not locked). It selects the power consumption and as a consequence the speed of the comparator 1:",
                "width": 2
              },
              "BLANKSEL": {
                "bit": 20,
                "description": "Comparator 1 blanking source selector\nThis bitfield is controlled by software (if not locked). It selects the blanking source:\nOthers: Reserved, must not be used",
                "width": 5
              },
              "VALUE": {
                "bit": 30,
                "description": "Comparator 1 output status\nThis bit is read-only. It reflects the level of the comparator 1 output after the polarity selector and blanking, as indicated in Figure163."
              },
              "LOCK": {
                "bit": 31,
                "description": "COMP_CSR register lock\nThis bit is set by software and cleared by a system reset. It locks the comparator 3 control bits. When locked, all register bits are read-only."
              }
            },
            "COMP2_CSR": {
              "EN": {
                "bit": 0,
                "description": "Comparator 2 enable bit \nThis bit is controlled by software (if not locked). It enables the comparator 2:"
              },
              "INMSEL": {
                "bit": 4,
                "description": "Comparator 2 signal selector for inverting input INM\nThis bitfield is controlled by software (if not locked). It selects the signal for the inverting input COMP_INM of the comparator 2:\nRefer to Table178: COMP2 inverting input assignment.",
                "width": 4
              },
              "INPSEL": {
                "bit": 8,
                "description": "Comparator 2 signal selector for noninverting input\nThis bitfield is controlled by software (if not locked). It selects the signal for the noninverting input COMP_INP of the comparator 2 (also see the WINMODE bit):\nRefer to Table177: COMP2 noninverting input assignment.",
                "width": 2
              },
              "WINMODE": {
                "bit": 11,
                "description": "Comparator 2 noninverting input selector for window mode\nThis bit is controlled by software (if not locked). It selects the signal for COMP_INP input of the comparator 2:"
              },
              "WINOUT": {
                "bit": 14,
                "description": "Comparator 2 output selector\nThis bit is controlled by software (if not locked). It selects the comparator 2 output:"
              },
              "POLARITY": {
                "bit": 15,
                "description": "Comparator 2 polarity selector\nThis bit is controlled by software (if not locked). It selects the comparator 2 output polarity:"
              },
              "HYST": {
                "bit": 16,
                "description": "Comparator 2 hysteresis selector\nThis bitfield is controlled by software (if not locked). It selects the hysteresis of the comparator 2:",
                "width": 2
              },
              "PWRMODE": {
                "bit": 18,
                "description": "Comparator 2 power mode selector\nThis bitfield is controlled by software (if not locked). It selects the power consumption and as a consequence the speed of the comparator 2:",
                "width": 2
              },
              "BLANKSEL": {
                "bit": 20,
                "description": "Comparator 2 blanking source selector\nThis bitfield is controlled by software (if not locked). It selects the blanking source:\nOthers: Reserved, must not be used",
                "width": 5
              },
              "VALUE": {
                "bit": 30,
                "description": "Comparator 2 output status\nThis bit is read-only. It reflects the level of the comparator 2 output after the polarity selector and blanking, as indicated in Figure163."
              },
              "LOCK": {
                "bit": 31,
                "description": "COMP_CSR register lock\nThis bit is set by software and cleared by a system reset. It locks the comparator 3 control bits. When locked, all register bits are read-only."
              }
            }
          }
        },
        "CRC": {
          "instances": [
            {
              "name": "CRC",
              "base": "0x40023000"
            }
          ],
          "registers": {
            "CRC_DR": {
              "offset": "0x00",
              "size": 32,
              "description": "CRC data register"
            },
            "CRC_IDR": {
              "offset": "0x04",
              "size": 32,
              "description": "CRC independent data register"
            },
            "CRC_CR": {
              "offset": "0x08",
              "size": 32,
              "description": "CRC control register"
            },
            "CRC_INIT": {
              "offset": "0x10",
              "size": 32,
              "description": "CRC initial value"
            },
            "CRC_POL": {
              "offset": "0x14",
              "size": 32,
              "description": "CRC polynomial"
            }
          },
          "bits": {
            "CRC_DR": {
              "DR": {
                "bit": 0,
                "description": "Data register bits\nThis register is used to write new data to the CRC calculator.\nIt holds the previous CRC calculation result when it is read.\nIf the data size is less than 32 bits, the least significant bits are used to write/read the correct value.",
                "width": 32
              }
            },
            "CRC_IDR": {
              "IDR": {
                "bit": 0,
                "description": "General-purpose 32-bit data register bits\nThese bits can be used as a temporary storage location for four bytes.\nThis register is not affected by CRC resets generated by the RESET bit in the CRC_CR register",
                "width": 32
              }
            },
            "CRC_CR": {
              "RESET": {
                "bit": 0,
                "description": "RESET bit\nThis bit is set by software to reset the CRC calculation unit and set the data register to the value stored in the CRC_INIT register. This bit can only be set, it is automatically cleared by hardware"
              },
              "POLYSIZE": {
                "bit": 3,
                "description": "Polynomial size\nThese bits control the size of the polynomial.",
                "width": 2
              },
              "REV_IN": {
                "bit": 5,
                "description": "Reverse input data\nThis bitfield controls the reversal of the bit order of the input data",
                "width": 2
              },
              "REV_OUT": {
                "bit": 7,
                "description": "Reverse output data\nThis bitfield controls the reversal of the bit order of the output data.",
                "width": 2
              },
              "RTYPE_IN": {
                "bit": 9,
                "description": "Reverse type input\nThis bit controls the reversal granularity of the input data."
              },
              "RTYPE_OUT": {
                "bit": 10,
                "description": "Reverse type output\nThis bit controls the reversal granularity of the output data."
              }
            },
            "CRC_INIT": {
              "CRC_INIT": {
                "bit": 0,
                "description": "Programmable initial CRC value\nThis register is used to write the CRC initial value.",
                "width": 32
              }
            },
            "CRC_POL": {
              "POL": {
                "bit": 0,
                "description": "Programmable polynomial \nThis register is used to write the coefficients of the polynomial to be used for CRC calculation.\nIf the polynomial size is less than 32 bits, the least significant bits have to be used to program the correct value.",
                "width": 32
              }
            }
          }
        },
        "CRS": {
          "instances": [
            {
              "name": "CRS",
              "base": "0x40006C00"
            }
          ],
          "registers": {
            "CRS_CR": {
              "offset": "0x00",
              "size": 32,
              "description": "CRS control register"
            },
            "CRS_CFGR": {
              "offset": "0x04",
              "size": 32,
              "description": "CRS configuration register"
            },
            "CRS_ISR": {
              "offset": "0x08",
              "size": 32,
              "description": "CRS interrupt and status register"
            },
            "CRS_ICR": {
              "offset": "0x0C",
              "size": 32,
              "description": "CRS interrupt flag clear register"
            }
          },
          "bits": {
            "CRS_CR": {
              "SYNCOKIE": {
                "bit": 0,
                "description": "SYNC event OK interrupt enable"
              },
              "SYNCWARNIE": {
                "bit": 1,
                "description": "SYNC warning interrupt enable"
              },
              "ERRIE": {
                "bit": 2,
                "description": "Synchronization or trimming error interrupt enable"
              },
              "ESYNCIE": {
                "bit": 3,
                "description": "Expected SYNC interrupt enable"
              },
              "CEN": {
                "bit": 5,
                "description": "Frequency error counter enable\nThis bit enables the oscillator clock for the frequency error counter.\nWhen this bit is set, the CRS_CFGR register is write-protected and cannot be modified."
              },
              "AUTOTRIMEN": {
                "bit": 6,
                "description": "Automatic trimming enable\nThis bit enables the automatic hardware adjustment of TRIM bits according to the measured frequency error between two SYNC events. If this bit is set, the TRIM bits are read-only. The TRIM value can be adjusted by hardware by one or two steps at a time, depending on the measured frequency error value. Refer to Section15.4.4 for more details."
              },
              "SWSYNC": {
                "bit": 7,
                "description": "Generate software SYNC event\nThis bit is set by software in order to generate a software SYNC event. It is automatically cleared by hardware."
              },
              "TRIM": {
                "bit": 8,
                "description": "HSI48 oscillator smooth trimming\nThe default value of the HSI48 oscillator smooth trimming is 64, which corresponds to the middle of the trimming interval.",
                "width": 7
              }
            },
            "CRS_CFGR": {
              "RELOAD": {
                "bit": 0,
                "description": "Counter reload value\nRELOAD is the value to be loaded in the frequency error counter with each SYNC event.\nRefer to Section15.4.3 for more details about counter behavior.",
                "width": 16
              },
              "FELIM": {
                "bit": 16,
                "description": "Frequency error limit\nFELIM contains the value to be used to evaluate the captured frequency error value latched in the FECAP[15:0] bits of the CRS_ISR register. Refer to Section15.4.4 for more details about FECAP evaluation.",
                "width": 8
              },
              "SYNCDIV": {
                "bit": 24,
                "description": "SYNC divider\nThese bits are set and cleared by software to control the division factor of the SYNC signal.",
                "width": 3
              },
              "SYNCSRC": {
                "bit": 28,
                "description": "SYNC signal source selection\nThese bits are set and cleared by software to select the SYNC signal source (see Table122):\nNote: When using USB LPM (Link Power Management) and the device is in Sleep mode, the periodic USB SOF is not generated by the host. No SYNC signal is therefore provided to the CRS to calibrate the HSI48 oscillator on the run. To guarantee the required clock precision after waking up from Sleep mode, the LSE or reference clock on the GPIOs must be used as SYNC signal.",
                "width": 2
              },
              "SYNCPOL": {
                "bit": 31,
                "description": "SYNC polarity selection\nThis bit is set and cleared by software to select the input polarity for the SYNC signal source."
              }
            },
            "CRS_ISR": {
              "SYNCOKF": {
                "bit": 0,
                "description": "SYNC event OK flag\nThis flag is set by hardware when the measured frequency error is smaller than FELIM * 3. This means that either no adjustment of the TRIM value is needed or that an adjustment by one trimming step is enough to compensate the frequency error. An interrupt is generated if the SYNCOKIE bit is set in the CRS_CR register. It is cleared by software by setting the SYNCOKC bit in the CRS_ICR register."
              },
              "SYNCWARNF": {
                "bit": 1,
                "description": "SYNC warning flag\nThis flag is set by hardware when the measured frequency error is greater than or equal to FELIM * 3, but smaller than FELIM * 128. This means that to compensate the frequency error, the TRIM value must be adjusted by two steps or more. An interrupt is generated if the SYNCWARNIE bit is set in the CRS_CR register. It is cleared by software by setting the SYNCWARNC bit in the CRS_ICR register."
              },
              "ERRF": {
                "bit": 2,
                "description": "Error flag\nThis flag is set by hardware in case of any synchronization or trimming error. It is the logical OR of the TRIMOVF, SYNCMISS and SYNCERR bits. An interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software in reaction to setting the ERRC bit in the CRS_ICR register, which clears the TRIMOVF, SYNCMISS and SYNCERR bits."
              },
              "ESYNCF": {
                "bit": 3,
                "description": "Expected SYNC flag\nThis flag is set by hardware when the frequency error counter reached a zero value. An interrupt is generated if the ESYNCIE bit is set in the CRS_CR register. It is cleared by software by setting the ESYNCC bit in the CRS_ICR register."
              },
              "SYNCERR": {
                "bit": 8,
                "description": "SYNC error\nThis flag is set by hardware when the SYNC pulse arrives before the ESYNC event and the measured frequency error is greater than or equal to FELIM * 128. This means that the frequency error is too big (internal frequency too low) to be compensated by adjusting the TRIM value, and that some other action has to be taken. An interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software by setting the ERRC bit in the CRS_ICR register."
              },
              "SYNCMISS": {
                "bit": 9,
                "description": "SYNC missed\nThis flag is set by hardware when the frequency error counter reaches value FELIM * 128 and no SYNC is detected, meaning either that a SYNC pulse was missed, or the frequency error is too big (internal frequency too high) to be compensated by adjusting the TRIM value, hence some other action must be taken. At this point, the frequency error counter is stopped (waiting for a next SYNC), and an interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software by setting the ERRC bit in the CRS_ICR register."
              },
              "TRIMOVF": {
                "bit": 10,
                "description": "Trimming overflow or underflow\nThis flag is set by hardware when the automatic trimming tries to over- or under-flow the TRIM value. An interrupt is generated if the ERRIE bit is set in the CRS_CR register. It is cleared by software by setting the ERRC bit in the CRS_ICR register."
              },
              "FEDIR": {
                "bit": 15,
                "description": "Frequency error direction\nFEDIR is the counting direction of the frequency error counter latched in the time of the last SYNC event. It shows whether the actual frequency is below or above the target."
              },
              "FECAP": {
                "bit": 16,
                "description": "Frequency error capture\nFECAP is the frequency error counter value latched in the time of the last SYNC event.\nRefer to Section15.4.4 for more details about FECAP usage.",
                "width": 16
              }
            },
            "CRS_ICR": {
              "SYNCOKC": {
                "bit": 0,
                "description": "SYNC event OK clear flag\nWriting 1 to this bit clears the SYNCOKF flag in the CRS_ISR register."
              },
              "SYNCWARNC": {
                "bit": 1,
                "description": "SYNC warning clear flag\nWriting 1 to this bit clears the SYNCWARNF flag in the CRS_ISR register."
              },
              "ERRC": {
                "bit": 2,
                "description": "Error clear flag\nWriting 1 to this bit clears TRIMOVF, SYNCMISS and SYNCERR bits and consequently also the ERRF flag in the CRS_ISR register."
              },
              "ESYNCC": {
                "bit": 3,
                "description": "Expected SYNC clear flag\nWriting 1 to this bit clears the ESYNCF flag in the CRS_ISR register."
              }
            }
          }
        },
        "DAC": {
          "instances": [
            {
              "name": "DAC",
              "base": "0x40007400"
            }
          ],
          "registers": {
            "DAC_CR": {
              "offset": "0x00",
              "size": 32,
              "description": "DAC control register"
            },
            "DAC_SWTRGR": {
              "offset": "0x04",
              "size": 32,
              "description": "DAC software trigger register"
            },
            "DAC_DHR12R1": {
              "offset": "0x08",
              "size": 32,
              "description": "DAC channel1 12-bit right-aligned data holding register"
            },
            "DAC_DHR12L1": {
              "offset": "0x0C",
              "size": 32,
              "description": "DAC channel1 12-bit left aligned data holding register"
            },
            "DAC_DHR8R1": {
              "offset": "0x10",
              "size": 32,
              "description": "DAC channel1 8-bit right aligned data holding register"
            },
            "DAC_DOR1": {
              "offset": "0x2C",
              "size": 32,
              "description": "DAC channel1 data output register"
            },
            "DAC_SR": {
              "offset": "0x34",
              "size": 32,
              "description": "DAC status register"
            },
            "DAC_CCR": {
              "offset": "0x38",
              "size": 32,
              "description": "DAC calibration control register"
            },
            "DAC_MCR": {
              "offset": "0x3C",
              "size": 32,
              "description": "DAC mode control register"
            },
            "DAC_SHSR1": {
              "offset": "0x40",
              "size": 32,
              "description": "DAC channel1 sample and hold sample time register"
            },
            "DAC_SHHR": {
              "offset": "0x48",
              "size": 32,
              "description": "DAC sample and hold time register"
            },
            "DAC_SHRR": {
              "offset": "0x4C",
              "size": 32,
              "description": "DAC sample and hold refresh time register"
            }
          },
          "bits": {
            "DAC_CR": {
              "EN1": {
                "bit": 0,
                "description": "DAC channel1 enable\nThis bit is set and cleared by software to enable/disable DAC channel1."
              },
              "TEN1": {
                "bit": 1,
                "description": "DAC channel1 trigger enable\nThis bit is set and cleared by software to enable/disable DAC channel1 trigger.\nNote: When software trigger is selected, the transfer from the DAC_DHR1 register to the DAC_DOR1 register takes only one dac_pclk clock cycle."
              },
              "TSEL1": {
                "bit": 2,
                "description": "DAC channel1 trigger selection\nThese bits select the external event used to trigger DAC channel1\n...\nRefer to the trigger selection tables in Section114.4.2: DAC pins and internal signals for details on trigger configuration and mapping.\nNote: Only used if bit TEN11=11 (DAC channel1 trigger enabled).",
                "width": 4
              },
              "WAVE1": {
                "bit": 6,
                "description": "DAC channel1 noise/triangle wave generation enable\nThese bits are set and cleared by software.\n1x: Triangle wave generation enabled\nOnly used if bit TEN11=11 (DAC channel1 trigger enabled).",
                "width": 2
              },
              "MAMP1": {
                "bit": 8,
                "description": "DAC channel1 mask/amplitude selector",
                "width": 4
              },
              "DMAEN1": {
                "bit": 12,
                "description": "DAC channel1 DMA enable\nThis bit is set and cleared by software."
              },
              "DMAUDRIE1": {
                "bit": 13,
                "description": "DAC channel1 DMA Underrun Interrupt enable\nThis bit is set and cleared by software."
              },
              "CEN1": {
                "bit": 14,
                "description": "DAC channel1 calibration enable\nThis bit is set and cleared by software to enable/disable DAC channel1 calibration, it can be written only if bit EN11=10 into DAC_CR (the calibration mode can be entered/exit only when the DAC channel is disabled) Otherwise, the write operation is ignored."
              }
            },
            "DAC_SWTRGR": {
              "SWTRIG1": {
                "bit": 0,
                "description": "DAC channel1 software trigger\nThis bit is set by software to trigger the DAC in software trigger mode.\nNote: This bit is cleared by hardware (one dac_pclk clock cycle later) once the DAC_DHR1 register value has been loaded into the DAC_DOR1 register."
              }
            },
            "DAC_DHR12R1": {
              "DACC1DHR": {
                "bit": 0,
                "description": "DAC channel1 12-bit right-aligned data \nThese bits are written by software. They specify 12-bit data for DAC channel1.",
                "width": 12
              }
            },
            "DAC_DHR12L1": {
              "DACC1DHR": {
                "bit": 4,
                "description": "DAC channel1 12-bit left-aligned data\nThese bits are written by software.\nThey specify 12-bit data for DAC channel1.",
                "width": 12
              }
            },
            "DAC_DHR8R1": {
              "DACC1DHR": {
                "bit": 0,
                "description": "DAC channel1 8-bit right-aligned data\nThese bits are written by software. They specify 8-bit data for DAC channel1.",
                "width": 8
              }
            },
            "DAC_DOR1": {
              "DACC1DOR": {
                "bit": 0,
                "description": "DAC channel1 data output\nThese bits are read-only, they contain data output for DAC channel1.",
                "width": 12
              }
            },
            "DAC_SR": {
              "DMAUDR1": {
                "bit": 13,
                "description": "DAC channel1 DMA underrun flag\nThis bit is set by hardware and cleared by software (by writing it to 1)."
              },
              "CAL_FLAG1": {
                "bit": 14,
                "description": "DAC channel1 calibration offset status\nThis bit is set and cleared by hardware"
              },
              "BWST1": {
                "bit": 15,
                "description": "DAC channel1 busy writing sample time flag\nThis bit is systematically set just after Sample and hold mode enable and is set each time the software writes the register DAC_SHSR1, It is cleared by hardware when the write operation of DAC_SHSR1 is complete. (It takes about 3 LSI periods of synchronization)."
              }
            },
            "DAC_CCR": {
              "OTRIM1": {
                "bit": 0,
                "description": "DAC channel1 offset trimming value",
                "width": 5
              }
            },
            "DAC_MCR": {
              "MODE1": {
                "bit": 0,
                "description": "DAC channel1 mode\nThese bits can be written only when the DAC is disabled and not in the calibration mode (when bit EN11=10 and bit CEN11=10 in the DAC_CR register). If EN11=11 or CEN11=11 the write operation is ignored.\nThey can be set and cleared by software to select the DAC channel1 mode:\nDAC channel1 in Normal mode\nDAC channel1 in sample & hold mode\nNote: This register can be modified only when EN11=10.",
                "width": 3
              }
            },
            "DAC_SHSR1": {
              "TSAMPLE1": {
                "bit": 0,
                "description": "DAC channel1 sample time (only valid in Sample and hold mode)\nThese bits can be written when the DAC channel1 is disabled or also during normal operation. in the latter case, the write can be done only when BWST1 of DAC_SR register is low, If BWST11=11, the write operation is ignored.",
                "width": 10
              }
            },
            "DAC_SHHR": {
              "THOLD1": {
                "bit": 0,
                "description": "DAC channel1 hold time (only valid in Sample and hold mode)\nHold time1=1(THOLD[9:0]) x LSI clock period\nNote: This register can be modified only when EN11=10.",
                "width": 10
              }
            },
            "DAC_SHRR": {
              "TREFRESH1": {
                "bit": 0,
                "description": "DAC channel1 refresh time (only valid in Sample and hold mode)\nRefresh time1=1(TREFRESH[7:0]) x LSI clock period\nNote: This register can be modified only when EN11=10.",
                "width": 8
              }
            }
          }
        },
        "DBGMCU": {
          "instances": [
            {
              "name": "DBGMCU",
              "base": "0x40015800"
            }
          ],
          "registers": {
            "DBGMCU_IDCODE": {
              "offset": "0x00",
              "size": 32,
              "description": "DBGMCU device ID code register"
            },
            "DBGMCU_CR": {
              "offset": "0x04",
              "size": 32,
              "description": "DBGMCU configuration register"
            },
            "DBGMCU_APB1FZR": {
              "offset": "0x08",
              "size": 32,
              "description": "DBGMCU APB1 freeze register"
            },
            "DBGMCU_APB2FZR": {
              "offset": "0x0C",
              "size": 32,
              "description": "DBG APB2 freeze register"
            },
            "DBGMCU_SR": {
              "offset": "0xFC",
              "size": 32,
              "description": "DBGMCU status register"
            },
            "DBGMCU_DBG_AUTH_HOST": {
              "offset": "0x100",
              "size": 32,
              "description": "DBGMCU debug authentication mailbox host register"
            },
            "DBGMCU_DBG_AUTH_DEVICE": {
              "offset": "0x104",
              "size": 32,
              "description": "DBGMCU debug authentication mailbox device register"
            },
            "DBGMCU_PIDR4": {
              "offset": "0xFD0",
              "size": 32,
              "description": "DBGMCU CoreSight peripheral identity register 4"
            },
            "DBGMCU_PIDR0": {
              "offset": "0xFE0",
              "size": 32,
              "description": "DBGMCU CoreSight peripheral identity register 0"
            },
            "DBGMCU_PIDR1": {
              "offset": "0xFE4",
              "size": 32,
              "description": "DBGMCU CoreSight peripheral identity register 1"
            },
            "DBGMCU_PIDR2": {
              "offset": "0xFE8",
              "size": 32,
              "description": "DBGMCU CoreSight peripheral identity register 2"
            },
            "DBGMCU_PIDR3": {
              "offset": "0xFEC",
              "size": 32,
              "description": "DBGMCU CoreSight peripheral identity register 3"
            },
            "DBGMCU_CIDR0": {
              "offset": "0xFF0",
              "size": 32,
              "description": "DBGMCU CoreSight component identity register 0"
            },
            "DBGMCU_CIDR1": {
              "offset": "0xFF4",
              "size": 32,
              "description": "DBGMCU CoreSight component identity register 1"
            },
            "DBGMCU_CIDR2": {
              "offset": "0xFF8",
              "size": 32,
              "description": "DBGMCU CoreSight component identity register 2"
            },
            "DBGMCU_CIDR3": {
              "offset": "0xFFC",
              "size": 32,
              "description": "DBGMCU CoreSight component identity register 3"
            }
          },
          "bits": {
            "DBGMCU_IDCODE": {
              "DEV_ID": {
                "bit": 0,
                "description": "Device identifier\nThis field indicates the device ID.",
                "width": 12
              },
              "REV_ID": {
                "bit": 16,
                "description": "Revision identifier\nThis field indicates the revision of the device.",
                "width": 16
              }
            },
            "DBGMCU_CR": {
              "DBG_STOP": {
                "bit": 1,
                "description": "Debug Stop mode\nDebug options in Stop mode."
              },
              "DBG_STANDBY": {
                "bit": 2,
                "description": "Debug Standby and Shutdown modes\nDebug options in Standby or Shutdown mode."
              }
            },
            "DBGMCU_APB1FZR": {
              "DBG_TIM2_STOP": {
                "bit": 0,
                "description": "TIM2 stop in debug"
              },
              "DBG_TIM3_STOP": {
                "bit": 1,
                "description": "TIM3 stop in debug"
              },
              "DBG_TIM4_STOP": {
                "bit": 2,
                "description": "TIM4 stop in debug"
              },
              "DBG_TIM6_STOP": {
                "bit": 4,
                "description": "TIM6 stop in debug"
              },
              "DBG_TIM7_STOP": {
                "bit": 5,
                "description": "TIM7 stop in debug"
              },
              "DBG_RTC_STOP": {
                "bit": 10,
                "description": "RTC stop in debug"
              },
              "DBG_WWDG_STOP": {
                "bit": 11,
                "description": "WWDG stop in debug"
              },
              "DBG_IWDG_STOP": {
                "bit": 12,
                "description": "IWDG stop in debug"
              },
              "DBG_I2C3_STOP": {
                "bit": 21,
                "description": "I2C3 SMBUS timeout stop in debug"
              },
              "DBG_I2C1_STOP": {
                "bit": 22,
                "description": "I2C1 SMBUS timeout stop in debug"
              },
              "DBG_LPTIM2_STOP": {
                "bit": 30,
                "description": "LPTIM2 stop in debug"
              },
              "DBG_LPTIM1_STOP": {
                "bit": 31,
                "description": "LPTIM1 stop in debug"
              }
            },
            "DBGMCU_APB2FZR": {
              "DBG_TIM1_STOP": {
                "bit": 11,
                "description": "TIM1 stop in debug"
              },
              "DBG_TIM14_STOP": {
                "bit": 15,
                "description": "TIM14 stop in debug"
              },
              "DBG_TIM15_STOP": {
                "bit": 16,
                "description": "TIM15 stop in debug"
              },
              "DBG_TIM16_STOP": {
                "bit": 17,
                "description": "TIM16 stop in debug"
              },
              "DBG_LPTIM3_STOP": {
                "bit": 18,
                "description": "LPTIM3 stop in debug"
              }
            },
            "DBGMCU_SR": {
              "AP1_PRESENT": {
                "bit": 0,
                "description": "Identifies whether access port AP1 is present in device"
              },
              "AP0_PRESENT": {
                "bit": 1,
                "description": "Identifies whether access port AP0 is present in device"
              },
              "AP1_ENABLED": {
                "bit": 16,
                "description": "Identifies whether access port AP0 is open (can be accessed via the debug port) or locked (debug access to the AP is blocked)"
              },
              "AP0_ENABLED": {
                "bit": 17,
                "description": "Identifies whether access port AP0 is open (can be accessed via the debug port) or locked (debug access to the AP is blocked)"
              }
            },
            "DBGMCU_DBG_AUTH_HOST": {
              "MESSAGE": {
                "bit": 0,
                "description": "Debug host to device mailbox message.\nDuring debug authentication the debug host communicates with the device via this register.",
                "width": 32
              }
            },
            "DBGMCU_DBG_AUTH_DEVICE": {
              "MESSAGE": {
                "bit": 0,
                "description": "Device to debug host mailbox message.\nDuring debug authentication the device communicates with the debug host via this register.",
                "width": 32
              }
            },
            "DBGMCU_PIDR4": {
              "JEP106CON": {
                "bit": 0,
                "description": "JEP106 continuation code",
                "width": 4
              },
              "SIZE": {
                "bit": 4,
                "description": "register file size",
                "width": 4
              }
            },
            "DBGMCU_PIDR0": {
              "PARTNUM": {
                "bit": 0,
                "description": "part number bits [7:0]",
                "width": 8
              }
            },
            "DBGMCU_PIDR1": {
              "PARTNUM": {
                "bit": 0,
                "description": "part number bits [11:8]",
                "width": 4
              },
              "JEP106ID": {
                "bit": 4,
                "description": "JEP106 identity code bits [3:0]",
                "width": 4
              }
            },
            "DBGMCU_PIDR2": {
              "JEP106ID": {
                "bit": 0,
                "description": "JEP106 identity code bits [6:4]",
                "width": 3
              },
              "JEDEC": {
                "bit": 3,
                "description": "JEDEC assigned value"
              },
              "REVISION": {
                "bit": 4,
                "description": "component revision number",
                "width": 4
              }
            },
            "DBGMCU_PIDR3": {
              "CMOD": {
                "bit": 0,
                "description": "customer modified",
                "width": 4
              },
              "REVAND": {
                "bit": 4,
                "description": "metal fix version",
                "width": 4
              }
            },
            "DBGMCU_CIDR0": {
              "PREAMBLE": {
                "bit": 0,
                "description": "component identification bits [7:0]",
                "width": 8
              }
            },
            "DBGMCU_CIDR1": {
              "PREAMBLE": {
                "bit": 0,
                "description": "component identification bits [11:8]",
                "width": 4
              },
              "CLASS": {
                "bit": 4,
                "description": "component identification bits [15:12] - component class",
                "width": 4
              }
            },
            "DBGMCU_CIDR2": {
              "PREAMBLE": {
                "bit": 0,
                "description": "component identification bits [23:16]",
                "width": 8
              }
            },
            "DBGMCU_CIDR3": {
              "PREAMBLE": {
                "bit": 0,
                "description": "component identification bits [31:24]",
                "width": 8
              }
            }
          }
        },
        "DMA": {
          "instances": [
            {
              "name": "DMAMUX",
              "base": "0x40020800"
            },
            {
              "name": "DMA1",
              "base": "0x40020000",
              "irq": 9
            },
            {
              "name": "DMA2",
              "base": "0x40020400"
            }
          ],
          "registers": {
            "DMAMUX_C0CR": {
              "offset": "0x00",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 0 configuration register"
            },
            "DMAMUX_C1CR": {
              "offset": "0x04",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 1 configuration register"
            },
            "DMAMUX_C2CR": {
              "offset": "0x08",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 2 configuration register"
            },
            "DMAMUX_C3CR": {
              "offset": "0x0C",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 3 configuration register"
            },
            "DMAMUX_C4CR": {
              "offset": "0x10",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 4 configuration register"
            },
            "DMAMUX_C5CR": {
              "offset": "0x14",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 5 configuration register"
            },
            "DMAMUX_C6CR": {
              "offset": "0x18",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 6 configuration register"
            },
            "DMAMUX_C7CR": {
              "offset": "0x1C",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 7 configuration register"
            },
            "DMAMUX_C8CR": {
              "offset": "0x20",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 8 configuration register"
            },
            "DMAMUX_C9CR": {
              "offset": "0x24",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 9 configuration register"
            },
            "DMAMUX_C10CR": {
              "offset": "0x28",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 10 configuration register"
            },
            "DMAMUX_C11CR": {
              "offset": "0x2C",
              "size": 32,
              "description": "DMAMUX request line multiplexer channel 11 configuration register"
            },
            "DMAMUX_CSR": {
              "offset": "0x80",
              "size": 32,
              "description": "DMAMUX request line multiplexer interrupt channel status register"
            },
            "DMAMUX_CFR": {
              "offset": "0x84",
              "size": 32,
              "description": "DMAMUX request line multiplexer interrupt clear flag register"
            },
            "DMAMUX_RG0CR": {
              "offset": "0x100",
              "size": 32,
              "description": "DMAMUX request generator channel 0 configuration register"
            },
            "DMAMUX_RG1CR": {
              "offset": "0x104",
              "size": 32,
              "description": "DMAMUX request generator channel 1 configuration register"
            },
            "DMAMUX_RG2CR": {
              "offset": "0x108",
              "size": 32,
              "description": "DMAMUX request generator channel 2 configuration register"
            },
            "DMAMUX_RG3CR": {
              "offset": "0x10C",
              "size": 32,
              "description": "DMAMUX request generator channel 3 configuration register"
            },
            "DMAMUX_RGSR": {
              "offset": "0x140",
              "size": 32,
              "description": "DMAMUX request generator interrupt status register"
            },
            "DMAMUX_RGCFR": {
              "offset": "0x144",
              "size": 32,
              "description": "DMAMUX request generator interrupt clear flag register"
            }
          },
          "bits": {
            "DMAMUX_C0CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_C1CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_C2CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_C3CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_C4CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_C5CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_C6CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_C7CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_C8CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_C9CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_C10CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_C11CR": {
              "DMAREQ_ID": {
                "bit": 0,
                "description": "DMA request identification\nSelects the input DMA request. See the DMAMUX table about assignments of multiplexer inputs to resources.",
                "width": 7
              },
              "SOIE": {
                "bit": 8,
                "description": "Synchronization overrun interrupt enable"
              },
              "EGE": {
                "bit": 9,
                "description": "Event generation enable"
              },
              "SE": {
                "bit": 16,
                "description": "Synchronization enable"
              },
              "SPOL": {
                "bit": 17,
                "description": "Synchronization polarity\nDefines the edge polarity of the selected synchronization input:",
                "width": 2
              },
              "NBREQ": {
                "bit": 19,
                "description": "Number of DMA requests minus 1 to forward \nDefines the number of DMA requests to forward to the DMA controller after a synchronization event, and/or the number of DMA requests before an output event is generated.\nThis field must only be written when both SE and EGE bits are low.",
                "width": 5
              },
              "SYNC_ID": {
                "bit": 24,
                "description": "Synchronization identification\nSelects the synchronization input (see Table137: DMAMUX: assignment of synchronization inputs to resources).",
                "width": 5
              }
            },
            "DMAMUX_CSR": {
              "SOF0": {
                "bit": 0,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              },
              "SOF1": {
                "bit": 1,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              },
              "SOF2": {
                "bit": 2,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              },
              "SOF3": {
                "bit": 3,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              },
              "SOF4": {
                "bit": 4,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              },
              "SOF5": {
                "bit": 5,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              },
              "SOF6": {
                "bit": 6,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              },
              "SOF7": {
                "bit": 7,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              },
              "SOF8": {
                "bit": 8,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              },
              "SOF9": {
                "bit": 9,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              },
              "SOF10": {
                "bit": 10,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              },
              "SOF11": {
                "bit": 11,
                "description": "Synchronization overrun event flag\nThe flag is set when a synchronization event occurs on a DMA request line multiplexer channel x, while the DMA request counter value is lower than NBREQ.\nThe flag is cleared by writing 1 to the corresponding CSOFx bit in DMAMUX_CFR register."
              }
            },
            "DMAMUX_CFR": {
              "CSOF0": {
                "bit": 0,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              },
              "CSOF1": {
                "bit": 1,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              },
              "CSOF2": {
                "bit": 2,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              },
              "CSOF3": {
                "bit": 3,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              },
              "CSOF4": {
                "bit": 4,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              },
              "CSOF5": {
                "bit": 5,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              },
              "CSOF6": {
                "bit": 6,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              },
              "CSOF7": {
                "bit": 7,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              },
              "CSOF8": {
                "bit": 8,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              },
              "CSOF9": {
                "bit": 9,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              },
              "CSOF10": {
                "bit": 10,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              },
              "CSOF11": {
                "bit": 11,
                "description": "Clear synchronization overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag SOFx in the DMAMUX_CSR register."
              }
            },
            "DMAMUX_RG0CR": {
              "SIG_ID": {
                "bit": 0,
                "description": "Signal identification\nSelects the DMA request trigger input used for the channel x of the DMA request generator",
                "width": 5
              },
              "OIE": {
                "bit": 8,
                "description": "Trigger overrun interrupt enable"
              },
              "GE": {
                "bit": 16,
                "description": "DMA request generator channel x enable"
              },
              "GPOL": {
                "bit": 17,
                "description": "DMA request generator trigger polarity\nDefines the edge polarity of the selected trigger input",
                "width": 2
              },
              "GNBREQ": {
                "bit": 19,
                "description": "Number of DMA requests to be generated (minus 1)\nDefines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1.\nNote: This field must be written only when GE bit is disabled.",
                "width": 5
              }
            },
            "DMAMUX_RG1CR": {
              "SIG_ID": {
                "bit": 0,
                "description": "Signal identification\nSelects the DMA request trigger input used for the channel x of the DMA request generator",
                "width": 5
              },
              "OIE": {
                "bit": 8,
                "description": "Trigger overrun interrupt enable"
              },
              "GE": {
                "bit": 16,
                "description": "DMA request generator channel x enable"
              },
              "GPOL": {
                "bit": 17,
                "description": "DMA request generator trigger polarity\nDefines the edge polarity of the selected trigger input",
                "width": 2
              },
              "GNBREQ": {
                "bit": 19,
                "description": "Number of DMA requests to be generated (minus 1)\nDefines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1.\nNote: This field must be written only when GE bit is disabled.",
                "width": 5
              }
            },
            "DMAMUX_RG2CR": {
              "SIG_ID": {
                "bit": 0,
                "description": "Signal identification\nSelects the DMA request trigger input used for the channel x of the DMA request generator",
                "width": 5
              },
              "OIE": {
                "bit": 8,
                "description": "Trigger overrun interrupt enable"
              },
              "GE": {
                "bit": 16,
                "description": "DMA request generator channel x enable"
              },
              "GPOL": {
                "bit": 17,
                "description": "DMA request generator trigger polarity\nDefines the edge polarity of the selected trigger input",
                "width": 2
              },
              "GNBREQ": {
                "bit": 19,
                "description": "Number of DMA requests to be generated (minus 1)\nDefines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1.\nNote: This field must be written only when GE bit is disabled.",
                "width": 5
              }
            },
            "DMAMUX_RG3CR": {
              "SIG_ID": {
                "bit": 0,
                "description": "Signal identification\nSelects the DMA request trigger input used for the channel x of the DMA request generator",
                "width": 5
              },
              "OIE": {
                "bit": 8,
                "description": "Trigger overrun interrupt enable"
              },
              "GE": {
                "bit": 16,
                "description": "DMA request generator channel x enable"
              },
              "GPOL": {
                "bit": 17,
                "description": "DMA request generator trigger polarity\nDefines the edge polarity of the selected trigger input",
                "width": 2
              },
              "GNBREQ": {
                "bit": 19,
                "description": "Number of DMA requests to be generated (minus 1)\nDefines the number of DMA requests to be generated after a trigger event. The actual number of generated DMA requests is GNBREQ +1.\nNote: This field must be written only when GE bit is disabled.",
                "width": 5
              }
            },
            "DMAMUX_RGSR": {
              "OF0": {
                "bit": 0,
                "description": "Trigger overrun event flag\nThe flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register).\nThe flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register."
              },
              "OF1": {
                "bit": 1,
                "description": "Trigger overrun event flag\nThe flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register).\nThe flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register."
              },
              "OF2": {
                "bit": 2,
                "description": "Trigger overrun event flag\nThe flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register).\nThe flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register."
              },
              "OF3": {
                "bit": 3,
                "description": "Trigger overrun event flag\nThe flag is set when a new trigger event occurs on DMA request generator channel x, before the request counter underrun (the internal request counter programmed via the GNBREQ field of the DMAMUX_RGxCR register).\nThe flag is cleared by writing 1 to the corresponding COFx bit in the DMAMUX_RGCFR register."
              }
            },
            "DMAMUX_RGCFR": {
              "COF0": {
                "bit": 0,
                "description": "Clear trigger overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register."
              },
              "COF1": {
                "bit": 1,
                "description": "Clear trigger overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register."
              },
              "COF2": {
                "bit": 2,
                "description": "Clear trigger overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register."
              },
              "COF3": {
                "bit": 3,
                "description": "Clear trigger overrun event flag\nWriting 1 in each bit clears the corresponding overrun flag OFx in the DMAMUX_RGSR register."
              }
            }
          }
        },
        "EXTI": {
          "instances": [
            {
              "name": "EXTI",
              "base": "0x40021800",
              "irq": 1
            }
          ],
          "registers": {
            "EXTI_RTSR1": {
              "offset": "0x00",
              "size": 32,
              "description": "EXTI rising trigger selection register"
            },
            "EXTI_FTSR1": {
              "offset": "0x04",
              "size": 32,
              "description": "EXTI falling trigger selection register 1"
            },
            "EXTI_SWIER1": {
              "offset": "0x08",
              "size": 32,
              "description": "EXTI software interrupt event register 1"
            },
            "EXTI_RPR1": {
              "offset": "0x0C",
              "size": 32,
              "description": "EXTI rising edge pending register 1"
            },
            "EXTI_FPR1": {
              "offset": "0x10",
              "size": 32,
              "description": "EXTI falling edge pending register 1"
            },
            "EXTI_EXTICR1": {
              "offset": "0x60",
              "size": 32,
              "description": "EXTI external interrupt selection register 1"
            },
            "EXTI_EXTICR2": {
              "offset": "0x64",
              "size": 32,
              "description": "EXTI external interrupt selection register 2"
            },
            "EXTI_EXTICR3": {
              "offset": "0x68",
              "size": 32,
              "description": "EXTI external interrupt selection register 3"
            },
            "EXTI_EXTICR4": {
              "offset": "0x6C",
              "size": 32,
              "description": "EXTI external interrupt selection register 4"
            },
            "EXTI_IMR1": {
              "offset": "0x80",
              "size": 32,
              "description": "EXTI CPU wake-up with interrupt mask register"
            },
            "EXTI_EMR1": {
              "offset": "0x84",
              "size": 32,
              "description": "EXTI CPU wake-up with event mask register"
            },
            "EXTI_IMR2": {
              "offset": "0x90",
              "size": 32,
              "description": "EXTI CPU wake-up with interrupt mask register"
            },
            "EXTI_EMR2": {
              "offset": "0x94",
              "size": 32,
              "description": "EXTI CPU wake-up with event mask register"
            }
          },
          "bits": {
            "EXTI_RTSR1": {
              "RT0": {
                "bit": 0,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT1": {
                "bit": 1,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT2": {
                "bit": 2,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT3": {
                "bit": 3,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT4": {
                "bit": 4,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT5": {
                "bit": 5,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT6": {
                "bit": 6,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT7": {
                "bit": 7,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT8": {
                "bit": 8,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT9": {
                "bit": 9,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT10": {
                "bit": 10,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT11": {
                "bit": 11,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT12": {
                "bit": 12,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT13": {
                "bit": 13,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT14": {
                "bit": 14,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT15": {
                "bit": 15,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT16": {
                "bit": 16,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT17": {
                "bit": 17,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT18": {
                "bit": 18,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT19": {
                "bit": 19,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT20": {
                "bit": 20,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RT21": {
                "bit": 21,
                "description": "Rising trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the rising edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              }
            },
            "EXTI_FTSR1": {
              "FT0": {
                "bit": 0,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT1": {
                "bit": 1,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT2": {
                "bit": 2,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT3": {
                "bit": 3,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT4": {
                "bit": 4,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT5": {
                "bit": 5,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT6": {
                "bit": 6,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT7": {
                "bit": 7,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT8": {
                "bit": 8,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT9": {
                "bit": 9,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT10": {
                "bit": 10,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT11": {
                "bit": 11,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT12": {
                "bit": 12,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT13": {
                "bit": 13,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT14": {
                "bit": 14,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT15": {
                "bit": 15,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT16": {
                "bit": 16,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT17": {
                "bit": 17,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT18": {
                "bit": 18,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT19": {
                "bit": 19,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT20": {
                "bit": 20,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FT21": {
                "bit": 21,
                "description": "Falling trigger event configuration bit of configurable line x (x1=1211to10)\nEach bit enables/disables the falling edge trigger for the event and interrupt on the corresponding line.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              }
            },
            "EXTI_SWIER1": {
              "SWI0": {
                "bit": 0,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI1": {
                "bit": 1,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI2": {
                "bit": 2,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI3": {
                "bit": 3,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI4": {
                "bit": 4,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI5": {
                "bit": 5,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI6": {
                "bit": 6,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI7": {
                "bit": 7,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI8": {
                "bit": 8,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI9": {
                "bit": 9,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI10": {
                "bit": 10,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI11": {
                "bit": 11,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI12": {
                "bit": 12,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI13": {
                "bit": 13,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI14": {
                "bit": 14,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI15": {
                "bit": 15,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI16": {
                "bit": 16,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI17": {
                "bit": 17,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI18": {
                "bit": 18,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI19": {
                "bit": 19,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI20": {
                "bit": 20,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "SWI21": {
                "bit": 21,
                "description": "Software rising edge event trigger on line x (x1=1211to10)\nSetting of any bit by software triggers a rising edge event on the corresponding line x, resulting in an interrupt, independently of EXTI_RTSR1 and EXTI_FTSR1 settings. The bits are automatically cleared by HW. Reading of any bit always returns 0.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              }
            },
            "EXTI_RPR1": {
              "RPIF0": {
                "bit": 0,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF1": {
                "bit": 1,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF2": {
                "bit": 2,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF3": {
                "bit": 3,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF4": {
                "bit": 4,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF5": {
                "bit": 5,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF6": {
                "bit": 6,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF7": {
                "bit": 7,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF8": {
                "bit": 8,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF9": {
                "bit": 9,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF10": {
                "bit": 10,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF11": {
                "bit": 11,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF12": {
                "bit": 12,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF13": {
                "bit": 13,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF14": {
                "bit": 14,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF15": {
                "bit": 15,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF16": {
                "bit": 16,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF17": {
                "bit": 17,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF18": {
                "bit": 18,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF19": {
                "bit": 19,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF20": {
                "bit": 20,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "RPIF21": {
                "bit": 21,
                "description": "Rising edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a rising edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              }
            },
            "EXTI_FPR1": {
              "FPIF0": {
                "bit": 0,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF1": {
                "bit": 1,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF2": {
                "bit": 2,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF3": {
                "bit": 3,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF4": {
                "bit": 4,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF5": {
                "bit": 5,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF6": {
                "bit": 6,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF7": {
                "bit": 7,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF8": {
                "bit": 8,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF9": {
                "bit": 9,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF10": {
                "bit": 10,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF11": {
                "bit": 11,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF12": {
                "bit": 12,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF13": {
                "bit": 13,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF14": {
                "bit": 14,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF15": {
                "bit": 15,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF16": {
                "bit": 16,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF17": {
                "bit": 17,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF18": {
                "bit": 18,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF19": {
                "bit": 19,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF20": {
                "bit": 20,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              },
              "FPIF21": {
                "bit": 21,
                "description": "Falling edge event pending for configurable line x (x1=1211to10)\nEach bit is set upon a falling edge event generated by hardware or by software (through the EXTI_SWIER1 register) on the corresponding line. Each bit is cleared by writing 1 into it.\nBits 18 and 19 are available only on STM32U0x3xx devices. They are reserved on STM32U031xx devices."
              }
            },
            "EXTI_EXTICR1": {
              "EXTI0": {
                "bit": 0,
                "description": "EXTI0 GPIO port selection\nThese bits are written by software to select the source input for EXTI0 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI1": {
                "bit": 8,
                "description": "EXTI1 GPIO port selection\nThese bits are written by software to select the source input for EXTI1 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI2": {
                "bit": 16,
                "description": "EXTI2 GPIO port selection\nThese bits are written by software to select the source input for EXTI2 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI3": {
                "bit": 24,
                "description": "EXTI3 GPIO port selection\nThese bits are written by software to select the source input for EXTI3 external interrupt.\nOthers reserved",
                "width": 8
              }
            },
            "EXTI_EXTICR2": {
              "EXTI4": {
                "bit": 0,
                "description": "EXTI4 GPIO port selection\nThese bits are written by software to select the source input for EXTI4 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI5": {
                "bit": 8,
                "description": "EXTI5 GPIO port selection\nThese bits are written by software to select the source input for EXTI5 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI6": {
                "bit": 16,
                "description": "EXTI6 GPIO port selection\nThese bits are written by software to select the source input for EXTI6 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI7": {
                "bit": 24,
                "description": "EXTI7 GPIO port selection\nThese bits are written by software to select the source input for EXTI7 external interrupt.\nOthers reserved",
                "width": 8
              }
            },
            "EXTI_EXTICR3": {
              "EXTI8": {
                "bit": 0,
                "description": "EXTI8 GPIO port selection\nThese bits are written by software to select the source input for EXTI8 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI9": {
                "bit": 8,
                "description": "EXTI9 GPIO port selection\nThese bits are written by software to select the source input for EXTI9 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI10": {
                "bit": 16,
                "description": "EXTI10 GPIO port selection\nThese bits are written by software to select the source input for EXTI10 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI11": {
                "bit": 24,
                "description": "EXTI11 GPIO port selection\nThese bits are written by software to select the source input for EXTI11 external interrupt.\nOthers reserved",
                "width": 8
              }
            },
            "EXTI_EXTICR4": {
              "EXTI12": {
                "bit": 0,
                "description": "EXTI12 GPIO port selection\nThese bits are written by software to select the source input for EXTI12 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI13": {
                "bit": 8,
                "description": "EXTI13 GPIO port selection\nThese bits are written by software to select the source input for EXTI13 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI14": {
                "bit": 16,
                "description": "EXTI14 GPIO port selection\nThese bits are written by software to select the source input for EXTI14 external interrupt.\nOthers reserved",
                "width": 8
              },
              "EXTI15": {
                "bit": 24,
                "description": "EXTI15 GPIO port selection\nThese bits are written by software to select the source input for EXTI15 external interrupt.\nOthers reserved",
                "width": 8
              }
            },
            "EXTI_IMR1": {
              "IM0": {
                "bit": 0,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM1": {
                "bit": 1,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM2": {
                "bit": 2,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM3": {
                "bit": 3,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM4": {
                "bit": 4,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM5": {
                "bit": 5,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM6": {
                "bit": 6,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM7": {
                "bit": 7,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM8": {
                "bit": 8,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM9": {
                "bit": 9,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM10": {
                "bit": 10,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM11": {
                "bit": 11,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM12": {
                "bit": 12,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM13": {
                "bit": 13,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM14": {
                "bit": 14,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM15": {
                "bit": 15,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM16": {
                "bit": 16,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM17": {
                "bit": 17,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM18": {
                "bit": 18,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM19": {
                "bit": 19,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM20": {
                "bit": 20,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM21": {
                "bit": 21,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM22": {
                "bit": 22,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM23": {
                "bit": 23,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM24": {
                "bit": 24,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM25": {
                "bit": 25,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM26": {
                "bit": 26,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM27": {
                "bit": 27,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM28": {
                "bit": 28,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM29": {
                "bit": 29,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM30": {
                "bit": 30,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "IM31": {
                "bit": 31,
                "description": "CPU wake-up with interrupt mask on line x (x1=131 to 0)\nSetting/clearing each bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              }
            },
            "EXTI_EMR1": {
              "EM0": {
                "bit": 0,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM1": {
                "bit": 1,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM2": {
                "bit": 2,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM3": {
                "bit": 3,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM4": {
                "bit": 4,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM5": {
                "bit": 5,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM6": {
                "bit": 6,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM7": {
                "bit": 7,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM8": {
                "bit": 8,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM9": {
                "bit": 9,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM10": {
                "bit": 10,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM11": {
                "bit": 11,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM12": {
                "bit": 12,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM13": {
                "bit": 13,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM14": {
                "bit": 14,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM15": {
                "bit": 15,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM16": {
                "bit": 16,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM17": {
                "bit": 17,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM18": {
                "bit": 18,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM19": {
                "bit": 19,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM20": {
                "bit": 20,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM21": {
                "bit": 21,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM22": {
                "bit": 22,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM23": {
                "bit": 23,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM24": {
                "bit": 24,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM25": {
                "bit": 25,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM26": {
                "bit": 26,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM27": {
                "bit": 27,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM28": {
                "bit": 28,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM29": {
                "bit": 29,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM30": {
                "bit": 30,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              },
              "EM31": {
                "bit": 31,
                "description": "CPU wake-up with event generation mask on line x (x1=1311to10)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBits 18, 19, 22 and 26 are available only on STM32U0x3xx devices, they are reserved on STM32U031xx devices."
              }
            },
            "EXTI_IMR2": {
              "IM32": {
                "bit": 0,
                "description": "CPU wake-up with interrupt mask on line x (x1=1371to132)\nSetting/clearing this bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              },
              "IM33": {
                "bit": 1,
                "description": "CPU wake-up with interrupt mask on line x (x1=1371to132)\nSetting/clearing this bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              },
              "IM34": {
                "bit": 2,
                "description": "CPU wake-up with interrupt mask on line x (x1=1371to132)\nSetting/clearing this bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              },
              "IM35": {
                "bit": 3,
                "description": "CPU wake-up with interrupt mask on line x (x1=1371to132)\nSetting/clearing this bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              },
              "IM36": {
                "bit": 4,
                "description": "CPU wake-up with interrupt mask on line x (x1=1371to132)\nSetting/clearing this bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              },
              "IM37": {
                "bit": 5,
                "description": "CPU wake-up with interrupt mask on line x (x1=1371to132)\nSetting/clearing this bit unmasks/masks the CPU wake-up with interrupt, by an event on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              }
            },
            "EXTI_EMR2": {
              "EM32": {
                "bit": 0,
                "description": "CPU wake-up with event generation mask on line x, (x1=1371to132)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              },
              "EM33": {
                "bit": 1,
                "description": "CPU wake-up with event generation mask on line x, (x1=1371to132)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              },
              "EM34": {
                "bit": 2,
                "description": "CPU wake-up with event generation mask on line x, (x1=1371to132)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              },
              "EM35": {
                "bit": 3,
                "description": "CPU wake-up with event generation mask on line x, (x1=1371to132)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              },
              "EM36": {
                "bit": 4,
                "description": "CPU wake-up with event generation mask on line x, (x1=1371to132)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              },
              "EM37": {
                "bit": 5,
                "description": "CPU wake-up with event generation mask on line x, (x1=1371to132)\nSetting/clearing each bit unmasks/masks the CPU wake-up with event generation on the corresponding line.\nBit IM36 is available only on STM32U0x3xx devices, it is reserved on STM32U031xx devices."
              }
            }
          }
        },
        "FLASH": {
          "instances": [
            {
              "name": "FLASH",
              "base": "0x40022000",
              "irq": 3
            }
          ],
          "registers": {
            "FLASH_ACR": {
              "offset": "0x00",
              "size": 32,
              "description": "FLASH access control register"
            },
            "FLASH_KEYR": {
              "offset": "0x08",
              "size": 32,
              "description": "FLASH key register"
            },
            "FLASH_OPTKEYR": {
              "offset": "0x0C",
              "size": 32,
              "description": "FLASH option key register"
            },
            "FLASH_SR": {
              "offset": "0x10",
              "size": 32,
              "description": "FLASH status register"
            },
            "FLASH_CR": {
              "offset": "0x14",
              "size": 32,
              "description": "FLASH control register"
            },
            "FLASH_ECCR": {
              "offset": "0x18",
              "size": 32,
              "description": "FLASH ECC register"
            },
            "FLASH_OPTR": {
              "offset": "0x20",
              "size": 32,
              "description": "FLASH option register"
            },
            "FLASH_WRP1AR": {
              "offset": "0x2C",
              "size": 32,
              "description": "FLASH WRP area A address register"
            },
            "FLASH_WRP1BR": {
              "offset": "0x30",
              "size": 32,
              "description": "FLASH WRP area B address register"
            },
            "FLASH_SECR": {
              "offset": "0x80",
              "size": 32,
              "description": "FLASH security register"
            }
          },
          "bits": {
            "FLASH_ACR": {
              "LATENCY": {
                "bit": 0,
                "description": "Flash memory access latency\nThe value in this bitfield represents the number of CPU wait states when accessing the flash memory.\nOther: Reserved\nA new write into the bitfield becomes effective when it returns the same value upon read.",
                "width": 3
              },
              "PRFTEN": {
                "bit": 8,
                "description": "CPU Prefetch enable"
              },
              "ICEN": {
                "bit": 9,
                "description": "CPU Instruction cache enable"
              },
              "ICRST": {
                "bit": 11,
                "description": "CPU Instruction cache reset\nThis bit can be written only when the instruction cache is disabled."
              },
              "EMPTY": {
                "bit": 16,
                "description": "Main flash memory area empty\nThis bit indicates whether the first location of the main flash memory area is erased or has a programmed value.\nThe bit can be set and reset by software."
              },
              "DBG_SWEN": {
                "bit": 18,
                "description": "Debug access software enable\nSoftware may use this bit to enable/disable the debugger read access."
              }
            },
            "FLASH_KEYR": {
              "KEY": {
                "bit": 0,
                "description": "FLASH key\nThe following values must be written consecutively to unlock the FLASH control register (FLASH_CR), thus enabling programming/erasing operations:\nKEY1: 0x4567 0123\nKEY2: 0xCDEF 89AB",
                "width": 32
              }
            },
            "FLASH_OPTKEYR": {
              "OPTKEY": {
                "bit": 0,
                "description": "Option byte key\nThe following values must be written consecutively to unlock the flash memory option registers, enabling option byte programming/erasing operations:\nKEY1: 0x0819 2A3B\nKEY2: 0x4C5D 6E7F",
                "width": 32
              }
            },
            "FLASH_SR": {
              "EOP": {
                "bit": 0,
                "description": "End of operation\nSet by hardware when one or more flash memory operation (programming / erase) has been completed successfully. \nThis bit is set only if the end of operation interrupts are enabled (EOPIE=1).\nCleared by writing 1."
              },
              "OPERR": {
                "bit": 1,
                "description": "Operation error\nSet by hardware when a flash memory operation (program / erase) completes unsuccessfully.\nThis bit is set only if error interrupts are enabled (ERRIE=1).\nCleared by writing 1."
              },
              "PROGERR": {
                "bit": 3,
                "description": "Programming error\nSet by hardware when a double-word address to be programmed contains a value different from '0xFFFF FFFF' before programming, except if the data to write is '0x0000 0000'.\nCleared by writing 1."
              },
              "WRPERR": {
                "bit": 4,
                "description": "Write protection error\nSet by hardware when an address to be erased/programmed belongs to a write-protected part (by WRP, PCROP or RDP Level 1) of the flash memory.\nCleared by writing 1."
              },
              "PGAERR": {
                "bit": 5,
                "description": "Programming alignment error\nSet by hardware when the data to program cannot be contained in the same double word (64-bit) flash memory in case of standard programming, or if there is a change of page during fast programming.\nCleared by writing 1."
              },
              "SIZERR": {
                "bit": 6,
                "description": "Size error\nSet by hardware when the size of the access is a byte or half-word during a program or a fast program sequence. Only double word programming is allowed (consequently: word access).\nCleared by writing 1."
              },
              "PGSERR": {
                "bit": 7,
                "description": "Programming sequence error\nSet by hardware when a write access to the flash memory is performed by the code while PG or FSTPG have not been set previously. Set also by hardware when PROGERR, SIZERR, PGAERR, WRPERR, MISSERR or FASTERR is set due to a previous programming error.\nCleared by writing 1."
              },
              "MISSERR": {
                "bit": 8,
                "description": "Fast programming data miss error\nIn Fast programming mode, 16 double words (128 bytes) must be sent to flash memory successively, and the new data must be sent to the logic control before the current data is fully programmed. MISSERR is set by hardware when the new data is not present in time.\nCleared by writing 1."
              },
              "FASTERR": {
                "bit": 9,
                "description": "Fast programming error\nSet by hardware when a fast programming sequence (activated by FSTPG) is interrupted due to an error (alignment, size, write protection or data miss). The corresponding status bit (PGAERR, SIZERR, WRPERR or MISSERR) is set at the same time.\nCleared by writing 1."
              },
              "RDERR": {
                "bit": 14,
                "description": "PCROP read error \nSet by hardware when an address to be read belongs to a read protected area of the flash memory (PCROP protection). An interrupt is generated if RDERRIE is set in FLASH_CR.\nCleared by writing 1."
              },
              "OPTVERR": {
                "bit": 15,
                "description": "Option and Engineering bits loading validity error"
              },
              "BSY1": {
                "bit": 16,
                "description": "Busy\nThis flag indicates that a flash memory operation requested by FLASH control register (FLASH_CR) is in progress. This bit is set at the beginning of the flash memory operation, and cleared when the operation finishes or when an error occurs."
              },
              "CFGBSY": {
                "bit": 18,
                "description": "Programming or erase configuration busy.\nThis flag is set and cleared by hardware. It is set when the first word is sent for program or when setting the STRT bit of FLASH control register (FLASH_CR) for erase. It is cleared when the flash memory program or erase operation completes or ends with an error.\nWhen set, launching any other operation through the FLASH control register (FLASH_CR) is impossible, and must be postponed (a programming or erase operation is ongoing).\nWhen cleared, the program and erase settings in the FLASH control register (FLASH_CR) can be modified."
              }
            },
            "FLASH_CR": {
              "PG": {
                "bit": 0,
                "description": "Flash memory programming enable"
              },
              "PER": {
                "bit": 1,
                "description": "Page erase enable"
              },
              "MER1": {
                "bit": 2,
                "description": "Mass erase\nWhen set, this bit triggers the mass erase, that is, all user pages."
              },
              "PNB": {
                "bit": 3,
                "description": "Page number selection\nThese bits select the page to erase:\n...\nNote: Values corresponding to addresses outside the main memory are not allowed.",
                "width": 7
              },
              "STRT": {
                "bit": 16,
                "description": "Start erase operation\nThis bit triggers an erase operation when set.\nThis bit is possible to set only by software and to clear only by hardware. The hardware clears it when one of BSY1 and BSY2 flags in the FLASH_SR register transits to zero."
              },
              "OPTSTRT": {
                "bit": 17,
                "description": "Start of modification of option bytes\nThis bit triggers an options operation when set.\nThis bit is set only by software, and is cleared when the BSY1 bit is cleared in FLASH_SR."
              },
              "FSTPG": {
                "bit": 18,
                "description": "Fast programming enable"
              },
              "EOPIE": {
                "bit": 24,
                "description": "End-of-operation interrupt enable\nThis bit enables the interrupt generation upon setting the EOP flag in the FLASH_SR register."
              },
              "ERRIE": {
                "bit": 25,
                "description": "Error interrupt enable\nThis bit enables the interrupt generation upon setting the OPERR flag in the FLASH_SR register."
              },
              "RDERRIE": {
                "bit": 26,
                "description": "PCROP read error interrupt enable\nThis bit enables the interrupt generation upon setting the RDERR flag in the FLASH_SR register."
              },
              "OBL_LAUNCH": {
                "bit": 27,
                "description": "Option byte load launch\nWhen set, this bit triggers the load of option bytes into option registers. It is automatically cleared upon the completion of the load. The high state of the bit indicates pending option byte load.\nThe bit cannot be cleared by software. It cannot be written as long as OPTLOCK is set."
              },
              "SEC_PROT": {
                "bit": 28,
                "description": "Securable memory area protection enable\nThis bit enables the protection on securable area, provided that a non-null securable memory area size (SEC_SIZE[4:0]) is defined in option bytes.\nThis bit is possible to set only by software and to clear only through a system reset."
              },
              "OPTLOCK": {
                "bit": 30,
                "description": "Options Lock\nThis bit is set only. When set, all bits concerning user option in FLASH_CR register and so option page are locked. This bit is cleared by hardware after detecting the unlock sequence. The LOCK bit must be cleared before doing the unlock sequence for OPTLOCK bit.\nIn case of an unsuccessful unlock operation, this bit remains set until the next reset."
              },
              "LOCK": {
                "bit": 31,
                "description": "FLASH_CR Lock\nThis bit is set only. When set, the FLASH_CR register is locked. It is cleared by hardware after detecting the unlock sequence.\nIn case of an unsuccessful unlock operation, this bit remains set until the next system reset."
              }
            },
            "FLASH_ECCR": {
              "ADDR_ECC": {
                "bit": 0,
                "description": "ECC fail double-word address offset\n In case of ECC error or ECC correction detected, this bitfield contains double-word offset (multiple of 64 bits) to main Flash memory.",
                "width": 14
              },
              "SYSF_ECC": {
                "bit": 20,
                "description": "System Flash memory ECC fail\nThis bit indicates that the ECC error correction or double ECC error detection is located in the system Flash memory."
              },
              "ECCCIE": {
                "bit": 24,
                "description": "ECC correction interrupt enable"
              },
              "ECCC": {
                "bit": 30,
                "description": "ECC correction\nSet by hardware when one ECC error has been detected and corrected. An interrupt is generated if ECCIE is set.\nCleared by writing 1."
              },
              "ECCD": {
                "bit": 31,
                "description": "ECC detection\nSet by hardware when two ECC errors have been detected. When this bit is set, a NMI is generated.\nCleared by writing 1."
              }
            },
            "FLASH_OPTR": {
              "RDP": {
                "bit": 0,
                "description": "Read protection level\nOther: Level 1, memories read protection active",
                "width": 8
              },
              "BORR_LEV": {
                "bit": 8,
                "description": "BOR reset level",
                "width": 3
              },
              "NRST_STOP": {
                "bit": 13,
                "description": "Reset generated when entering Stop mode"
              },
              "NRST_STDBY": {
                "bit": 14,
                "description": "Reset generated when entering Standby mode"
              },
              "NRST_SHDW": {
                "bit": 15,
                "description": "Reset generated when entering Shutdown mode"
              },
              "IWDG_SW": {
                "bit": 16,
                "description": "Independent watchdog selection"
              },
              "IWDG_STOP": {
                "bit": 17,
                "description": "Independent watchdog counter freeze in Stop mode"
              },
              "IWDG_STDBY": {
                "bit": 18,
                "description": "Independent watchdog counter freeze in Standby mode"
              },
              "WWDG_SW": {
                "bit": 19,
                "description": "Window watchdog selection"
              },
              "BDRST": {
                "bit": 21,
                "description": "Backup domain reset"
              },
              "RAM_PARITY_CHECK": {
                "bit": 22,
                "description": "SRAM parity check control enable/disable"
              },
              "BKPSRAM_HW_ERASE_DISABLE": {
                "bit": 23,
                "description": "Backup SRAM erase prevention"
              },
              "NBOOT_SEL": {
                "bit": 24,
                "description": "BOOT0 signal source selection\nThis option bit defines the source of the BOOT0 signal."
              },
              "NBOOT1": {
                "bit": 25,
                "description": "Boot configuration\nTogether with the BOOT0 pin or option bit NBOOT0 (depending on NBOOT_SEL option bit configuration), this bit selects boot mode from the main flash memory, SRAM or the system memory. Refer to Section12.5: Boot configuration."
              },
              "NBOOT0": {
                "bit": 26,
                "description": "NBOOT0 option bit"
              },
              "NRST_MODE": {
                "bit": 27,
                "description": "NRST pin configuration",
                "width": 2
              },
              "IRHEN": {
                "bit": 29,
                "description": "Internal reset holder enable bit"
              }
            },
            "FLASH_WRP1AR": {
              "WRP1A_STRT": {
                "bit": 0,
                "description": "WRP area A start offset\nThis bitfield contains the offset of the first page of the WRP area A.\nNote: The number of effective bits depends on the size of the flash memory in the device.",
                "width": 7
              },
              "WRP1A_END": {
                "bit": 16,
                "description": "WRP area A end offset\nThis bitfield contains the offset of the last page of the WRP area A.\nNote: The number of effective bits depends on the size of the flash memory in the device.",
                "width": 7
              }
            },
            "FLASH_WRP1BR": {
              "WRP1B_STRT": {
                "bit": 0,
                "description": "WRP area B start offset\nThis bitfield contains the offset of the first page of the WRP area B.\nNote: The number of effective bits depends on the size of the flash memory in the device.",
                "width": 7
              },
              "WRP1B_END": {
                "bit": 16,
                "description": "WRP area B end offset\nThis bitfield contains the offset of the last page of the WRP area B.\nNote: The number of effective bits depends on the size of the flash memory in the device.",
                "width": 7
              }
            },
            "FLASH_SECR": {
              "HDP1_PEND": {
                "bit": 0,
                "description": "Last page of the first hide protection area",
                "width": 7
              },
              "BOOT_LOCK": {
                "bit": 16,
                "description": "used to force boot from user area\nIf the bit is set in association with RDP level 1, the debug capabilities are disabled, except in the case of a bad OBL (mismatch)."
              },
              "HDP1EN": {
                "bit": 24,
                "description": "Hide protection area enable",
                "width": 8
              }
            }
          }
        },
        "GPIO": {
          "instances": [
            {
              "name": "GPIOA",
              "base": "0x50000000"
            },
            {
              "name": "GPIOB",
              "base": "0x50000400"
            },
            {
              "name": "GPIOC",
              "base": "0x50000800"
            },
            {
              "name": "GPIOD",
              "base": "0x50000C00"
            },
            {
              "name": "GPIOE",
              "base": "0x50001000"
            },
            {
              "name": "GPIOF",
              "base": "0x50001400"
            }
          ],
          "registers": {
            "GPIOA_MODER": {
              "offset": "0x00",
              "size": 32,
              "description": "GPIO port mode register"
            },
            "GPIOA_OTYPER": {
              "offset": "0x04",
              "size": 32,
              "description": "GPIO port output type register"
            },
            "GPIOA_OSPEEDR": {
              "offset": "0x08",
              "size": 32,
              "description": "GPIO port output speed register"
            },
            "GPIOA_PUPDR": {
              "offset": "0x0C",
              "size": 32,
              "description": "GPIO port pull-up/pull-down register"
            },
            "GPIOA_IDR": {
              "offset": "0x10",
              "size": 32,
              "description": "GPIO port input data register"
            },
            "GPIOA_ODR": {
              "offset": "0x14",
              "size": 32,
              "description": "GPIO port output data register"
            },
            "GPIOA_BSRR": {
              "offset": "0x18",
              "size": 32,
              "description": "GPIO port bit set/reset register"
            },
            "GPIOA_LCKR": {
              "offset": "0x1C",
              "size": 32,
              "description": "GPIO port configuration lock register"
            },
            "GPIOA_AFRL": {
              "offset": "0x20",
              "size": 32,
              "description": "GPIO alternate function low register"
            },
            "GPIOA_AFRH": {
              "offset": "0x24",
              "size": 32,
              "description": "GPIO alternate function high register"
            },
            "GPIOA_BRR": {
              "offset": "0x28",
              "size": 32,
              "description": "GPIO port bit reset register"
            }
          },
          "bits": {
            "GPIOA_MODER": {
              "MODE0": {
                "bit": 0,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE1": {
                "bit": 2,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE2": {
                "bit": 4,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE3": {
                "bit": 6,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE4": {
                "bit": 8,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE5": {
                "bit": 10,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE6": {
                "bit": 12,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE7": {
                "bit": 14,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE8": {
                "bit": 16,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE9": {
                "bit": 18,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE10": {
                "bit": 20,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE11": {
                "bit": 22,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE12": {
                "bit": 24,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE13": {
                "bit": 26,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE14": {
                "bit": 28,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              },
              "MODE15": {
                "bit": 30,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O mode.",
                "width": 2
              }
            },
            "GPIOA_OTYPER": {
              "OT0": {
                "bit": 0,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT1": {
                "bit": 1,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT2": {
                "bit": 2,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT3": {
                "bit": 3,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT4": {
                "bit": 4,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT5": {
                "bit": 5,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT6": {
                "bit": 6,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT7": {
                "bit": 7,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT8": {
                "bit": 8,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT9": {
                "bit": 9,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT10": {
                "bit": 10,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT11": {
                "bit": 11,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT12": {
                "bit": 12,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT13": {
                "bit": 13,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT14": {
                "bit": 14,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              },
              "OT15": {
                "bit": 15,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output type."
              }
            },
            "GPIOA_OSPEEDR": {
              "OSPEED0": {
                "bit": 0,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED1": {
                "bit": 2,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED2": {
                "bit": 4,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED3": {
                "bit": 6,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED4": {
                "bit": 8,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED5": {
                "bit": 10,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED6": {
                "bit": 12,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED7": {
                "bit": 14,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED8": {
                "bit": 16,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED9": {
                "bit": 18,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED10": {
                "bit": 20,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED11": {
                "bit": 22,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED12": {
                "bit": 24,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED13": {
                "bit": 26,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED14": {
                "bit": 28,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              },
              "OSPEED15": {
                "bit": 30,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O output speed.\nNote: Refer to the device datasheet for the frequency specifications and the power supply and load conditions for each speed..",
                "width": 2
              }
            },
            "GPIOA_PUPDR": {
              "PUPD0": {
                "bit": 0,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD1": {
                "bit": 2,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD2": {
                "bit": 4,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD3": {
                "bit": 6,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD4": {
                "bit": 8,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD5": {
                "bit": 10,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD6": {
                "bit": 12,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD7": {
                "bit": 14,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD8": {
                "bit": 16,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD9": {
                "bit": 18,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD10": {
                "bit": 20,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD11": {
                "bit": 22,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD12": {
                "bit": 24,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD13": {
                "bit": 26,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD14": {
                "bit": 28,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              },
              "PUPD15": {
                "bit": 30,
                "description": "Port x configuration I/O pin y\nThese bits are written by software to configure the I/O pull-up or pull-down",
                "width": 2
              }
            },
            "GPIOA_IDR": {
              "ID0": {
                "bit": 0,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID1": {
                "bit": 1,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID2": {
                "bit": 2,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID3": {
                "bit": 3,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID4": {
                "bit": 4,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID5": {
                "bit": 5,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID6": {
                "bit": 6,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID7": {
                "bit": 7,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID8": {
                "bit": 8,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID9": {
                "bit": 9,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID10": {
                "bit": 10,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID11": {
                "bit": 11,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID12": {
                "bit": 12,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID13": {
                "bit": 13,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID14": {
                "bit": 14,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              },
              "ID15": {
                "bit": 15,
                "description": "Port x input data I/O pin y\nThese bits are read-only. They contain the input value of the corresponding I/O port."
              }
            },
            "GPIOA_ODR": {
              "OD0": {
                "bit": 0,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD1": {
                "bit": 1,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD2": {
                "bit": 2,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD3": {
                "bit": 3,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD4": {
                "bit": 4,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD5": {
                "bit": 5,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD6": {
                "bit": 6,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD7": {
                "bit": 7,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD8": {
                "bit": 8,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD9": {
                "bit": 9,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD10": {
                "bit": 10,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD11": {
                "bit": 11,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD12": {
                "bit": 12,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD13": {
                "bit": 13,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD14": {
                "bit": 14,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              },
              "OD15": {
                "bit": 15,
                "description": "Port output data I/O pin y\nThese bits can be read and written by software.\nNote: For atomic bit set/reset, the OD bits can be individually set and/or reset by writing to the GPIOx_BSRR register (x = A..F)."
              }
            },
            "GPIOA_BSRR": {
              "BS0": {
                "bit": 0,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS1": {
                "bit": 1,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS2": {
                "bit": 2,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS3": {
                "bit": 3,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS4": {
                "bit": 4,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS5": {
                "bit": 5,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS6": {
                "bit": 6,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS7": {
                "bit": 7,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS8": {
                "bit": 8,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS9": {
                "bit": 9,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS10": {
                "bit": 10,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS11": {
                "bit": 11,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS12": {
                "bit": 12,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS13": {
                "bit": 13,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS14": {
                "bit": 14,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BS15": {
                "bit": 15,
                "description": "Port x set I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR0": {
                "bit": 16,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR1": {
                "bit": 17,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR2": {
                "bit": 18,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR3": {
                "bit": 19,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR4": {
                "bit": 20,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR5": {
                "bit": 21,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR6": {
                "bit": 22,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR7": {
                "bit": 23,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR8": {
                "bit": 24,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR9": {
                "bit": 25,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR10": {
                "bit": 26,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR11": {
                "bit": 27,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR12": {
                "bit": 28,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR13": {
                "bit": 29,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR14": {
                "bit": 30,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              },
              "BR15": {
                "bit": 31,
                "description": "Port x reset I/O pin y\nThese bits are write-only. A read to these bits returns the value 0x0000.\nNote: If both BSx and BRx are set, BSx has priority."
              }
            },
            "GPIOA_LCKR": {
              "LCK0": {
                "bit": 0,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK1": {
                "bit": 1,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK2": {
                "bit": 2,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK3": {
                "bit": 3,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK4": {
                "bit": 4,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK5": {
                "bit": 5,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK6": {
                "bit": 6,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK7": {
                "bit": 7,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK8": {
                "bit": 8,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK9": {
                "bit": 9,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK10": {
                "bit": 10,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK11": {
                "bit": 11,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK12": {
                "bit": 12,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK13": {
                "bit": 13,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK14": {
                "bit": 14,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCK15": {
                "bit": 15,
                "description": "Port x lock I/O pin y\nThese bits are read/write but can only be written when the LCKK bit is 0."
              },
              "LCKK": {
                "bit": 16,
                "description": "Lock key\nThis bit can be read any time. It can only be modified using the lock key write sequence.\nLOCK key write sequence:\nWR LCKR[16] = 1 + LCKR[15:0]\nWR LCKR[16] = 0 + LCKR[15:0]\nWR LCKR[16] = 1 + LCKR[15:0]\nRD LCKR\nRD LCKR[16] = 1 (this read operation is optional but it confirms that the lock is active)\nNote: During the LOCK key write sequence, the value of LCK[15:0] must not change.\nNote: Any error in the lock sequence aborts the lock.\nNote: After the first lock sequence on any bit of the port, any read access on the LCKK bit returns 1 until the next MCU reset or peripheral reset."
              }
            },
            "GPIOA_AFRL": {
              "AFSEL0": {
                "bit": 0,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL1": {
                "bit": 4,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL2": {
                "bit": 8,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL3": {
                "bit": 12,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL4": {
                "bit": 16,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL5": {
                "bit": 20,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL6": {
                "bit": 24,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL7": {
                "bit": 28,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              }
            },
            "GPIOA_AFRH": {
              "AFSEL8": {
                "bit": 0,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL9": {
                "bit": 4,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL10": {
                "bit": 8,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL11": {
                "bit": 12,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL12": {
                "bit": 16,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL13": {
                "bit": 20,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL14": {
                "bit": 24,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              },
              "AFSEL15": {
                "bit": 28,
                "description": "Alternate function selection for port x I/O pin y\nThese bits are written by software to configure alternate function I/Os.",
                "width": 4
              }
            },
            "GPIOA_BRR": {
              "BR0": {
                "bit": 0,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR1": {
                "bit": 1,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR2": {
                "bit": 2,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR3": {
                "bit": 3,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR4": {
                "bit": 4,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR5": {
                "bit": 5,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR6": {
                "bit": 6,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR7": {
                "bit": 7,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR8": {
                "bit": 8,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR9": {
                "bit": 9,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR10": {
                "bit": 10,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR11": {
                "bit": 11,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR12": {
                "bit": 12,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR13": {
                "bit": 13,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR14": {
                "bit": 14,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              },
              "BR15": {
                "bit": 15,
                "description": "Port x reset IO pin y\nThese bits are write-only. A read to these bits returns the value 0x0000."
              }
            }
          }
        },
        "WDG": {
          "instances": [
            {
              "name": "IWDG",
              "base": "0x40003000"
            },
            {
              "name": "WWDG",
              "base": "0x40002C00",
              "irq": 0
            }
          ],
          "registers": {
            "IWDG_KR": {
              "offset": "0x00",
              "size": 32,
              "description": "IWDG key register"
            },
            "IWDG_PR": {
              "offset": "0x04",
              "size": 32,
              "description": "IWDG prescaler register"
            },
            "IWDG_RLR": {
              "offset": "0x08",
              "size": 32,
              "description": "IWDG reload register"
            },
            "IWDG_SR": {
              "offset": "0x0C",
              "size": 32,
              "description": "IWDG status register"
            },
            "IWDG_WINR": {
              "offset": "0x10",
              "size": 32,
              "description": "IWDG window register"
            },
            "IWDG_EWCR": {
              "offset": "0x14",
              "size": 32,
              "description": "IWDG early wake-up interrupt register"
            }
          },
          "bits": {
            "IWDG_KR": {
              "KEY": {
                "bit": 0,
                "description": "Key value (write only, read 0x0000)\nThese bits can be used for several functions, depending upon the value written by the application:\n- 0xAAAA: reloads the RL[11:0] value into the IWDCNT down-counter (watchdog refresh), and write-protects registers. This value must be written by software at regular intervals, otherwise the watchdog generates a reset when the counter reaches 0.\n- 0x5555: enables write-accesses to the registers.\n- 0xCCCC: enables the watchdog (except if the hardware watchdog option is selected) and write-protects registers.\n- values different from 0x5555: write-protects registers.\nNote that only IWDG_PR, IWDG_RLR, IWDG_EWCR and IWDG_WINR registers have a write-protection mechanism.",
                "width": 16
              }
            },
            "IWDG_PR": {
              "PR": {
                "bit": 0,
                "description": "Prescaler divider \nThese bits are write access protected, see Section126.4.6. They are written by software to select the prescaler divider feeding the counter clock. PVU bit of the IWDG status register (IWDG_SR) must be reset to be able to change the prescaler divider.\nOthers: divider / 1024\nNote: Reading this register returns the prescaler value from the V<sub>DD</sub> voltage domain. This value may not be up to date/valid if a write operation to this register is ongoing. For this reason the value read from this register is valid only when the PVU bit in the IWDG status register (IWDG_SR) is reset.",
                "width": 4
              }
            },
            "IWDG_RLR": {
              "RL": {
                "bit": 0,
                "description": "Watchdog counter reload value \nThese bits are write access protected, see Section126.4.6. They are written by software to define the value to be loaded in the watchdog counter each time the value 0xAAAA is written in the IWDG key register (IWDG_KR). The watchdog counter counts down from this value. The timeout period is a function of this value and the prescaler.clock. It is not recommended to set RL[11:0] to a value lower than 2.\nThe RVU bit in the IWDG status register (IWDG_SR) must be reset to be able to change the reload value.\nNote: Reading this register returns the reload value from the V<sub>DD</sub> voltage domain. This value may not be up to date/valid if a write operation to this register is ongoing, hence the value read from this register is valid only when the RVU bit in the IWDG status register (IWDG_SR) is reset.",
                "width": 12
              }
            },
            "IWDG_SR": {
              "PVU": {
                "bit": 0,
                "description": "Watchdog prescaler value update\nThis bit is set by hardware to indicate that an update of the prescaler value is ongoing. It is reset by hardware when the prescaler update operation is completed in the V<sub>DD</sub> voltage domain (takes up to six periods of the IWDG kernel clock iwdg_ker_ck).\nThe prescaler value can be updated only when PVU bit is reset."
              },
              "RVU": {
                "bit": 1,
                "description": "Watchdog counter reload value update\nThis bit is set by hardware to indicate that an update of the reload value is ongoing. It is reset by hardware when the reload value update operation is completed in the V<sub>DD</sub> voltage domain (takes up to six periods of the IWDG kernel clock iwdg_ker_ck).\nThe reload value can be updated only when RVU bit is reset."
              },
              "WVU": {
                "bit": 2,
                "description": "Watchdog counter window value update\nThis bit is set by hardware to indicate that an update of the window value is ongoing. It is reset by hardware when the reload value update operation is completed in the V<sub>DD</sub> voltage domain (takes up to one period of presc_ck and two periods of the IWDG kernel clock iwdg_ker_ck).\nThe window value can be updated only when WVU bit is reset.\nThis bit is generated only if generic window = 1."
              },
              "EWU": {
                "bit": 3,
                "description": "Watchdog interrupt comparator value update \nThis bit is set by hardware to indicate that an update of the interrupt comparator value (EWIT[11:0]) or an update of the EWIE is ongoing. It is reset by hardware when the update operation is completed in the V<sub>DD</sub> voltage domain (takes up to one period of presc_ck and two periods of the IWDG kernel clock iwdg_ker_ck).\nThe EWIT[11:0] and EWIE fields can be updated only when EWU bit is reset."
              },
              "ONF": {
                "bit": 8,
                "description": "Watchdog enable status bit\nSet to 1 by hardware as soon as the IWDG is started. In software mode, it remains to '1' until the IWDG is reset. In hardware mode, this bit is always set to '1'."
              },
              "EWIF": {
                "bit": 14,
                "description": "Watchdog early interrupt flag\nThis bit is set to 1 by hardware in order to indicate that an early interrupt is pending. This bit must be cleared by the software by writing the bit EWIC of IWDG_EWCR register to 1."
              }
            },
            "IWDG_WINR": {
              "WIN": {
                "bit": 0,
                "description": "Watchdog counter window value \nThese bits are write access protected, see Section126.4.6.They contain the high limit of the window value to be compared with the downcounter.\nTo prevent a reset, the IWDCNT downcounter must be reloaded when its value is lower than WIN[11:0]1+11 and greater than 1.\nThe WVU bit in the IWDG status register (IWDG_SR) must be reset to be able to change the reload value.\nNote: Reading this register returns the reload value from the V<sub>DD</sub> voltage domain. This value may not be valid if a write operation to this register is ongoing. For this reason the value read from this register is valid only when the WVU bit in the IWDG status register (IWDG_SR) is reset.",
                "width": 12
              }
            },
            "IWDG_EWCR": {
              "EWIT": {
                "bit": 0,
                "description": "Watchdog counter window value \nThese bits are write access protected (see Section126.4.6). They are written by software to define at which position of the IWDCNT down-counter the early wake-up interrupt must be generated. The early interrupt is generated when the IWDCNT is lower or equal to EWIT[11:0]1-11.\nEWIT[11:0] must be bigger than 1.\nAn interrupt is generated only if EWIE = 1.\nThe EWU bit in the IWDG status register (IWDG_SR) must be reset to be able to change the reload value.\nNote: Reading this register returns the Early wake-up comparator value and the Interrupt enable bit from the V<sub>DD</sub> voltage domain. This value may not be up to date/valid if a write operation to this register is ongoing, hence the value read from this register is valid only when the EWU bit in the IWDG status register (IWDG_SR) is reset.",
                "width": 12
              },
              "EWIC": {
                "bit": 14,
                "description": "Watchdog early interrupt acknowledge \nThe software must write a 1 into this bit in order to acknowledge the early wake-up interrupt and to clear the EWIF flag. Writing 0 has not effect, reading this flag returns a 0."
              },
              "EWIE": {
                "bit": 15,
                "description": "Watchdog early interrupt enable\nSet and reset by software.\nThe EWU bit in the IWDG status register (IWDG_SR) must be reset to be able to change the value of this bit."
              }
            }
          }
        },
        "I2C": {
          "instances": [
            {
              "name": "I2C1",
              "base": "0x40005400",
              "irq": 23
            },
            {
              "name": "I2C2",
              "base": "0x40005800",
              "irq": 24
            },
            {
              "name": "I2C3",
              "base": "0x40008800"
            }
          ],
          "registers": {
            "I2C_CR1": {
              "offset": "0x00",
              "size": 32,
              "description": "I2C control register 1"
            },
            "I2C_CR2": {
              "offset": "0x04",
              "size": 32,
              "description": "I2C control register 2"
            },
            "I2C_OAR1": {
              "offset": "0x08",
              "size": 32,
              "description": "I2C own address 1 register"
            },
            "I2C_OAR2": {
              "offset": "0x0C",
              "size": 32,
              "description": "I2C own address 2 register"
            },
            "I2C_TIMINGR": {
              "offset": "0x10",
              "size": 32,
              "description": "I2C timing register"
            },
            "I2C_TIMEOUTR": {
              "offset": "0x14",
              "size": 32,
              "description": "I2C timeout register"
            },
            "I2C_ISR": {
              "offset": "0x18",
              "size": 32,
              "description": "I2C interrupt and status register"
            },
            "I2C_ICR": {
              "offset": "0x1C",
              "size": 32,
              "description": "I2C interrupt clear register"
            },
            "I2C_PECR": {
              "offset": "0x20",
              "size": 32,
              "description": "I2C PEC register"
            },
            "I2C_RXDR": {
              "offset": "0x24",
              "size": 32,
              "description": "I2C receive data register"
            },
            "I2C_TXDR": {
              "offset": "0x28",
              "size": 32,
              "description": "I2C transmit data register"
            }
          },
          "bits": {
            "I2C_CR1": {
              "PE": {
                "bit": 0,
                "description": "Peripheral enable\nNote: When PE = 0, the I2C SCL and SDA lines are released. Internal state machines and status bits are put back to their reset value. When cleared, PE must be kept low for at least three APB clock cycles."
              },
              "TXIE": {
                "bit": 1,
                "description": "TX interrupt enable"
              },
              "RXIE": {
                "bit": 2,
                "description": "RX interrupt enable"
              },
              "ADDRIE": {
                "bit": 3,
                "description": "Address match interrupt enable (slave only)"
              },
              "NACKIE": {
                "bit": 4,
                "description": "Not acknowledge received interrupt enable"
              },
              "STOPIE": {
                "bit": 5,
                "description": "Stop detection interrupt enable"
              },
              "TCIE": {
                "bit": 6,
                "description": "Transfer complete interrupt enable\nNote: Any of these events generate an interrupt:\nNote: Transfer complete (TC)\nNote: Transfer complete reload (TCR)"
              },
              "ERRIE": {
                "bit": 7,
                "description": "Error interrupts enable\nNote: Any of these errors generate an interrupt:\nNote: Arbitration loss (ARLO)\nNote: Bus error detection (BERR)\nNote: Overrun/Underrun (OVR)"
              },
              "DNF": {
                "bit": 8,
                "description": "Digital noise filter\nThese bits are used to configure the digital noise filter on SDA and SCL input. The digital filter, filters spikes with a length of up to DNF[3:0] * t<sub>I2CCLK</sub>\n<sub>...</sub>\nNote: If the analog filter is enabled, the digital filter is added to it. This filter can be programmed only when the I2C is disabled (PE = 0).",
                "width": 4
              },
              "ANFOFF": {
                "bit": 12,
                "description": "Analog noise filter OFF\nNote: This bit can be programmed only when the I2C is disabled (PE = 0)."
              },
              "TXDMAEN": {
                "bit": 14,
                "description": "DMA transmission requests enable"
              },
              "RXDMAEN": {
                "bit": 15,
                "description": "DMA reception requests enable"
              },
              "SBC": {
                "bit": 16,
                "description": "Slave byte control\nThis bit is used to enable hardware byte control in slave mode."
              },
              "NOSTRETCH": {
                "bit": 17,
                "description": "Clock stretching disable \nThis bit is used to disable clock stretching in slave mode. It must be kept cleared in master mode.\nNote: This bit can be programmed only when the I2C is disabled (PE = 0)."
              },
              "WUPEN": {
                "bit": 18,
                "description": "Wake-up from Stop mode enable"
              },
              "GCEN": {
                "bit": 19,
                "description": "General call enable"
              },
              "FMP": {
                "bit": 24,
                "description": "Fast-mode Plus 20 mA drive enable"
              },
              "ADDRACLR": {
                "bit": 30,
                "description": "Address match flag (ADDR) automatic clear"
              },
              "STOPFACLR": {
                "bit": 31,
                "description": "STOP detection flag (STOPF) automatic clear"
              }
            },
            "I2C_CR2": {
              "SADD": {
                "bit": 0,
                "description": "Slave address (master mode)\nIn 7-bit addressing mode (ADD10 = 0):\nSADD[7:1] must be written with the 7-bit slave address to be sent. Bits SADD[9], SADD[8] and SADD[0] are don't care.\nIn 10-bit addressing mode (ADD10 = 1):\nSADD[9:0] must be written with the 10-bit slave address to be sent.\nNote: Changing these bits when the START bit is set is not allowed.",
                "width": 10
              },
              "RD_WRN": {
                "bit": 10,
                "description": "Transfer direction (master mode)\nNote: Changing this bit when the START bit is set is not allowed."
              },
              "ADD10": {
                "bit": 11,
                "description": "10-bit addressing mode (master mode)\nNote: Changing this bit when the START bit is set is not allowed."
              },
              "HEAD10R": {
                "bit": 12,
                "description": "10-bit address header only read direction (master receiver mode)\nNote: Changing this bit when the START bit is set is not allowed."
              },
              "START": {
                "bit": 13,
                "description": "Start generation\nThis bit is set by software, and cleared by hardware after the Start followed by the address sequence is sent, by an arbitration loss, by an address matched in slave mode, by a timeout error detection, or when PE = 0.\nIf the I2C is already in master mode with AUTOEND = 0, setting this bit generates a Repeated start condition when RELOAD = 0, after the end of the NBYTES transfer.\nOtherwise, setting this bit generates a START condition once the bus is free.\nNote: Writing 0 to this bit has no effect.\nNote: The START bit can be set even if the bus is BUSY or I2C is in slave mode.\nNote: This bit has no effect when RELOAD is set."
              },
              "STOP": {
                "bit": 14,
                "description": "Stop generation (master mode)\nThe bit is set by software, cleared by hardware when a STOP condition is detected, or when PE = 0.\nIn master mode:\nNote: Writing 0 to this bit has no effect."
              },
              "NACK": {
                "bit": 15,
                "description": "NACK generation (slave mode)\nThe bit is set by software, cleared by hardware when the NACK is sent, or when a STOP condition or an Address matched is received, or when PE = 0.\nNote: Writing 0 to this bit has no effect.\nNote: This bit is used in slave mode only: in master receiver mode, NACK is automatically generated after last byte preceding STOP or RESTART condition, whatever the NACK bit value.\nNote: When an overrun occurs in slave receiver NOSTRETCH mode, a NACK is automatically generated, whatever the NACK bit value.\nNote: When hardware PEC checking is enabled (PECBYTE = 1), the PEC acknowledge value does not depend on the NACK value."
              },
              "NBYTES": {
                "bit": 16,
                "description": "Number of bytes",
                "width": 8
              },
              "RELOAD": {
                "bit": 24,
                "description": "NBYTES reload mode\nThis bit is set and cleared by software."
              },
              "AUTOEND": {
                "bit": 25,
                "description": "Automatic end mode (master mode)\nThis bit is set and cleared by software.\nNote: This bit has no effect in slave mode or when the RELOAD bit is set."
              }
            },
            "I2C_OAR1": {
              "OA1": {
                "bit": 0,
                "description": "Interface own slave address\n7-bit addressing mode: OA1[7:1] contains the 7-bit own slave address. Bits OA1[9], OA1[8] and OA1[0] are don't care. \n10-bit addressing mode: OA1[9:0] contains the 10-bit own slave address.\nNote: These bits can be written only when OA1EN = 0.",
                "width": 10
              },
              "OA1MODE": {
                "bit": 10,
                "description": "Own address 1 10-bit mode\nNote: This bit can be written only when OA1EN = 0."
              },
              "OA1EN": {
                "bit": 15,
                "description": "Own address 1 enable"
              }
            },
            "I2C_OAR2": {
              "OA2": {
                "bit": 1,
                "description": "Interface address\n7-bit addressing mode: 7-bit address\nNote: These bits can be written only when OA2EN = 0.",
                "width": 7
              },
              "OA2MSK": {
                "bit": 8,
                "description": "Own address 2 masks\nNote: These bits can be written only when OA2EN = 0.\nNote: As soon as OA2MSK is not equal to 0, the reserved I2C addresses (0b0000xxx and 0b1111xxx) are not acknowledged even if the comparison matches.",
                "width": 3
              },
              "OA2EN": {
                "bit": 15,
                "description": "Own address 2 enable"
              }
            },
            "I2C_TIMINGR": {
              "SCLL": {
                "bit": 0,
                "description": "SCL low period (master mode)\nThis field is used to generate the SCL low period in master mode.\nt<sub>SCLL </sub>= (SCLL + 1) x t<sub>PRESC</sub>\nNote: SCLL is also used to generate t<sub>BUF </sub>and t<sub>SU:STA </sub>timings.",
                "width": 8
              },
              "SCLH": {
                "bit": 8,
                "description": "SCL high period (master mode)\nThis field is used to generate the SCL high period in master mode.\nt<sub>SCLH </sub>= (SCLH + 1) x t<sub>PRESC</sub>\nNote: SCLH is also used to generate t<sub>SU:STO </sub>and t<sub>HD:STA </sub>timing.",
                "width": 8
              },
              "SDADEL": {
                "bit": 16,
                "description": "Data hold time\nThis field is used to generate the delay t<sub>SDADEL </sub>between SCL falling edge and SDA edge. In master and in slave modes with NOSTRETCH = 0, the SCL line is stretched low during t<sub>SDADEL</sub>.\nt<sub>SDADEL</sub>= SDADEL x t<sub>PRESC</sub>\nNote: SDADEL is used to generate t<sub>HD:DAT </sub>timing.",
                "width": 4
              },
              "SCLDEL": {
                "bit": 20,
                "description": "Data setup time\nThis field is used to generate a delay t<sub>SCLDEL </sub>between SDA edge and SCL rising edge. In master and in slave modes with NOSTRETCH = 0, the SCL line is stretched low during t<sub>SCLDEL</sub>.\nt<sub>SCLDEL </sub>= (SCLDEL + 1) x t<sub>PRESC</sub>\nNote: t<sub>SCLDEL</sub> is used to generate t<sub>SU:DAT </sub>timing.",
                "width": 4
              },
              "PRESC": {
                "bit": 28,
                "description": "Timing prescaler\nThis field is used to prescale I2CCLK to generate the clock period t<sub>PRESC </sub>used for data setup and hold counters (refer to I2C timings) and for SCL high and low level counters (refer to I2C master initialization).\nt<sub>PRESC </sub>= (PRESC + 1) x t<sub>I2CCLK</sub>",
                "width": 4
              }
            },
            "I2C_TIMEOUTR": {
              "TIMEOUTA": {
                "bit": 0,
                "description": "Bus timeout A\nThis field is used to configure:\nThe SCL low timeout condition t<sub>TIMEOUT</sub> when TIDLE = 0\nt<sub>TIMEOUT</sub>= (TIMEOUTA + 1) x 2048 x t<sub>I2CCLK</sub>\nThe bus idle condition (both SCL and SDA high) when TIDLE = 1\nt<sub>IDLE</sub>= (TIMEOUTA + 1) x 4 x t<sub>I2CCLK</sub>\nNote: These bits can be written only when TIMOUTEN = 0.",
                "width": 12
              },
              "TIDLE": {
                "bit": 12,
                "description": "Idle clock timeout detection\nNote: This bit can be written only when TIMOUTEN = 0."
              },
              "TIMOUTEN": {
                "bit": 15,
                "description": "Clock timeout enable"
              },
              "TIMEOUTB": {
                "bit": 16,
                "description": "Bus timeout B\nThis field is used to configure the cumulative clock extension timeout:\nIn master mode, the master cumulative clock low extend time (t<sub>LOW:MEXT</sub>) is detected\nIn slave mode, the slave cumulative clock low extend time (t<sub>LOW:SEXT</sub>) is detected\nt<sub>LOW:EXT </sub>= (TIMEOUTB + TIDLE = 01) x 2048 x t<sub>I2CCLK</sub>\nNote: These bits can be written only when TEXTEN = 0.",
                "width": 12
              },
              "TEXTEN": {
                "bit": 31,
                "description": "Extended clock timeout enable"
              }
            },
            "I2C_ISR": {
              "TXE": {
                "bit": 0,
                "description": "Transmit data register empty (transmitters) \nThis bit is set by hardware when the I2C_TXDR register is empty. It is cleared when the next data to be sent is written in the I2C_TXDR register. \nThis bit can be written to 1 by software in order to flush the transmit data register I2C_TXDR.\nNote: This bit is set by hardware when PE = 0."
              },
              "TXIS": {
                "bit": 1,
                "description": "Transmit interrupt status (transmitters) \nThis bit is set by hardware when the I2C_TXDR register is empty and the data to be transmitted must be written in the I2C_TXDR register. It is cleared when the next data to be sent is written in the I2C_TXDR register.\nThis bit can be written to 1 by software only when NOSTRETCH = 1, to generate a TXIS event (interrupt if TXIE = 1 or DMA request if TXDMAEN = 1).\nNote: This bit is cleared by hardware when PE = 0."
              },
              "RXNE": {
                "bit": 2,
                "description": "Receive data register not empty (receivers)\nThis bit is set by hardware when the received data is copied into the I2C_RXDR register, and is ready to be read. It is cleared when I2C_RXDR is read.\nNote: This bit is cleared by hardware when PE = 0."
              },
              "ADDR": {
                "bit": 3,
                "description": "Address matched (slave mode)\nThis bit is set by hardware as soon as the received slave address matched with one of the enabled slave addresses. It is cleared by software by setting ADDRCF bit.\nNote: This bit is cleared by hardware when PE = 0."
              },
              "NACKF": {
                "bit": 4,
                "description": "Not Acknowledge received flag \nThis flag is set by hardware when a NACK is received after a byte transmission. It is cleared by software by setting the NACKCF bit.\nNote: This bit is cleared by hardware when PE = 0."
              },
              "STOPF": {
                "bit": 5,
                "description": "Stop detection flag\nThis flag is set by hardware when a STOP condition is detected on the bus and the peripheral is involved in this transfer:\neither as a master, provided that the STOP condition is generated by the peripheral.\nor as a slave, provided that the peripheral has been addressed previously during this transfer.\nIt is cleared by software by setting the STOPCF bit.\nNote: This bit is cleared by hardware when PE = 0."
              },
              "TC": {
                "bit": 6,
                "description": "Transfer Complete (master mode)\nThis flag is set by hardware when RELOAD = 0, AUTOEND = 0 and NBYTES data have been transferred. It is cleared by software when START bit or STOP bit is set.\nNote: This bit is cleared by hardware when PE = 0."
              },
              "TCR": {
                "bit": 7,
                "description": "Transfer Complete Reload\nThis flag is set by hardware when RELOAD = 1 and NBYTES data have been transferred. It is cleared by software when NBYTES is written to a non-zero value.\nNote: This bit is cleared by hardware when PE = 0.\nNote: This flag is only for master mode, or for slave mode when the SBC bit is set."
              },
              "BERR": {
                "bit": 8,
                "description": "Bus error \nThis flag is set by hardware when a misplaced Start or STOP condition is detected whereas the peripheral is involved in the transfer. The flag is not set during the address phase in slave mode. It is cleared by software by setting BERRCF bit.\nNote: This bit is cleared by hardware when PE = 0."
              },
              "ARLO": {
                "bit": 9,
                "description": "Arbitration lost \nThis flag is set by hardware in case of arbitration loss. It is cleared by software by setting the ARLOCF bit.\nNote: This bit is cleared by hardware when PE = 0."
              },
              "OVR": {
                "bit": 10,
                "description": "Overrun/Underrun (slave mode)\nThis flag is set by hardware in slave mode with NOSTRETCH = 1, when an overrun/underrun error occurs. It is cleared by software by setting the OVRCF bit.\nNote: This bit is cleared by hardware when PE = 0."
              },
              "BUSY": {
                "bit": 15,
                "description": "Bus busy\nThis flag indicates that a communication is in progress on the bus. It is set by hardware when a START condition is detected, and cleared by hardware when a STOP condition is detected, or when PE = 0."
              },
              "DIR": {
                "bit": 16,
                "description": "Transfer direction (slave mode)\nThis flag is updated when an address match event occurs (ADDR = 1)."
              },
              "ADDCODE": {
                "bit": 17,
                "description": "Address match code (slave mode) \nThese bits are updated with the received address when an address match event occurs (ADDR = 1).\nIn the case of a 10-bit address, ADDCODE provides the 10-bit header followed by the two MSBs of the address.",
                "width": 7
              }
            },
            "I2C_ICR": {
              "ADDRCF": {
                "bit": 3,
                "description": "Address matched flag clear \nWriting 1 to this bit clears the ADDR flag in the I2C_ISR register. Writing 1 to this bit also clears the START bit in the I2C_CR2 register."
              },
              "NACKCF": {
                "bit": 4,
                "description": "Not Acknowledge flag clear\nWriting 1 to this bit clears the NACKF flag in I2C_ISR register."
              },
              "STOPCF": {
                "bit": 5,
                "description": "STOP detection flag clear \nWriting 1 to this bit clears the STOPF flag in the I2C_ISR register."
              },
              "BERRCF": {
                "bit": 8,
                "description": "Bus error flag clear\nWriting 1 to this bit clears the BERRF flag in the I2C_ISR register."
              },
              "ARLOCF": {
                "bit": 9,
                "description": "Arbitration lost flag clear\nWriting 1 to this bit clears the ARLO flag in the I2C_ISR register."
              },
              "OVRCF": {
                "bit": 10,
                "description": "Overrun/Underrun flag clear\nWriting 1 to this bit clears the OVR flag in the I2C_ISR register."
              }
            },
            "I2C_PECR": {
              "PEC": {
                "bit": 0,
                "description": "Packet error checking register\nThis field contains the internal PEC when PECEN=1.\nThe PEC is cleared by hardware when PE = 0.",
                "width": 8
              }
            },
            "I2C_RXDR": {
              "RXDATA": {
                "bit": 0,
                "description": "8-bit receive data\nData byte received from the I<sup>2</sup>C bus",
                "width": 8
              }
            },
            "I2C_TXDR": {
              "TXDATA": {
                "bit": 0,
                "description": "8-bit transmit data\nData byte to be transmitted to the I<sup>2</sup>C bus\nNote: These bits can be written only when TXE = 1.",
                "width": 8
              }
            }
          }
        },
        "LCD": {
          "instances": [
            {
              "name": "LCD",
              "base": "0x40002400",
              "irq": 22
            }
          ],
          "registers": {
            "LCD_CR": {
              "offset": "0x00",
              "size": 32,
              "description": "LCD control register"
            },
            "LCD_FCR": {
              "offset": "0x04",
              "size": 32,
              "description": "LCD frame control register"
            },
            "LCD_SR": {
              "offset": "0x08",
              "size": 32,
              "description": "LCD status register"
            },
            "LCD_CLR": {
              "offset": "0x0C",
              "size": 32,
              "description": "LCD clear register"
            },
            "LCD_RAM0": {
              "offset": "0x14",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM1": {
              "offset": "0x18",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM2": {
              "offset": "0x1C",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM3": {
              "offset": "0x20",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM4": {
              "offset": "0x24",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM5": {
              "offset": "0x28",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM6": {
              "offset": "0x2C",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM7": {
              "offset": "0x30",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM8": {
              "offset": "0x34",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM9": {
              "offset": "0x38",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM10": {
              "offset": "0x3C",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM11": {
              "offset": "0x40",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM12": {
              "offset": "0x44",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM13": {
              "offset": "0x48",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM14": {
              "offset": "0x4C",
              "size": 32,
              "description": "LCD display memory"
            },
            "LCD_RAM15": {
              "offset": "0x50",
              "size": 32,
              "description": "LCD display memory"
            }
          },
          "bits": {
            "LCD_CR": {
              "LCDEN": {
                "bit": 0,
                "description": "LCD controller enable\nThis bit is set by software to enable the LCD controller/driver. It is cleared by software to turn off the LCD at the beginning of the next frame. When the LCD is disabled, all COM and SEG pins are driven to V<sub>SS</sub>."
              },
              "VSEL": {
                "bit": 1,
                "description": "Voltage source selection\nThis bit determines the voltage source for the LCD."
              },
              "DUTY": {
                "bit": 2,
                "description": "Duty selection\nThese bits determine the duty cycle. Values 101, 110 and 111 are forbidden.\nOthers: Reserved",
                "width": 3
              },
              "BIAS": {
                "bit": 5,
                "description": "Bias selector\nThese bits determine the bias used. Value 11 is forbidden.",
                "width": 2
              },
              "MUX_SEG": {
                "bit": 7,
                "description": "Mux segment enable\nThis bit is used to enable SEG pin remapping. Four SEG pins can be multiplexed with1SEG[31:28] or SEG[15:12]. See Section118.3.7."
              },
              "BUFEN": {
                "bit": 8,
                "description": "Voltage output buffer enable\nThis bit is used to enable/disable the voltage output buffer for higher driving capability."
              }
            },
            "LCD_FCR": {
              "HD": {
                "bit": 0,
                "description": "High drive enable\nThis bit is written by software to enable a low resistance divider. Displays with high internal resistance may need a longer drive time to achieve satisfactory contrast. This bit is useful in this case if some additional power consumption can be tolerated."
              },
              "SOFIE": {
                "bit": 1,
                "description": "Start of frame interrupt enable\nThis bit is set and cleared by software."
              },
              "UDDIE": {
                "bit": 3,
                "description": "Update display done interrupt enable\nThis bit is set and cleared by software."
              },
              "PON": {
                "bit": 4,
                "description": "Pulse ON duration\nThese bits are written by software to define the pulse duration in terms of ck_ps pulses. A1short pulse leads to lower power consumption, but displays with high internal resistance may need a longer pulse to achieve satisfactory contrast.\nNote that the pulse is never longer than one half prescaled LCD clock period.\nPON duration example with LCDCLK = 32.7681kHz and PS=0x03:",
                "width": 3
              },
              "DEAD": {
                "bit": 7,
                "description": "Dead time duration\nThese bits are written by software to configure the length of the dead time between frames. During the dead time the COM and SEG voltage levels are held at 0 V to reduce the contrast without modifying the frame rate.\n......",
                "width": 3
              },
              "CC": {
                "bit": 10,
                "description": "Contrast control\nThese bits specify one of the V<sub>LCD </sub>maximum voltages (independent of V<sub>DD</sub>). It ranges from12.60 V to 3.51V.\nNote: Refer to the datasheet for the V<sub>LCDx</sub> values.",
                "width": 3
              },
              "BLINKF": {
                "bit": 13,
                "description": "Blink frequency selection",
                "width": 3
              },
              "BLINK": {
                "bit": 16,
                "description": "Blink mode selection",
                "width": 2
              },
              "DIV": {
                "bit": 18,
                "description": "DIV clock divider\nThese bits are written by software to define the division factor of the DIV divider (see1Section118.3.2.)\n...",
                "width": 4
              },
              "PS": {
                "bit": 22,
                "description": "PS 16-bit prescaler\nThese bits are written by software to define the division factor of the PS 16-bit prescaler. \nck_ps = LCDCLK/(2<sup>PS[3:0]</sup>). See<sub> </sub>Section118.3.2.\n...",
                "width": 4
              }
            },
            "LCD_SR": {
              "ENS": {
                "bit": 0,
                "description": "LCD enabled status\nThis bit is set and cleared by hardware. It indicates the LCD controller status.\nNote: This bit is set immediately when LCDEN in LCD_CR goes from 0 to 1. On deactivation, it reflects the real LCD status. It becomes 0 at the end of the last displayed frame."
              },
              "SOF": {
                "bit": 1,
                "description": "Start-of-frame flag\nThis bit is set by hardware at the beginning of a new frame, at the same time as the display data is updated. It is cleared by writing a 1 to SOFC in LCD_CLR. The bit clear has priority over the set."
              },
              "UDR": {
                "bit": 2,
                "description": "Update display request\nEach time software modifies the LCD_RAM, it must set this bit to transfer the updated data to the second level buffer. This bit stays set until the end of the update. During this time, \nthe LCD_RAM is write protected. \nWhen the display is disabled, the update is performed for all LCD_DISPLAY locations. When the display is enabled, the update is performed only for locations for which commons are active (depending on DUTY). For example if DUTY = 1/2, \nNote: only the LCD_DISPLAY of COM0 and COM1 are updated.\nNote: Writing 0 on this bit or writing 1 when it is already 1 has no effect. This bit can be cleared by hardware only. It can be cleared only when LCDEN = 1"
              },
              "UDD": {
                "bit": 3,
                "description": "Update display done\nThis bit is set by hardware. It is cleared by writing 1 to UDDC in LCD_CLR. The bit set has priority over the clear.\nNote: If the device is in Stop mode (PCLK not provided), UDD does not generate an interrupt even if UDDIE = 1. If the display is not enabled, the UDD interrupt never occurs."
              },
              "RDY": {
                "bit": 4,
                "description": "Ready flag\nThis bit is set and cleared by hardware. It indicates the status of the stepup converter."
              },
              "FCRSF": {
                "bit": 5,
                "description": "LCD frame control register synchronization flag\nThis bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK domain. It is cleared by hardware when writing to the LCD_FCR register."
              }
            },
            "LCD_CLR": {
              "SOFC": {
                "bit": 1,
                "description": "Start-of-frame flag clear\nThis bit is written by software to clear SOF in LCD_SR."
              },
              "UDDC": {
                "bit": 3,
                "description": "Update display done clear\nThis bit is written by software to clear UDD in LCD_SR."
              }
            },
            "LCD_RAM0": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 32
              }
            },
            "LCD_RAM1": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 20
              }
            },
            "LCD_RAM2": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 32
              }
            },
            "LCD_RAM3": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 20
              }
            },
            "LCD_RAM4": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 32
              }
            },
            "LCD_RAM5": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 20
              }
            },
            "LCD_RAM6": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 32
              }
            },
            "LCD_RAM7": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 20
              }
            },
            "LCD_RAM8": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 32
              }
            },
            "LCD_RAM9": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 16
              }
            },
            "LCD_RAM10": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 32
              }
            },
            "LCD_RAM11": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 16
              }
            },
            "LCD_RAM12": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 32
              }
            },
            "LCD_RAM13": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 16
              }
            },
            "LCD_RAM14": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 32
              }
            },
            "LCD_RAM15": {
              "SEGMENT_DATA": {
                "bit": 0,
                "description": "Each bit corresponds to one pixel of the LCD display.",
                "width": 16
              }
            }
          }
        },
        "TIM": {
          "instances": [
            {
              "name": "LPTIM1",
              "base": "0x40007C00"
            },
            {
              "name": "LPTIM2",
              "base": "0x40009400"
            },
            {
              "name": "LPTIM3",
              "base": "0x40009000"
            },
            {
              "name": "TIM1",
              "base": "0x40012C00",
              "irq": 13
            },
            {
              "name": "TIM2",
              "base": "0x40000000",
              "irq": 15
            },
            {
              "name": "TIM3",
              "base": "0x40000400",
              "irq": 16
            },
            {
              "name": "TIM6",
              "base": "0x40001000",
              "irq": 17
            },
            {
              "name": "TIM7",
              "base": "0x40001400",
              "irq": 18
            },
            {
              "name": "TIM15",
              "base": "0x40014000",
              "irq": 19
            },
            {
              "name": "TIM16",
              "base": "0x40014400",
              "irq": 20
            }
          ],
          "registers": {
            "LPTIM1_ISR_OUTPUT": {
              "offset": "0x00",
              "size": 32,
              "description": "LPTIM1 interrupt and status register [alternate]"
            },
            "LPTIM1_ISR_INPUT": {
              "offset": "0x00",
              "size": 32,
              "description": "LPTIM1 interrupt and status register [alternate]"
            },
            "LPTIM1_ICR_OUTPUT": {
              "offset": "0x04",
              "size": 32,
              "description": "LPTIM1 interrupt clear register [alternate]"
            },
            "LPTIM1_ICR_INPUT": {
              "offset": "0x04",
              "size": 32,
              "description": "LPTIM1 interrupt clear register [alternate]"
            },
            "LPTIM1_DIER_OUTPUT": {
              "offset": "0x08",
              "size": 32,
              "description": "LPTIM1 interrupt enable register [alternate]"
            },
            "LPTIM1_DIER_INPUT": {
              "offset": "0x08",
              "size": 32,
              "description": "LPTIM1 interrupt enable register [alternate]"
            },
            "LPTIM1_CFGR": {
              "offset": "0x0C",
              "size": 32,
              "description": "LPTIM configuration register"
            },
            "LPTIM1_CR": {
              "offset": "0x10",
              "size": 32,
              "description": "LPTIM control register"
            },
            "LPTIM1_CCR1": {
              "offset": "0x14",
              "size": 32,
              "description": "LPTIM compare register 1"
            },
            "LPTIM1_ARR": {
              "offset": "0x18",
              "size": 32,
              "description": "LPTIM autoreload register"
            },
            "LPTIM1_CNT": {
              "offset": "0x1C",
              "size": 32,
              "description": "LPTIM counter register"
            },
            "LPTIM1_CFGR2": {
              "offset": "0x24",
              "size": 32,
              "description": "LPTIM configuration register 2"
            },
            "LPTIM1_RCR": {
              "offset": "0x28",
              "size": 32,
              "description": "LPTIM repetition register"
            },
            "LPTIM1_CCMR1": {
              "offset": "0x2C",
              "size": 32,
              "description": "LPTIM capture/compare mode register 1"
            },
            "LPTIM1_CCMR2": {
              "offset": "0x30",
              "size": 32,
              "description": "LPTIM capture/compare mode register 2"
            },
            "LPTIM1_CCR2": {
              "offset": "0x34",
              "size": 32,
              "description": "LPTIM compare register 2"
            },
            "LPTIM1_CCR3": {
              "offset": "0x38",
              "size": 32,
              "description": "LPTIM compare register 3"
            },
            "LPTIM1_CCR4": {
              "offset": "0x3C",
              "size": 32,
              "description": "LPTIM compare register 4"
            }
          },
          "bits": {
            "LPTIM1_ISR_OUTPUT": {
              "CC1IF": {
                "bit": 0,
                "description": "Compare 1 interrupt flag\nIf channel CC1 is configured as output:\nThe CC1IF flag is set by hardware to inform application that LPTIM_CNT register value matches the compare register's value. CC1IF flag can be cleared by writing 1 to the CC1CF bit in the LPTIM_ICR register."
              },
              "ARRM": {
                "bit": 1,
                "description": "Autoreload match\nARRM is set by hardware to inform application that LPTIM_CNT registers value reached the LPTIM_ARR registers value. ARRM flag can be cleared by writing 1 to the ARRMCF bit in the LPTIM_ICR register."
              },
              "EXTTRIG": {
                "bit": 2,
                "description": "External trigger edge event\nEXTTRIG is set by hardware to inform application that a valid edge on the selected external trigger input has occurred. If the trigger is ignored because the timer has already started, then this flag is not set. EXTTRIG flag can be cleared by writing 1 to the EXTTRIGCF bit in the LPTIM_ICR register."
              },
              "CMP1OK": {
                "bit": 3,
                "description": "Compare register 1 update OK\nCMP1OK is set by hardware to inform application that the APB bus write operation to the LPTIM_CCR1 register has been successfully completed. CMP1OK flag can be cleared by writing 1 to the CMP1OKCF bit in the LPTIM_ICR register."
              },
              "ARROK": {
                "bit": 4,
                "description": "Autoreload register update OK\nARROK is set by hardware to inform application that the APB bus write operation to the LPTIM_ARR register has been successfully completed. ARROK flag can be cleared by writing 1 to the ARROKCF bit in the LPTIM_ICR register."
              },
              "UP": {
                "bit": 5,
                "description": "Counter direction change down to up\nIn Encoder mode, UP bit is set by hardware to inform application that the counter direction has changed from down to up. UP flag can be cleared by writing 1 to the UPCF bit in the LPTIM_ICR register.\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "DOWN": {
                "bit": 6,
                "description": "Counter direction change up to down\nIn Encoder mode, DOWN bit is set by hardware to inform application that the counter direction has changed from up to down. DOWN flag can be cleared by writing 1 to the DOWNCF bit in the LPTIM_ICR register.\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "UE": {
                "bit": 7,
                "description": "LPTIM update event occurred\nUE is set by hardware to inform application that an update event was generated. The corresponding interrupt or DMA request is generated if enabled. UE flag can be cleared by writing 1 to the UECF bit in the LPTIM_ICR register. The UE flag is automatically cleared by hardware once the LPTIM_ARR register is written by any bus master like CPU or DMA."
              },
              "REPOK": {
                "bit": 8,
                "description": "Repetition register update OK\nREPOK is set by hardware to inform application that the APB bus write operation to the LPTIM_RCR register has been successfully completed. REPOK flag can be cleared by writing 1 to the REPOKCF bit in the LPTIM_ICR register."
              },
              "CC2IF": {
                "bit": 9,
                "description": "Compare 2 interrupt flag\nIf channel CC2 is configured as output:\nThe CC2IF flag is set by hardware to inform application that LPTIM_CNT register value matches the\ncompare register's value. CC2IF flag can be cleared by writing 1 to the CC2CF bit in the LPTIM_ICR register.\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CC3IF": {
                "bit": 10,
                "description": "Compare 3 interrupt flag\nIf channel CC3 is configured as output:\nThe CC3IF flag is set by hardware to inform application that LPTIM_CNT register value matches the compare register's value. CC3IF flag can be cleared by writing 1 to the CC3CF bit in the LPTIM_ICR register.\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CC4IF": {
                "bit": 11,
                "description": "Compare 4 interrupt flag\nIf channel CC4 is configured as output:\nThe CC4IF flag is set by hardware to inform application that LPTIM_CNT register value matches the compare register's value. CC4IF flag can be cleared by writing 1 to the CC4CF bit in the LPTIM_ICR register.\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "CMP2OK": {
                "bit": 19,
                "description": "Compare register 2 update OK\nCMP2OK is set by hardware to inform application that the APB bus write operation to the LPTIM_CCR2 register has been successfully completed. CMP2OK flag can be cleared by writing 1 to the CMP2OKCF bit in the LPTIM_ICR register.\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CMP3OK": {
                "bit": 20,
                "description": "Compare register 3 update OK\nCMP3OK is set by hardware to inform application that the APB bus write operation to the LPTIM_CCR3 register has been successfully completed. CMP3OK flag can be cleared by writing 1 to the CMP3OKCF bit in the LPTIM_ICR register.\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CMP4OK": {
                "bit": 21,
                "description": "Compare register 4 update OK\nCMP4OK is set by hardware to inform application that the APB bus write operation to the LPTIM_CCR4 register has been successfully completed. CMP4OK flag can be cleared by writing 1 to the CMP4OKCF bit in the LPTIM_ICR register.\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "DIEROK": {
                "bit": 24,
                "description": "Interrupt enable register update OK\nDIEROK is set by hardware to inform application that the APB bus write operation to the LPTIM_DIER register has been successfully completed. DIEROK flag can be cleared by writing 1 to the DIEROKCF bit in the LPTIM_ICR register."
              }
            },
            "LPTIM1_ISR_INPUT": {
              "CC1IF": {
                "bit": 0,
                "description": "capture 1 interrupt flag\nIf channel CC1 is configured as input:\nCC1IF is set by hardware to inform application that the current value of the counter is captured in LPTIM_CCR1 register. The corresponding interrupt or DMA request is generated if enabled. The CC1OF flag is set if the CC1IF flag was already high."
              },
              "ARRM": {
                "bit": 1,
                "description": "Autoreload match\nARRM is set by hardware to inform application that LPTIM_CNT registers value reached the LPTIM_ARR registers value. ARRM flag can be cleared by writing 1 to the ARRMCF bit in the LPTIM_ICR register."
              },
              "EXTTRIG": {
                "bit": 2,
                "description": "External trigger edge event\nEXTTRIG is set by hardware to inform application that a valid edge on the selected external trigger input has occurred. If the trigger is ignored because the timer has already started, then this flag is not set. EXTTRIG flag can be cleared by writing 1 to the EXTTRIGCF bit in the LPTIM_ICR register."
              },
              "ARROK": {
                "bit": 4,
                "description": "Autoreload register update OK\nARROK is set by hardware to inform application that the APB bus write operation to the LPTIM_ARR register has been successfully completed. ARROK flag can be cleared by writing 1 to the ARROKCF bit in the LPTIM_ICR register."
              },
              "UP": {
                "bit": 5,
                "description": "Counter direction change down to up\nIn Encoder mode, UP bit is set by hardware to inform application that the counter direction has changed from down to up. UP flag can be cleared by writing 1 to the UPCF bit in the LPTIM_ICR register.\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "DOWN": {
                "bit": 6,
                "description": "Counter direction change up to down\nIn Encoder mode, DOWN bit is set by hardware to inform application that the counter direction has changed from up to down. DOWN flag can be cleared by writing 1 to the DOWNCF bit in the LPTIM_ICR register.\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "UE": {
                "bit": 7,
                "description": "LPTIM update event occurred\nUE is set by hardware to inform application that an update event was generated. UE flag can be cleared by writing 1 to the UECF bit in the LPTIM_ICR register."
              },
              "REPOK": {
                "bit": 8,
                "description": "Repetition register update OK\nREPOK is set by hardware to inform application that the APB bus write operation to the LPTIM_RCR register has been successfully completed. REPOK flag can be cleared by writing 1 to the REPOKCF bit in the LPTIM_ICR register."
              },
              "CC2IF": {
                "bit": 9,
                "description": "Capture 2 interrupt flag\nIf channel CC2 is configured as input:\nCC2IF is set by hardware to inform application that the current value of the counter is captured in LPTIM_CCR2 register. The corresponding interrupt or DMA request is generated if enabled. The CC2OF flag is set if the CC2IF flag was already high.\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CC3IF": {
                "bit": 10,
                "description": "Capture 3 interrupt flag\nIf channel CC3 is configured as input:\nCC3IF is set by hardware to inform application that the current value of the counter is captured in LPTIM_CCR3 register. The corresponding interrupt or DMA request is generated if enabled. The CC3OF flag is set if the CC3IF flag was already high.\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CC4IF": {
                "bit": 11,
                "description": "Capture 4 interrupt flag\nIf channel CC4 is configured as input:\nCC4IF is set by hardware to inform application that the current value of the counter is captured in LPTIM_CCR4 register. The corresponding interrupt or DMA request is generated if enabled. The CC4OF flag is set if the CC4IF flag was already high.\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "CC1OF": {
                "bit": 12,
                "description": "Capture 1 over-capture flag\nThis flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing 1 to the CC1OCF bit in the LPTIM_ICR register.\nNote: If LPTIM does not implement at least 1 channel this bit is reserved. Refer to Section125.3."
              },
              "CC2OF": {
                "bit": 13,
                "description": "Capture 2 over-capture flag\nThis flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing 1 to the CC2OCF bit in the LPTIM_ICR register.\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CC3OF": {
                "bit": 14,
                "description": "Capture 3 over-capture flag\nThis flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing 1 to the CC3OCF bit in the LPTIM_ICR register.\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CC4OF": {
                "bit": 15,
                "description": "Capture 4 over-capture flag\nThis flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing 1 to the CC4OCF bit in the LPTIM_ICR register.\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "DIEROK": {
                "bit": 24,
                "description": "Interrupt enable register update OK\nDIEROK is set by hardware to inform application that the APB bus write operation to the LPTIM_DIER register has been successfully completed. DIEROK flag can be cleared by writing 1 to the DIEROKCF bit in the LPTIM_ICR register."
              }
            },
            "LPTIM1_ICR_OUTPUT": {
              "CC1CF": {
                "bit": 0,
                "description": "Capture/compare 1 clear flag\nWriting 1 to this bit clears the CC1IF flag in the LPTIM_ISR register."
              },
              "ARRMCF": {
                "bit": 1,
                "description": "Autoreload match clear flag\nWriting 1 to this bit clears the ARRM flag in the LPTIM_ISR register"
              },
              "EXTTRIGCF": {
                "bit": 2,
                "description": "External trigger valid edge clear flag\nWriting 1 to this bit clears the EXTTRIG flag in the LPTIM_ISR register"
              },
              "CMP1OKCF": {
                "bit": 3,
                "description": "Compare register 1 update OK clear flag\nWriting 1 to this bit clears the CMP1OK flag in the LPTIM_ISR register."
              },
              "ARROKCF": {
                "bit": 4,
                "description": "Autoreload register update OK clear flag\nWriting 1 to this bit clears the ARROK flag in the LPTIM_ISR register"
              },
              "UPCF": {
                "bit": 5,
                "description": "Direction change to UP clear flag\nWriting 1 to this bit clear the UP flag in the LPTIM_ISR register.\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "DOWNCF": {
                "bit": 6,
                "description": "Direction change to down clear flag\nWriting 1 to this bit clear the DOWN flag in the LPTIM_ISR register.\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "UECF": {
                "bit": 7,
                "description": "Update event clear flag\nWriting 1 to this bit clear the UE flag in the LPTIM_ISR register."
              },
              "REPOKCF": {
                "bit": 8,
                "description": "Repetition register update OK clear flag\nWriting 1 to this bit clears the REPOK flag in the LPTIM_ISR register."
              },
              "CC2CF": {
                "bit": 9,
                "description": "Capture/compare 2 clear flag\nWriting 1 to this bit clears the CC2IF flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CC3CF": {
                "bit": 10,
                "description": "Capture/compare 3 clear flag\nWriting 1 to this bit clears the CC3IF flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CC4CF": {
                "bit": 11,
                "description": "Capture/compare 4 clear flag\nWriting 1 to this bit clears the CC4IF flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "CMP2OKCF": {
                "bit": 19,
                "description": "Compare register 2 update OK clear flag\nWriting 1 to this bit clears the CMP2OK flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CMP3OKCF": {
                "bit": 20,
                "description": "Compare register 3 update OK clear flag\nWriting 1 to this bit clears the CMP3OK flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CMP4OKCF": {
                "bit": 21,
                "description": "Compare register 4 update OK clear flag\nWriting 1 to this bit clears the CMP4OK flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "DIEROKCF": {
                "bit": 24,
                "description": "Interrupt enable register update OK clear flag\nWriting 1 to this bit clears the DIEROK flag in the LPTIM_ISR register."
              }
            },
            "LPTIM1_ICR_INPUT": {
              "CC1CF": {
                "bit": 0,
                "description": "Capture/compare 1 clear flag\nWriting 1 to this bit clears the CC1IF flag in the LPTIM_ISR register."
              },
              "ARRMCF": {
                "bit": 1,
                "description": "Autoreload match clear flag\nWriting 1 to this bit clears the ARRM flag in the LPTIM_ISR register"
              },
              "EXTTRIGCF": {
                "bit": 2,
                "description": "External trigger valid edge clear flag\nWriting 1 to this bit clears the EXTTRIG flag in the LPTIM_ISR register"
              },
              "ARROKCF": {
                "bit": 4,
                "description": "Autoreload register update OK clear flag\nWriting 1 to this bit clears the ARROK flag in the LPTIM_ISR register"
              },
              "UPCF": {
                "bit": 5,
                "description": "Direction change to UP clear flag\nWriting 1 to this bit clear the UP flag in the LPTIM_ISR register.\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "DOWNCF": {
                "bit": 6,
                "description": "Direction change to down clear flag\nWriting 1 to this bit clear the DOWN flag in the LPTIM_ISR register.\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "UECF": {
                "bit": 7,
                "description": "Update event clear flag\nWriting 1 to this bit clear the UE flag in the LPTIM_ISR register."
              },
              "REPOKCF": {
                "bit": 8,
                "description": "Repetition register update OK clear flag\nWriting 1 to this bit clears the REPOK flag in the LPTIM_ISR register."
              },
              "CC2CF": {
                "bit": 9,
                "description": "Capture/compare 2 clear flag\nWriting 1 to this bit clears the CC2IF flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CC3CF": {
                "bit": 10,
                "description": "Capture/compare 3 clear flag\nWriting 1 to this bit clears the CC3IF flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CC4CF": {
                "bit": 11,
                "description": "Capture/compare 4 clear flag\nWriting 1 to this bit clears the CC4IF flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "CC1OCF": {
                "bit": 12,
                "description": "Capture/compare 1 over-capture clear flag\nWriting 1 to this bit clears the CC1OF flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 1 channel this bit is reserved. Refer to Section125.3."
              },
              "CC2OCF": {
                "bit": 13,
                "description": "Capture/compare 2 over-capture clear flag\nWriting 1 to this bit clears the CC2OF flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CC3OCF": {
                "bit": 14,
                "description": "Capture/compare 3 over-capture clear flag\nWriting 1 to this bit clears the CC3OF flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CC4OCF": {
                "bit": 15,
                "description": "Capture/compare 4 over-capture clear flag\nWriting 1 to this bit clears the CC4OF flag in the LPTIM_ISR register.\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "DIEROKCF": {
                "bit": 24,
                "description": "Interrupt enable register update OK clear flag\nWriting 1 to this bit clears the DIEROK flag in the LPTIM_ISR register."
              }
            },
            "LPTIM1_DIER_OUTPUT": {
              "CC1IE": {
                "bit": 0,
                "description": "Capture/compare 1 interrupt enable"
              },
              "ARRMIE": {
                "bit": 1,
                "description": "Autoreload match Interrupt Enable"
              },
              "EXTTRIGIE": {
                "bit": 2,
                "description": "External trigger valid edge Interrupt Enable"
              },
              "CMP1OKIE": {
                "bit": 3,
                "description": "Compare register 1 update OK interrupt enable"
              },
              "ARROKIE": {
                "bit": 4,
                "description": "Autoreload register update OK Interrupt Enable"
              },
              "UPIE": {
                "bit": 5,
                "description": "Direction change to UP Interrupt Enable\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "DOWNIE": {
                "bit": 6,
                "description": "Direction change to down Interrupt Enable\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "UEIE": {
                "bit": 7,
                "description": "Update event interrupt enable"
              },
              "REPOKIE": {
                "bit": 8,
                "description": "Repetition register update OK interrupt Enable"
              },
              "CC2IE": {
                "bit": 9,
                "description": "Capture/compare 2 interrupt enable\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CC3IE": {
                "bit": 10,
                "description": "Capture/compare 3 interrupt enable\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CC4IE": {
                "bit": 11,
                "description": "Capture/compare 4 interrupt enable\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "CMP2OKIE": {
                "bit": 19,
                "description": "Compare register 2 update OK interrupt enable\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CMP3OKIE": {
                "bit": 20,
                "description": "Compare register 3 update OK interrupt enable\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CMP4OKIE": {
                "bit": 21,
                "description": "Compare register 4 update OK interrupt enable\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "UEDE": {
                "bit": 23,
                "description": "Update event DMA request enable\nNote: If LPTIM does not implement at least 1 channel this bit is reserved. Refer to Section125.3."
              }
            },
            "LPTIM1_DIER_INPUT": {
              "CC1IE": {
                "bit": 0,
                "description": "Capture/compare 1 interrupt enable"
              },
              "ARRMIE": {
                "bit": 1,
                "description": "Autoreload match Interrupt Enable"
              },
              "EXTTRIGIE": {
                "bit": 2,
                "description": "External trigger valid edge Interrupt Enable"
              },
              "ARROKIE": {
                "bit": 4,
                "description": "Autoreload register update OK Interrupt Enable"
              },
              "UPIE": {
                "bit": 5,
                "description": "Direction change to UP Interrupt Enable\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "DOWNIE": {
                "bit": 6,
                "description": "Direction change to down Interrupt Enable\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              },
              "UEIE": {
                "bit": 7,
                "description": "Update event interrupt enable"
              },
              "REPOKIE": {
                "bit": 8,
                "description": "Repetition register update OK interrupt Enable"
              },
              "CC2IE": {
                "bit": 9,
                "description": "Capture/compare 2 interrupt enable\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CC3IE": {
                "bit": 10,
                "description": "Capture/compare 3 interrupt enable\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CC4IE": {
                "bit": 11,
                "description": "Capture/compare 4 interrupt enable\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "CC1OIE": {
                "bit": 12,
                "description": "Capture/compare 1 over-capture interrupt enable\nNote: If LPTIM does not implement at least 1 channel this bit is reserved. Refer to Section125.3."
              },
              "CC2OIE": {
                "bit": 13,
                "description": "Capture/compare 2 over-capture interrupt enable\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CC3OIE": {
                "bit": 14,
                "description": "Capture/compare 3 over-capture interrupt enable\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CC4OIE": {
                "bit": 15,
                "description": "Capture/compare 4 over-capture interrupt enable\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              },
              "CC1DE": {
                "bit": 16,
                "description": "Capture/compare 1 DMA request enable\nNote: If LPTIM does not implement at least 1 channel this bit is reserved. Refer to Section125.3."
              },
              "UEDE": {
                "bit": 23,
                "description": "Update event DMA request enable \nNote: If LPTIM does not implement at least 1 channel this bit is reserved. Refer to Section125.3."
              },
              "CC2DE": {
                "bit": 25,
                "description": "Capture/compare 2 DMA request enable\nNote: If LPTIM does not implement at least 2 channels this bit is reserved. Refer to Section125.3."
              },
              "CC3DE": {
                "bit": 26,
                "description": "Capture/compare 3 DMA request enable\nNote: If LPTIM does not implement at least 3 channels this bit is reserved. Refer to Section125.3."
              },
              "CC4DE": {
                "bit": 27,
                "description": "Capture/compare 4 DMA request enable\nNote: If LPTIM does not implement at least 4 channels this bit is reserved. Refer to Section125.3."
              }
            },
            "LPTIM1_CFGR": {
              "CKSEL": {
                "bit": 0,
                "description": "Clock selector\nThe CKSEL bit selects which clock source the LPTIM uses:"
              },
              "CKPOL": {
                "bit": 1,
                "description": "Clock Polarity\nWhen the LPTIM is clocked by an external clock source, CKPOL bits is used to configure the active edge or edges used by the counter:\nIf the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 1 is active.\nIf the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 2 is active.\nIf the LPTIM is configured in Encoder mode (ENC bit is set), the encoder sub-mode 3 is active.\nRefer to Section125.4.15: Encoder mode for more details about Encoder mode sub-modes.",
                "width": 2
              },
              "CKFLT": {
                "bit": 3,
                "description": "Configurable digital filter for external clock\nThe CKFLT value sets the number of consecutive equal samples that are detected when a level change occurs on an external clock signal before it is considered as a valid level transition. An internal clock source must be present to use this feature",
                "width": 2
              },
              "TRGFLT": {
                "bit": 6,
                "description": "Configurable digital filter for trigger\nThe TRGFLT value sets the number of consecutive equal samples that are detected when a level change occurs on an internal trigger before it is considered as a valid level transition. An internal clock source must be present to use this feature",
                "width": 2
              },
              "PRESC": {
                "bit": 9,
                "description": "Clock prescaler\nThe PRESC bits configure the prescaler division factor. It can be one among the following division factors:",
                "width": 3
              },
              "TRIGSEL": {
                "bit": 13,
                "description": "Trigger selector\nThe TRIGSEL bits select the trigger source that serves as a trigger event for the LPTIM among the below 8 available sources:\nSee Section125.4.3: LPTIM input and trigger mapping for details.",
                "width": 3
              },
              "TRIGEN": {
                "bit": 17,
                "description": "Trigger enable and polarity\nThe TRIGEN bits controls whether the LPTIM counter is started by an external trigger or not. If the external trigger option is selected, three configurations are possible for the trigger active edge:",
                "width": 2
              },
              "TIMOUT": {
                "bit": 19,
                "description": "Timeout enable\nThe TIMOUT bit controls the Timeout feature"
              },
              "WAVE": {
                "bit": 20,
                "description": "Waveform shape\nThe WAVE bit controls the output shape"
              },
              "PRELOAD": {
                "bit": 22,
                "description": "Registers update mode\nThe PRELOAD bit controls the LPTIM1_ARR, LPTIM1_RCR and the LPTIM1_CCRx registers update modality"
              },
              "COUNTMODE": {
                "bit": 23,
                "description": "counter mode enabled\nThe COUNTMODE bit selects which clock source is used by the LPTIM to clock the counter:"
              },
              "ENC": {
                "bit": 24,
                "description": "Encoder mode enable\nThe ENC bit controls the Encoder mode\nNote: If the LPTIM does not support encoder mode feature, this bit is reserved. Refer to Section125.3."
              }
            },
            "LPTIM1_CR": {
              "ENABLE": {
                "bit": 0,
                "description": "LPTIM enable\nThe ENABLE bit is set and cleared by software."
              },
              "SNGSTRT": {
                "bit": 1,
                "description": "LPTIM start in Single mode\nThis bit is set by software and cleared by hardware.\nIn case of software start (TRIGEN[1:0] = 00), setting this bit starts the LPTIM in single pulse mode.\nIf the software start is disabled (TRIGEN[1:0] different than 00), setting this bit starts the LPTIM in single pulse mode as soon as an external trigger is detected.\nIf this bit is set when the LPTIM is in continuous counting mode, then the LPTIM stops at the following match between LPTIM1_ARR and LPTIM1_CNT registers.\nThis bit can only be set when the LPTIM is enabled. It is automatically reset by hardware."
              },
              "CNTSTRT": {
                "bit": 2,
                "description": "Timer start in Continuous mode\nThis bit is set by software and cleared by hardware.\nIn case of software start (TRIGEN[1:0] = 00), setting this bit starts the LPTIM in Continuous mode.\nIf the software start is disabled (TRIGEN[1:0] different than 00), setting this bit starts the timer in Continuous mode as soon as an external trigger is detected.\nIf this bit is set when a single pulse mode counting is ongoing, then the timer does not stop at the next match between the LPTIM1_ARR and LPTIM1_CNT registers and the LPTIM counter keeps counting in Continuous mode.\nThis bit can be set only when the LPTIM is enabled. It is automatically reset by hardware."
              },
              "COUNTRST": {
                "bit": 3,
                "description": "Counter reset\nThis bit is set by software and cleared by hardware. When set to '1' this bit triggers a synchronous reset of the LPTIM1_CNT counter register. Due to the synchronous nature of this reset, it only takes place after a synchronization delay of 3 LPTimer core clock cycles (LPTimer core clock may be different from APB clock).\nThis bit can be set only when the LPTIM is enabled. It is automatically reset by hardware.\nCOUNTRST must never be set to '1' by software before it is already cleared to '0' by hardware. Software must consequently check that COUNTRST bit is already cleared to '0' before attempting to set it to '1'."
              },
              "RSTARE": {
                "bit": 4,
                "description": "Reset after read enable\nThis bit is set and cleared by software. When RSTARE is set to '1', any read access to LPTIM1_CNT register asynchronously resets LPTIM1_CNT register content.\nThis bit can be set only when the LPTIM is enabled."
              }
            },
            "LPTIM1_CCR1": {
              "CCR1": {
                "bit": 0,
                "description": "Capture/compare 1 value\nIf channel CC1 is configured as output:\nCCR1 is the value to be loaded in the capture/compare 1 register.\nDepending on the PRELOAD option, the CCR1 register is immediately updated if the PRELOAD bit is reset and updated at next LPTIM update event if PREOAD bit is reset.\nThe capture/compare register 1 contains the value to be compared to the counter LPTIM1_CNT and signaled on OC1 output.\nIf channel CC1 is configured as input:\nCCR1 becomes read-only, it contains the counter value transferred by the last input capture 1 event. The LPTIM1_CCR1 register is read-only and cannot be programmed.",
                "width": 16
              }
            },
            "LPTIM1_ARR": {
              "ARR": {
                "bit": 0,
                "description": "Auto reload value\nARR is the autoreload value for the LPTIM.\nThis value must be strictly greater than the CCRx[15:0] value.",
                "width": 16
              }
            },
            "LPTIM1_CNT": {
              "CNT": {
                "bit": 0,
                "description": "Counter value\nWhen the LPTIM is running with an asynchronous clock, reading the LPTIM1_CNT register may return unreliable values. So in this case it is necessary to perform two consecutive read accesses and verify that the two returned values are identical.",
                "width": 16
              }
            },
            "LPTIM1_CFGR2": {
              "IN1SEL": {
                "bit": 0,
                "description": "LPTIM input 1 selection\nThe IN1SEL bits control the LPTIM input 1 multiplexer, which connects LPTIM input 1 to one of the available inputs.\nFor connection details refer to Section125.4.3: LPTIM input and trigger mapping.",
                "width": 2
              },
              "IN2SEL": {
                "bit": 4,
                "description": "LPTIM input 2 selection\nThe IN2SEL bits control the LPTIM input 2 multiplexer, which connects LPTIM input 2 to one of the available inputs.\nFor connection details refer to Section125.4.3: LPTIM input and trigger mapping.",
                "width": 2
              },
              "IC1SEL": {
                "bit": 16,
                "description": "LPTIM input capture 1 selection\nThe IC1SEL bits control the LPTIM Input capture 1 multiplexer, which connects LPTIM Input capture\n1 to one of the available inputs.\nFor connection details refer to Section125.4.3: LPTIM input and trigger mapping.",
                "width": 2
              },
              "IC2SEL": {
                "bit": 20,
                "description": "LPTIM input capture 2 selection\nThe IC2SEL bits control the LPTIM Input capture 2 multiplexer, which connects LPTIM Input capture\n2 to one of the available inputs.\nFor connection details refer to Section125.4.3: LPTIM input and trigger mapping.",
                "width": 2
              }
            },
            "LPTIM1_RCR": {
              "REP": {
                "bit": 0,
                "description": "Repetition register value\nREP is the repetition value for the LPTIM.",
                "width": 8
              }
            },
            "LPTIM1_CCMR1": {
              "CC1SEL": {
                "bit": 0,
                "description": "Capture/compare 1 selection\nThis bitfield defines the direction of the channel input (capture) or output mode."
              },
              "CC1E": {
                "bit": 1,
                "description": "Capture/compare 1 output enable.\nThis bit determines if a capture of the counter value can actually be done into the input capture/compare register 1 (LPTIM1_CCR1) or not."
              },
              "CC1P": {
                "bit": 2,
                "description": "Capture/compare 1 output polarity.\nOnly bit2 is used to set polarity when output mode is enabled, bit3 is don't care.\nThis field is used to select the IC1 polarity for capture operations.",
                "width": 2
              },
              "IC1PSC": {
                "bit": 8,
                "description": "Input capture 1 prescaler\nThis bitfield defines the ratio of the prescaler acting on the CC1 input (IC1).",
                "width": 2
              },
              "IC1F": {
                "bit": 12,
                "description": "Input capture 1 filter\nThis bitfield defines the number of consecutive equal samples that are detected when a level change occurs on an external input capture signal before it is considered as a valid level transition. An internal clock source must be present to use this feature.",
                "width": 2
              },
              "CC2SEL": {
                "bit": 16,
                "description": "Capture/compare 2 selection\nThis bitfield defines the direction of the channel, input (capture) or output mode."
              },
              "CC2E": {
                "bit": 17,
                "description": "Capture/compare 2 output enable.\nThis bit determines if a capture of the counter value can actually be done into the input capture/compare register 2 (LPTIM1_CCR2) or not."
              },
              "CC2P": {
                "bit": 18,
                "description": "Capture/compare 2 output polarity.\nOnly bit2 is used to set polarity when output mode is enabled, bit3 is don't care.\nThis field is used to select the IC2 polarity for capture operations.",
                "width": 2
              },
              "IC2PSC": {
                "bit": 24,
                "description": "Input capture 2 prescaler\nThis bitfield defines the ratio of the prescaler acting on the CC2 input (IC2).",
                "width": 2
              },
              "IC2F": {
                "bit": 28,
                "description": "Input capture 2 filter\nThis bitfield defines the number of consecutive equal samples that are detected when a level change occurs on an external input capture signal before it is considered as a valid level transition. An internal clock source must be present to use this feature.",
                "width": 2
              }
            },
            "LPTIM1_CCMR2": {
              "CC3SEL": {
                "bit": 0,
                "description": "Capture/compare 3 selection\nThis bitfield defines the direction of the channel input (capture) or output mode."
              },
              "CC3E": {
                "bit": 1,
                "description": "Capture/compare 3 output enable.\nCondition: CC3 as output:\nCondition: CC3 as input:\nThis bit determines if a capture of the counter value can actually be done into the input capture/compare register 3 (LPTIM1_CCR3) or not."
              },
              "CC3P": {
                "bit": 2,
                "description": "Capture/compare 3 output polarity.\nCondition: CC3 as output:\nOnly bit2 is used to set polarity when output mode is enabled, bit3 is don't care.\nCondition: CC3 as input:\nThis field is used to select the IC3 polarity for capture operations.",
                "width": 2
              },
              "IC3PSC": {
                "bit": 8,
                "description": "Input capture 3 prescaler\nThis bitfield defines the ratio of the prescaler acting on the CC3 input (IC3).",
                "width": 2
              },
              "IC3F": {
                "bit": 12,
                "description": "Input capture 3 filter\nThis bitfield defines the number of consecutive equal samples that should be detected when a level change occurs on an external input capture signal before it is considered as a valid level transition. An internal clock source must be present to use this feature.",
                "width": 2
              },
              "CC4SEL": {
                "bit": 16,
                "description": "Capture/compare 4 selection\nThis bitfield defines the direction of the channel, input (capture) or output mode."
              },
              "CC4E": {
                "bit": 17,
                "description": "Capture/compare 4 output enable.\nCondition: CC4 as output:\nCondition: CC4 as input:\nThis bit determines if a capture of the counter value can actually be done into the input capture/compare register 4 (LPTIM1_CCR4) or not."
              },
              "CC4P": {
                "bit": 18,
                "description": "Capture/compare 4 output polarity.\nCondition: CC4 as output:\nOnly bit2 is used to set polarity when output mode is enabled, bit3 is don't care.\nCondition: CC4 as input:\nThis field is used to select the IC4 polarity for capture operations.",
                "width": 2
              },
              "IC4PSC": {
                "bit": 24,
                "description": "Input capture 4 prescaler\nThis bitfield defines the ratio of the prescaler acting on the CC4 input (IC4).",
                "width": 2
              },
              "IC4F": {
                "bit": 28,
                "description": "Input capture 4 filter\nThis bitfield defines the number of consecutive equal samples that should be detected when a level change occurs on an external input capture signal before it is considered as a valid level transition. An internal clock source must be present to use this feature.",
                "width": 2
              }
            },
            "LPTIM1_CCR2": {
              "CCR2": {
                "bit": 0,
                "description": "Capture/compare 2 value\nIf channel CC2 is configured as output:\nCCR2 is the value to be loaded in the capture/compare 2 register.\nDepending on the PRELOAD option, the CCR2 register is immediately updated if the PRELOAD bit is reset and updated at next LPTIM update event if PREOAD bit is reset.\nThe capture/compare register 2 contains the value to be compared to the counter LPTIM1_CNT and signaled on OC2 output.\nIf channel CC2 is configured as input:\nCCR2 becomes read-only, it contains the counter value transferred by the last input capture 2 event. The LPTIM1_CCR2 register is read-only and cannot be programmed.",
                "width": 16
              }
            },
            "LPTIM1_CCR3": {
              "CCR3": {
                "bit": 0,
                "description": "Capture/compare 3 value\nIf channel CC3 is configured as output:\nCCR3 is the value to be loaded in the capture/compare 3 register.\nDepending on the PRELOAD option, the CCR3 register is immediately updated if the PRELOAD bit is reset and updated at next LPTIM update event if PREOAD bit is reset.\nThe capture/compare register 3 contains the value to be compared to the counter LPTIM1_CNT and signaled on OC3 output.\nIf channel CC3 is configured as input:\nCCR3 becomes read-only, it contains the counter value transferred by the last input capture 3 event. The LPTIM1_CCR3 register is read-only and cannot be programmed.",
                "width": 16
              }
            },
            "LPTIM1_CCR4": {
              "CCR4": {
                "bit": 0,
                "description": "Capture/compare 4 value\nIf channel CC4 is configured as output:\nCCR4 is the value to be loaded in the capture/compare 4 register.\nDepending on the PRELOAD option, the CCR4 register is immediately updated if the PRELOAD bit is reset and updated at next LPTIM update event if PREOAD bit is reset.\nThe capture/compare register 4 contains the value to be compared to the counter LPTIM1_CNT and signaled on OC4 output.\nIf channel CC4 is configured as input:\nCCR4 becomes read-only, it contains the counter value transferred by the last input capture 4 event. The LPTIM1_CCR4 register is read-only and cannot be programmed.",
                "width": 16
              }
            }
          }
        },
        "USART": {
          "instances": [
            {
              "name": "LPUART1",
              "base": "0x40008000"
            },
            {
              "name": "LPUART2",
              "base": "0x40008400"
            },
            {
              "name": "LPUART3",
              "base": "0x40008C00"
            },
            {
              "name": "USART1",
              "base": "0x40013800",
              "irq": 27
            },
            {
              "name": "USART2",
              "base": "0x40004400",
              "irq": 28
            },
            {
              "name": "USART3",
              "base": "0x40004800",
              "irq": 29
            },
            {
              "name": "USART4",
              "base": "0x40004C00",
              "irq": 30
            }
          ],
          "registers": {
            "LPUART_CR1": {
              "offset": "0x00",
              "size": 32,
              "description": "LPUART control register 1"
            },
            "LPUART_CR1_ALTERNATE": {
              "offset": "0x00",
              "size": 32,
              "description": "LPUART control register 1"
            },
            "LPUART_CR2": {
              "offset": "0x04",
              "size": 32,
              "description": "LPUART control register 2"
            },
            "LPUART_CR3": {
              "offset": "0x08",
              "size": 32,
              "description": "LPUART control register 3"
            },
            "LPUART_BRR": {
              "offset": "0x0C",
              "size": 32,
              "description": "LPUART baud rate register"
            },
            "LPUART_RQR": {
              "offset": "0x18",
              "size": 32,
              "description": "LPUART request register"
            },
            "LPUART_ISR": {
              "offset": "0x1C",
              "size": 32,
              "description": "LPUART interrupt and status register"
            },
            "LPUART_ISR_ALTERNATE": {
              "offset": "0x1C",
              "size": 32,
              "description": "LPUART interrupt and status register"
            },
            "LPUART_ICR": {
              "offset": "0x20",
              "size": 32,
              "description": "LPUART interrupt flag clear register"
            },
            "LPUART_RDR": {
              "offset": "0x24",
              "size": 32,
              "description": "LPUART receive data register"
            },
            "LPUART_TDR": {
              "offset": "0x28",
              "size": 32,
              "description": "LPUART transmit data register"
            },
            "LPUART_PRESC": {
              "offset": "0x2C",
              "size": 32,
              "description": "LPUART prescaler register"
            }
          },
          "bits": {
            "LPUART_CR1": {
              "UE": {
                "bit": 0,
                "description": "LPUART enable\nWhen this bit is cleared, the LPUART prescalers and outputs are stopped immediately, and current operations are discarded. The configuration of the LPUART is kept, but all the status flags, in the LPUART_ISR are reset. This bit is set and cleared by software.\nNote: To enter low-power mode without generating errors on the line, the TE bit must be reset before and the software must wait for the TC bit in the LPUART_ISR to be set before resetting the UE bit. \nNote: The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit."
              },
              "UESM": {
                "bit": 1,
                "description": "LPUART enable in low-power mode \nWhen this bit is cleared, the LPUART cannot wake up the MCU from low-power mode.\nWhen this bit is set, the LPUART can wake up the MCU from low-power mode.\nThis bit is set and cleared by software.\nNote: It is recommended to set the UESM bit just before entering low-power mode, and clear it when exiting low-power mode."
              },
              "RE": {
                "bit": 2,
                "description": "Receiver enable\nThis bit enables the receiver. It is set and cleared by software."
              },
              "TE": {
                "bit": 3,
                "description": "Transmitter enable\nThis bit enables the transmitter. It is set and cleared by software.\nNote: During transmission, a low pulse on the TE bit (0 followed by 1) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to 1. To ensure the required duration, the software can poll the TEACK bit in the LPUART_ISR register.\nNote: In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts."
              },
              "IDLEIE": {
                "bit": 4,
                "description": "IDLE interrupt enable\nThis bit is set and cleared by software."
              },
              "RXFNEIE": {
                "bit": 5,
                "description": "RXFIFO not empty interrupt enable\nThis bit is set and cleared by software."
              },
              "TCIE": {
                "bit": 6,
                "description": "Transmission complete interrupt enable\nThis bit is set and cleared by software."
              },
              "TXFNFIE": {
                "bit": 7,
                "description": "TXFIFO not full interrupt enable\nThis bit is set and cleared by software."
              },
              "PEIE": {
                "bit": 8,
                "description": "PE interrupt enable\nThis bit is set and cleared by software."
              },
              "PS": {
                "bit": 9,
                "description": "Parity selection\nThis bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.\nThis bitfield can only be written when the LPUART is disabled (UE=0)."
              },
              "PCE": {
                "bit": 10,
                "description": "Parity control enable\nThis bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M=1; 8th bit if M=0) and parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).\nThis bitfield can only be written when the LPUART is disabled (UE=0)."
              },
              "WAKE": {
                "bit": 11,
                "description": "Receiver wake-up method\nThis bit determines the LPUART wake-up method from Mute mode. It is set or cleared by software.\t\nThis bitfield can only be written when the LPUART is disabled (UE=0)."
              },
              "M0": {
                "bit": 12,
                "description": "Word length\nThis bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1) description).\nThis bit can only be written when the LPUART is disabled (UE=0)."
              },
              "MME": {
                "bit": 13,
                "description": "Mute mode enable\nThis bit activates the Mute mode function of the LPUART. When set, the LPUART can switch between the active and Mute modes, as defined by the WAKE bit. It is set and cleared by software."
              },
              "CMIE": {
                "bit": 14,
                "description": "Character match interrupt enable\nThis bit is set and cleared by software."
              },
              "DEDT": {
                "bit": 16,
                "description": "Driver Enable deassertion time\nThis 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal.It is expressed in lpuart_ker_ck clock cycles. For more details, refer Section132.4.14: RS232 Hardware flow control and RS485 Driver Enable.\nIf the LPUART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield can only be written when the LPUART is disabled (UE=0).",
                "width": 5
              },
              "DEAT": {
                "bit": 21,
                "description": "Driver Enable assertion time\nThis 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in lpuart_ker_ck clock cycles. For more details, refer Section131.5.21: RS232 Hardware flow control and RS485 Driver Enable.\nThis bitfield can only be written when the LPUART is disabled (UE=0).",
                "width": 5
              },
              "M1": {
                "bit": 28,
                "description": "Word length\nThis bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.\nM[1:0] = 00: 1 Start bit, 8 Data bits, n Stop bit\nM[1:0] = 01: 1 Start bit, 9 Data bits, n Stop bit\nM[1:0] = 10: 1 Start bit, 7 Data bits, n Stop bit\nThis bit can only be written when the LPUART is disabled (UE=0).\nNote: In 7-bit data length mode, the Smartcard mode, LIN master mode and auto baud rate (0x7F and 0x55 frames detection) are not supported."
              },
              "FIFOEN": {
                "bit": 29,
                "description": "FIFO mode enable\nThis bit is set and cleared by software."
              },
              "TXFEIE": {
                "bit": 30,
                "description": "TXFIFO empty interrupt enable\nThis bit is set and cleared by software."
              },
              "RXFFIE": {
                "bit": 31,
                "description": "RXFIFO Full interrupt enable\nThis bit is set and cleared by software."
              }
            },
            "LPUART_CR1_ALTERNATE": {
              "UE": {
                "bit": 0,
                "description": "LPUART enable\nWhen this bit is cleared, the LPUART prescalers and outputs are stopped immediately, and current operations are discarded. The configuration of the LPUART is kept, but all the status flags, in the LPUART_ISR are reset. This bit is set and cleared by software.\nNote: To enter low-power mode without generating errors on the line, the TE bit must be reset before and the software must wait for the TC bit in the LPUART_ISR to be set before resetting the UE bit. \nNote: The DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit."
              },
              "UESM": {
                "bit": 1,
                "description": "LPUART enable in low-power mode \nWhen this bit is cleared, the LPUART cannot wake up the MCU from low-power mode.\nWhen this bit is set, the LPUART can wake up the MCU from low-power mode.\nThis bit is set and cleared by software.\nNote: It is recommended to set the UESM bit just before entering low-power mode, and clear it when exiting low-power mode."
              },
              "RE": {
                "bit": 2,
                "description": "Receiver enable\nThis bit enables the receiver. It is set and cleared by software."
              },
              "TE": {
                "bit": 3,
                "description": "Transmitter enable\nThis bit enables the transmitter. It is set and cleared by software.\nNote: During transmission, a low pulse on the TE bit (0 followed by 1) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to 1. To ensure the required duration, the software can poll the TEACK bit in the LPUART_ISR register.\nNote: In Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts."
              },
              "IDLEIE": {
                "bit": 4,
                "description": "IDLE interrupt enable\nThis bit is set and cleared by software."
              },
              "RXNEIE": {
                "bit": 5,
                "description": "Receive data register not empty\nThis bit is set and cleared by software."
              },
              "TCIE": {
                "bit": 6,
                "description": "Transmission complete interrupt enable\nThis bit is set and cleared by software."
              },
              "TXEIE": {
                "bit": 7,
                "description": "Transmit data register empty\nThis bit is set and cleared by software."
              },
              "PEIE": {
                "bit": 8,
                "description": "PE interrupt enable\nThis bit is set and cleared by software."
              },
              "PS": {
                "bit": 9,
                "description": "Parity selection\nThis bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.\nThis bitfield can only be written when the LPUART is disabled (UE=0)."
              },
              "PCE": {
                "bit": 10,
                "description": "Parity control enable\nThis bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M=1; 8th bit if M=0) and parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).\nThis bitfield can only be written when the LPUART is disabled (UE=0)."
              },
              "WAKE": {
                "bit": 11,
                "description": "Receiver wake-up method\nThis bit determines the LPUART wake-up method from Mute mode. It is set or cleared by software.\t\nThis bitfield can only be written when the LPUART is disabled (UE=0)."
              },
              "M0": {
                "bit": 12,
                "description": "Word length\nThis bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1) description).\nThis bit can only be written when the LPUART is disabled (UE=0)."
              },
              "MME": {
                "bit": 13,
                "description": "Mute mode enable\nThis bit activates the Mute mode function of the LPUART. When set, the LPUART can switch between the active and Mute modes, as defined by the WAKE bit. It is set and cleared by software."
              },
              "CMIE": {
                "bit": 14,
                "description": "Character match interrupt enable\nThis bit is set and cleared by software."
              },
              "DEDT": {
                "bit": 16,
                "description": "Driver Enable deassertion time\nThis 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal.It is expressed in lpuart_ker_ck clock cycles. For more details, refer Section132.4.14: RS232 Hardware flow control and RS485 Driver Enable.\nIf the LPUART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield can only be written when the LPUART is disabled (UE=0).",
                "width": 5
              },
              "DEAT": {
                "bit": 21,
                "description": "Driver Enable assertion time\nThis 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in lpuart_ker_ck clock cycles. For more details, refer Section131.5.21: RS232 Hardware flow control and RS485 Driver Enable.\nThis bitfield can only be written when the LPUART is disabled (UE=0).",
                "width": 5
              },
              "M1": {
                "bit": 28,
                "description": "Word length\nThis bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.\nM[1:0] = 00: 1 Start bit, 8 Data bits, n Stop bit\nM[1:0] = 01: 1 Start bit, 9 Data bits, n Stop bit\nM[1:0] = 10: 1 Start bit, 7 Data bits, n Stop bit\nThis bit can only be written when the LPUART is disabled (UE=0).\nNote: In 7-bit data length mode, the Smartcard mode, LIN master mode and auto baud rate (0x7F and 0x55 frames detection) are not supported."
              },
              "FIFOEN": {
                "bit": 29,
                "description": "FIFO mode enable\nThis bit is set and cleared by software."
              }
            },
            "LPUART_CR2": {
              "ADDM7": {
                "bit": 4,
                "description": "7-bit Address Detection/4-bit Address Detection\nThis bit is for selection between 4-bit address detection or 7-bit address detection. \nThis bit can only be written when the LPUART is disabled (UE=0)\nNote: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively."
              },
              "STOP": {
                "bit": 12,
                "description": "STOP bits\nThese bits are used for programming the stop bits.\nThis bitfield can only be written when the LPUART is disabled (UE=0).",
                "width": 2
              },
              "SWAP": {
                "bit": 15,
                "description": "Swap TX/RX pins\nThis bit is set and cleared by software.\nThis bitfield can only be written when the LPUART is disabled (UE=0)."
              },
              "RXINV": {
                "bit": 16,
                "description": "RX pin active level inversion\nThis bit is set and cleared by software.\nThis enables the use of an external inverter on the RX line. \nThis bitfield can only be written when the LPUART is disabled (UE=0)."
              },
              "TXINV": {
                "bit": 17,
                "description": "TX pin active level inversion\nThis bit is set and cleared by software.\nThis enables the use of an external inverter on the TX line. \nThis bitfield can only be written when the LPUART is disabled (UE=0)."
              },
              "DATAINV": {
                "bit": 18,
                "description": "Binary data inversion\nThis bit is set and cleared by software.\nThis bitfield can only be written when the LPUART is disabled (UE=0)."
              },
              "MSBFIRST": {
                "bit": 19,
                "description": "Most significant bit first\nThis bit is set and cleared by software.\nThis bitfield can only be written when the LPUART is disabled (UE=0)."
              },
              "ADD": {
                "bit": 24,
                "description": "Address of the LPUART node \nThese bits give the address of the LPUART node in Mute mode or a character code to be recognized in low-power or Run mode:\nIn Mute mode: they are used in multiprocessor communication to wake up from Mute mode with 4-bit/7-bit address mark detection. The MSB of the character sent by the transmitter should be equal to 1. In 4-bit address mark detection, only ADD[3:0] bits are used.\nIn low-power mode: they are used for wake up from low-power mode on character match.\nWhen WUS[1:0] is programmed to 0b00 (WUF active on address match), the wake-up from low-power mode is performed when the received character corresponds to the character programmed through ADD[6:0] or ADD[3:0] bitfield (depending on ADDM7 bit), and WUF interrupt is enabled by setting WUFIE bit. The MSB of the character sent by transmitter should be equal to 1.\nIn Run mode with Mute mode inactive (for example, end-of-block detection in ModBus protocol): the whole received character (8 bits) is compared to ADD[7:0] value and CMF flag is set on match. An interrupt is generated if the CMIE bit is set.\nThese bits can only be written when the reception is disabled (RE1=10) or when the USART is disabled (UE1=10).",
                "width": 8
              }
            },
            "LPUART_CR3": {
              "EIE": {
                "bit": 0,
                "description": "Error interrupt enable\nError Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error or noise flag (FE=1 or ORE=1 or NE=1 in the LPUART_ISR register)."
              },
              "HDSEL": {
                "bit": 3,
                "description": "Half-duplex selection\nSelection of Single-wire Half-duplex mode \nThis bit can only be written when the LPUART is disabled (UE=0)."
              },
              "DMAR": {
                "bit": 6,
                "description": "DMA enable receiver\nThis bit is set/reset by software"
              },
              "DMAT": {
                "bit": 7,
                "description": "DMA enable transmitter\nThis bit is set/reset by software"
              },
              "RTSE": {
                "bit": 8,
                "description": "RTS enable\nThis bit can only be written when the LPUART is disabled (UE=0)."
              },
              "CTSE": {
                "bit": 9,
                "description": "CTS enable\nThis bit can only be written when the LPUART is disabled (UE=0)"
              },
              "CTSIE": {
                "bit": 10,
                "description": "CTS interrupt enable"
              },
              "OVRDIS": {
                "bit": 12,
                "description": "Overrun Disable\nThis bit is used to disable the receive overrun detection. \nthe ORE flag is not set and the new received data overwrites the previous content of the LPUART_RDR register.\nThis bit can only be written when the LPUART is disabled (UE=0).\nNote: This control bit enables checking the communication flow w/o reading the data."
              },
              "DDRE": {
                "bit": 13,
                "description": "DMA Disable on Reception Error\nThis bit can only be written when the LPUART is disabled (UE=0).\nNote: The reception errors are: parity error, framing error or noise error."
              },
              "DEM": {
                "bit": 14,
                "description": "Driver enable mode \nThis bit enables the user to activate the external transceiver control, through the DE signal. \nThis bit can only be written when the LPUART is disabled (UE=0)."
              },
              "DEP": {
                "bit": 15,
                "description": "Driver enable polarity selection\nThis bit can only be written when the LPUART is disabled (UE=0)."
              },
              "WUS0": {
                "bit": 20,
                "description": "Wake-up from low-power mode interrupt flag selection\nThis bitfield specifies the event which activates the WUF (Wake-up from low-power mode flag). \nThis bitfield can only be written when the LPUART is disabled (UE=0).\nNote: If the USART does not support the wake-up from Stop feature, this bit is reserved and must be kept at reset value. Refer to Section132.3: LPUART implementation on page1914."
              },
              "WUS1": {
                "bit": 21,
                "description": "Wake-up from low-power mode interrupt flag selection\nThis bitfield specifies the event which activates the WUF (Wake-up from low-power mode flag). \nThis bitfield can only be written when the LPUART is disabled (UE=0).\nNote: If the USART does not support the wake-up from Stop feature, this bit is reserved and must be kept at reset value. Refer to Section132.3: LPUART implementation on page1914."
              },
              "WUFIE": {
                "bit": 22,
                "description": "Wake-up from low-power mode interrupt enable\nThis bit is set and cleared by software.\nNote: WUFIE must be set before entering in low-power mode.\nNote: If the USART does not support the wake-up from Stop feature, this bit is reserved and must be kept at reset value. Refer to Section132.3: LPUART implementation on page1914."
              },
              "TXFTIE": {
                "bit": 23,
                "description": "TXFIFO threshold interrupt enable\nThis bit is set and cleared by software."
              },
              "RXFTCFG": {
                "bit": 25,
                "description": "Receive FIFO threshold configuration\nRemaining combinations: Reserved.",
                "width": 3
              },
              "RXFTIE": {
                "bit": 28,
                "description": "RXFIFO threshold interrupt enable\nThis bit is set and cleared by software."
              },
              "TXFTCFG": {
                "bit": 29,
                "description": "TXFIFO threshold configuration\nRemaining combinations: Reserved.",
                "width": 3
              }
            },
            "LPUART_BRR": {
              "BRR": {
                "bit": 0,
                "description": "LPUART baud rate division (LPUARTDIV)",
                "width": 20
              }
            },
            "LPUART_RQR": {
              "SBKRQ": {
                "bit": 1,
                "description": "Send break request\nWriting 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available.\nNote: If the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software must wait for the TXE flag assertion before setting the SBKRQ bit."
              },
              "MMRQ": {
                "bit": 2,
                "description": "Mute mode request\nWriting 1 to this bit puts the LPUART in Mute mode and resets the RWU flag."
              },
              "RXFRQ": {
                "bit": 3,
                "description": "Receive data flush request\nWriting 1 to this bit clears the RXNE flag. \nThis enables discarding the received data without reading it, and avoid an overrun condition."
              },
              "TXFRQ": {
                "bit": 4,
                "description": "Transmit data flush request\nThis bit is used when FIFO mode is enabled. TXFRQ bit is set to flush the whole FIFO. This sets the flag TXFE (TXFIFO empty, bit 23 in the LPUART_ISR register). \nNote: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register."
              }
            },
            "LPUART_ISR": {
              "PE": {
                "bit": 0,
                "description": "Parity error\nThis bit is set by hardware when a parity error occurs in Reception mode. It is cleared by software, writing 1 to the PECF in the LPUART_ICR register. \nAn interrupt is generated if PEIE = 1 in the LPUART_CR1 register.\nNote: This error is associated with the character in the LPUART_RDR."
              },
              "FE": {
                "bit": 1,
                "description": "Framing error\nThis bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the LPUART_ICR register.\nWhen transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).\nAn interrupt is generated if EIE1=11 in the LPUART_CR3 register.\nNote: This error is associated with the character in the LPUART_RDR."
              },
              "NE": {
                "bit": 2,
                "description": "Start bit noise detection flag\nThis bit is set by hardware when noise is detected on the start bit of a received frame. It is cleared by software, writing 1 to the NFCF bit in the LPUART_ICR register.\nNote: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set. \nNote: This error is associated with the character in the LPUART_RDR."
              },
              "ORE": {
                "bit": 3,
                "description": "Overrun error\nThis bit is set by hardware when the data currently being received in the shift register is\nready to be transferred into the LPUART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the LPUART_ICR register.\nAn interrupt is generated if RXFNEIE=1 in the LPUART_CR1 register, or EIE = 1 in the LPUART_CR3 register.\nNote: When this bit is set, the LPUART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.\nNote: This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the LPUART_CR3 register."
              },
              "IDLE": {
                "bit": 4,
                "description": "Idle line detected\nThis bit is set by hardware when an Idle line is detected. An interrupt is generated if IDLEIE=1 in the LPUART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the LPUART_ICR register. \nNote: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs).\nNote: If Mute mode is enabled (MME=1), IDLE is set if the LPUART is not mute (RWU=0), whatever the Mute mode selected by the WAKE bit. If RWU=1, IDLE is not set."
              },
              "RXFNE": {
                "bit": 5,
                "description": "RXFIFO not empty\nRXFNE bit is set by hardware when the RXFIFO is not empty, and so data can be read from the LPUART_RDR register. Every read of the LPUART_RDR frees a location in the RXFIFO. It is cleared when the RXFIFO is empty. \nThe RXFNE flag can also be cleared by writing 1 to the RXFRQ in the LPUART_RQR register. \nAn interrupt is generated if RXFNEIE=1 in the LPUART_CR1 register."
              },
              "TC": {
                "bit": 6,
                "description": "Transmission complete\nThis bit indicates that the last data written in the LPUART_TDR has been transmitted out of the shift register. The TC flag behaves as follows:\nWhen TDN = 0, the TC flag is set when the transmission of a frame containing data is complete and when TXFE is set.\nWhen TDN is equal to the number of data in the TXFIFO, the TC flag is set when TXFIFO is empty and TDN is reached.\nWhen TDN is greater than the number of data in the TXFIFO, TC remains cleared until the TXFIFO is filled again to reach the programmed number of data to be transferred. \nWhen TDN is less than the number of data in the TXFIFO, TC is set when TDN is reached even if the TXFIFO is not empty.\nAn interrupt is generated if TCIE=1 in the LPUART_CR1 register.\nTC bit is cleared by software by writing 1 to the TCCF in the LPUART_ICR register or by writing to the LPUART_TDR register."
              },
              "TXFNF": {
                "bit": 7,
                "description": "TXFIFO not full\nTXFNF is set by hardware when TXFIFO is not full, and so data can be written in the LPUART_TDR. Every write in the LPUART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the LPUART_TDR. \nThe TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF must be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time).\nAn interrupt is generated if the TXFNFIE bit =1 in the LPUART_CR1 register. \nNote: This bit is used during single buffer transmission."
              },
              "CTSIF": {
                "bit": 9,
                "description": "CTS interrupt flag\nThis bit is set by hardware when the CTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the LPUART_ICR register. \nAn interrupt is generated if CTSIE=1 in the LPUART_CR3 register.\nNote: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value."
              },
              "CTS": {
                "bit": 10,
                "description": "CTS flag\nThis bit is set/reset by hardware. It is an inverted copy of the status of the CTS input pin. \nNote: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value."
              },
              "BUSY": {
                "bit": 16,
                "description": "Busy flag\nThis bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not)."
              },
              "CMF": {
                "bit": 17,
                "description": "Character match flag\nThis bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the LPUART_ICR register. \nAn interrupt is generated if CMIE=1in the LPUART_CR1 register."
              },
              "SBKF": {
                "bit": 18,
                "description": "Send break flag\nThis bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the LPUART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission."
              },
              "RWU": {
                "bit": 19,
                "description": "Receiver wake-up from Mute mode\nThis bit indicates if the LPUART is in Mute mode. It is cleared/set by hardware when a wake-up/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the LPUART_CR1 register.\nWhen wake-up on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the LPUART_RQR register. \nNote: If the LPUART does not support the wake-up from Stop feature, this bit is reserved and kept at reset value."
              },
              "WUF": {
                "bit": 20,
                "description": "Wake-up from low-power mode flag \nThis bit is set by hardware, when a wake-up event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the LPUART_ICR register.\nAn interrupt is generated if WUFIE=1 in the LPUART_CR3 register. \nNote: When UESM is cleared, WUF flag is also cleared.\nNote: If the USART does not support the wake-up from Stop feature, this bit is reserved and kept at reset value. Refer to Section132.3: LPUART implementation on page1914."
              },
              "TEACK": {
                "bit": 21,
                "description": "Transmit enable acknowledge flag \nThis bit is set/reset by hardware, when the Transmit Enable value is taken into account by the LPUART. \nIt can be used when an idle frame request is generated by writing TE=0, followed by TE=1 in the LPUART_CR1 register, in order to respect the TE=0 minimum period."
              },
              "REACK": {
                "bit": 22,
                "description": "Receive enable acknowledge flag \nThis bit is set/reset by hardware, when the Receive Enable value is taken into account by the LPUART. \nIt can be used to verify that the LPUART is ready for reception before entering low-power mode.\nNote: If the LPUART does not support the wake-up from Stop feature, this bit is reserved and kept at reset value."
              },
              "TXFE": {
                "bit": 23,
                "description": "TXFIFO Empty\nThis bit is set by hardware when TXFIFO is Empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the LPUART_RQR register.\nAn interrupt is generated if the TXFEIE bit =1 (bit 30) in the LPUART_CR1 register."
              },
              "RXFF": {
                "bit": 24,
                "description": "RXFIFO Full\nThis bit is set by hardware when the number of received data corresponds to RXFIFO1size1+11 (RXFIFO full + 1 data in the LPUART_RDR register. \nAn interrupt is generated if the RXFFIE bit =1 in the LPUART_CR1 register."
              },
              "RXFT": {
                "bit": 26,
                "description": "RXFIFO threshold flag\nThis bit is set by hardware when the RXFIFO reaches the threshold programmed in RXFTCFG in LPUART_CR3 register i.e. the Receive FIFO contains RXFTCFG data. An interrupt is generated if the RXFTIE bit =1 (bit 27) in the LPUART_CR3 register."
              },
              "TXFT": {
                "bit": 27,
                "description": "TXFIFO threshold flag\nThis bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG in LPUART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit =1 (bit 31) in the LPUART_CR3 register."
              }
            },
            "LPUART_ISR_ALTERNATE": {
              "PE": {
                "bit": 0,
                "description": "Parity error\nThis bit is set by hardware when a parity error occurs in Reception mode. It is cleared by software, writing 1 to the PECF in the LPUART_ICR register. \nAn interrupt is generated if PEIE = 1 in the LPUART_CR1 register.\nNote: In FIFO mode, this error is associated with the character in the LPUART_RDR."
              },
              "FE": {
                "bit": 1,
                "description": "Framing error\nThis bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the LPUART_ICR register.\nWhen transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).\nAn interrupt is generated if EIE1=11 in the LPUART_CR3 register.\nNote: In FIFO mode, this error is associated with the character in the LPUART_RDR."
              },
              "NE": {
                "bit": 2,
                "description": "Start bit noise detection flag\nThis bit is set by hardware when noise is detected on the start bit of a received frame. It is cleared by software, writing 1 to the NFCF bit in the LPUART_ICR register.\nNote: This bit does not generate an interrupt as it appears at the same time as the RXNE/RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.\nNote: In FIFO mode, this error is associated with the character in the LPUART_RDR."
              },
              "ORE": {
                "bit": 3,
                "description": "Overrun error\nThis bit is set by hardware when the data currently being received in the shift register is\nready to be transferred into the LPUART_RDR register while RXNE=1 (RXFF = 1 in case FIFO mode is enabled). It is cleared by a software, writing 1 to the ORECF, in the LPUART_ICR register.\nAn interrupt is generated if RXNEIE=1 in the LPUART_CR1 register, or EIE = 1 in the LPUART_CR3 register.\nNote: When this bit is set, the LPUART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.\nNote: This bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the LPUART_CR3 register."
              },
              "IDLE": {
                "bit": 4,
                "description": "Idle line detected\nThis bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE=1 in the LPUART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the LPUART_ICR register. \nNote: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs).\nNote: If Mute mode is enabled (MME=1), IDLE is set if the LPUART is not mute (RWU=0), whatever the Mute mode selected by the WAKE bit. If RWU=1, IDLE is not set."
              },
              "RXNE": {
                "bit": 5,
                "description": "Read data register not empty\nRXNE bit is set by hardware when the content of the LPUART_RDR shift register has been transferred to the LPUART_RDR register. It is cleared by a read to the LPUART_RDR register. The\nRXNE flag can also be cleared by writing 1 to the RXFRQ in the LPUART_RQR register.\nThe RXFNE flag can also be cleared by writing 1 to the RXFRQ in the LPUART_RQR register. \nAn interrupt is generated if RXNEIE=1 in the LPUART_CR1 register."
              },
              "TC": {
                "bit": 6,
                "description": "Transmission complete\nThis bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register. The TC flag is set when the transmission of a frame containing data is complete and when TXE is set.\nAn interrupt is generated if TCIE=1 in the LPUART_CR1 register.\nTC bit is cleared by software by writing 1 to the TCCF in the USART_ICR register or by writing to the USART_TDR register."
              },
              "TXE": {
                "bit": 7,
                "description": "Transmit data register empty\nTXE is set by hardware when the content of the LPUART_TDR register has been transferred into the shift register. It is cleared by a write to the LPUART_TDR register. \nAn interrupt is generated if the TXEIE bit =1 in the LPUART_CR1 register. \nNote: This bit is used during single buffer transmission."
              },
              "CTSIF": {
                "bit": 9,
                "description": "CTS interrupt flag\nThis bit is set by hardware when the CTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the LPUART_ICR register. \nAn interrupt is generated if CTSIE=1 in the LPUART_CR3 register.\nNote: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value."
              },
              "CTS": {
                "bit": 10,
                "description": "CTS flag\nThis bit is set/reset by hardware. It is an inverted copy of the status of the CTS input pin. \nNote: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value."
              },
              "BUSY": {
                "bit": 16,
                "description": "Busy flag\nThis bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not)."
              },
              "CMF": {
                "bit": 17,
                "description": "Character match flag\nThis bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the LPUART_ICR register. \nAn interrupt is generated if CMIE=1in the LPUART_CR1 register."
              },
              "SBKF": {
                "bit": 18,
                "description": "Send break flag\nThis bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the LPUART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission."
              },
              "RWU": {
                "bit": 19,
                "description": "Receiver wake-up from Mute mode\nThis bit indicates if the LPUART is in Mute mode. It is cleared/set by hardware when a wake-up/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the LPUART_CR1 register.\nWhen wake-up on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the LPUART_RQR register. \nNote: If the LPUART does not support the wake-up from Stop feature, this bit is reserved and kept at reset value."
              },
              "WUF": {
                "bit": 20,
                "description": "Wake-up from low-power mode flag \nThis bit is set by hardware, when a wake-up event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the LPUART_ICR register.\nAn interrupt is generated if WUFIE=1 in the LPUART_CR3 register. \nNote: When UESM is cleared, WUF flag is also cleared.\nNote: If the USART does not support the wake-up from Stop feature, this bit is reserved and kept at reset value. Refer to Section132.3: LPUART implementation on page1914."
              },
              "TEACK": {
                "bit": 21,
                "description": "Transmit enable acknowledge flag \nThis bit is set/reset by hardware, when the Transmit Enable value is taken into account by the LPUART. \nIt can be used when an idle frame request is generated by writing TE=0, followed by TE=1 in the LPUART_CR1 register, in order to respect the TE=0 minimum period."
              },
              "REACK": {
                "bit": 22,
                "description": "Receive enable acknowledge flag \nThis bit is set/reset by hardware, when the Receive Enable value is taken into account by the LPUART. \nIt can be used to verify that the LPUART is ready for reception before entering low-power mode.\nNote: If the LPUART does not support the wake-up from Stop feature, this bit is reserved and kept at reset value."
              }
            },
            "LPUART_ICR": {
              "PECF": {
                "bit": 0,
                "description": "Parity error clear flag\nWriting 1 to this bit clears the PE flag in the LPUART_ISR register."
              },
              "FECF": {
                "bit": 1,
                "description": "Framing error clear flag\nWriting 1 to this bit clears the FE flag in the LPUART_ISR register."
              },
              "NECF": {
                "bit": 2,
                "description": "Noise detected clear flag\nWriting 1 to this bit clears the NE flag in the LPUART_ISR register."
              },
              "ORECF": {
                "bit": 3,
                "description": "Overrun error clear flag\nWriting 1 to this bit clears the ORE flag in the LPUART_ISR register."
              },
              "IDLECF": {
                "bit": 4,
                "description": "Idle line detected clear flag\nWriting 1 to this bit clears the IDLE flag in the LPUART_ISR register."
              },
              "TCCF": {
                "bit": 6,
                "description": "Transmission complete clear flag\nWriting 1 to this bit clears the TC flag in the LPUART_ISR register."
              },
              "CTSCF": {
                "bit": 9,
                "description": "CTS clear flag\nWriting 1 to this bit clears the CTSIF flag in the LPUART_ISR register."
              },
              "CMCF": {
                "bit": 17,
                "description": "Character match clear flag\nWriting 1 to this bit clears the CMF flag in the LPUART_ISR register."
              },
              "WUCF": {
                "bit": 20,
                "description": "Wake-up from low-power mode clear flag \nWriting 1 to this bit clears the WUF flag in the USART_ISR register.\nNote: If the USART does not support the wake-up from Stop feature, this bit is reserved and must be kept at reset value. Refer to Section132.3: LPUART implementation on page1914."
              }
            },
            "LPUART_RDR": {
              "RDR": {
                "bit": 0,
                "description": "Receive data value\nContains the received data character.\nThe RDR register provides the parallel interface between the input shift register and the internal bus (see Figure1254).\nWhen receiving with the parity enabled, the value read in the MSB bit is the received parity bit.",
                "width": 9
              }
            },
            "LPUART_TDR": {
              "TDR": {
                "bit": 0,
                "description": "Transmit data value\nContains the data character to be transmitted.\nThe TDR register provides the parallel interface between the internal bus and the output shift register (see Figure1254).\nWhen transmitting with the parity enabled (PCE bit set to 1 in the LPUART_CR1 register), the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect because it is replaced by the parity.\nNote: This register must be written only when TXE/TXFNF=1.",
                "width": 9
              }
            },
            "LPUART_PRESC": {
              "PRESCALER": {
                "bit": 0,
                "description": "Clock prescaler\nThe LPUART input clock can be divided by a prescaler:\nRemaining combinations: Reserved.\nNote: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is equal to 1011 i.e. input clock divided by 256.",
                "width": 4
              }
            }
          }
        },
        "OPAMP": {
          "instances": [
            {
              "name": "OPAMP",
              "base": "0x40007800"
            }
          ],
          "registers": {
            "OPAMP_CSR": {
              "offset": "0x00",
              "size": 32,
              "description": "OPAMP control/status register"
            },
            "OPAMP_OTR": {
              "offset": "0x04",
              "size": 32,
              "description": "OPAMP offset trimming register in normal mode"
            },
            "OPAMP_LPOTR": {
              "offset": "0x08",
              "size": 32,
              "description": "OPAMP offset trimming register in low-power mode"
            }
          },
          "bits": {
            "OPAMP_CSR": {
              "OPAEN": {
                "bit": 0,
                "description": "Operational amplifier Enable"
              },
              "OPALPM": {
                "bit": 1,
                "description": "Operational amplifier Low Power Mode\nThe operational amplifier must be disable to change this configuration."
              },
              "OPAMODE": {
                "bit": 2,
                "description": "Operational amplifier PGA mode",
                "width": 2
              },
              "PGA_GAIN": {
                "bit": 4,
                "description": "Operational amplifier Programmable amplifier gain value",
                "width": 2
              },
              "VM_SEL": {
                "bit": 8,
                "description": "Inverting input selection\nThese bits are used only when OPAMODE = 00, 01 or 10.\n1x:\tInverting input not externally connected. These configurations are valid only when OPAMODE = 10 (PGA mode)",
                "width": 2
              },
              "VP_SEL": {
                "bit": 10,
                "description": "Non inverted input selection"
              },
              "CALON": {
                "bit": 12,
                "description": "Calibration mode enabled"
              },
              "CALSEL": {
                "bit": 13,
                "description": "Calibration selection"
              },
              "USERTRIM": {
                "bit": 14,
                "description": "allows to switch from factory AOP offset trimmed values to AOP offset user trimmed values\nThis bit is active for both mode normal and low-power."
              },
              "CALOUT": {
                "bit": 15,
                "description": "Operational amplifier calibration output\nDuring calibration mode offset is trimmed when this signal toggle."
              },
              "OPA_RANGE": {
                "bit": 31,
                "description": "Operational amplifier power supply range for stability\nAll AOP must be in power down to allow AOP-RANGE bit write. It applies to all AOP embedded in the product."
              }
            },
            "OPAMP_OTR": {
              "TRIMOFFSETN": {
                "bit": 0,
                "description": "Trim for NMOS differential pairs",
                "width": 5
              },
              "TRIMOFFSETP": {
                "bit": 8,
                "description": "Trim for PMOS differential pairs",
                "width": 5
              }
            },
            "OPAMP_LPOTR": {
              "TRIMLPOFFSETN": {
                "bit": 0,
                "description": "Low-power mode trim for NMOS differential pairs",
                "width": 5
              },
              "TRIMLPOFFSETP": {
                "bit": 8,
                "description": "Low-power mode trim for PMOS differential pairs",
                "width": 5
              }
            }
          }
        },
        "PWR": {
          "instances": [
            {
              "name": "PWR",
              "base": "0x40007000"
            }
          ],
          "registers": {
            "PWR_CR1": {
              "offset": "0x00",
              "size": 32,
              "description": "Power control register 1"
            },
            "PWR_CR2": {
              "offset": "0x04",
              "size": 32,
              "description": "Power control register 2"
            },
            "PWR_CR3": {
              "offset": "0x08",
              "size": 32,
              "description": "Power control register 3"
            },
            "PWR_CR4": {
              "offset": "0x0C",
              "size": 32,
              "description": "Power control register 4"
            },
            "PWR_SR1": {
              "offset": "0x10",
              "size": 32,
              "description": "Power status register 1"
            },
            "PWR_SR2": {
              "offset": "0x14",
              "size": 32,
              "description": "Power status register 2"
            },
            "PWR_SCR": {
              "offset": "0x18",
              "size": 32,
              "description": "Power status clear register"
            },
            "PWR_PUCRA": {
              "offset": "0x20",
              "size": 32,
              "description": "Power Port A pull-up control register"
            },
            "PWR_PDCRA": {
              "offset": "0x24",
              "size": 32,
              "description": "Power Port A pull-down control register"
            },
            "PWR_PUCRB": {
              "offset": "0x28",
              "size": 32,
              "description": "Power Port B pull-up control register"
            },
            "PWR_PDCRB": {
              "offset": "0x2C",
              "size": 32,
              "description": "Power Port B pull-down control register"
            },
            "PWR_PUCRC": {
              "offset": "0x30",
              "size": 32,
              "description": "Power Port C pull-up control register"
            },
            "PWR_PDCRC": {
              "offset": "0x34",
              "size": 32,
              "description": "Power Port C pull-down control register"
            },
            "PWR_PUCRD": {
              "offset": "0x38",
              "size": 32,
              "description": "Power Port D pull-up control register"
            },
            "PWR_PDCRD": {
              "offset": "0x3C",
              "size": 32,
              "description": "Power Port D pull-down control register"
            },
            "PWR_PUCRE": {
              "offset": "0x40",
              "size": 32,
              "description": "Power Port E pull-up control register"
            },
            "PWR_PDCRE": {
              "offset": "0x44",
              "size": 32,
              "description": "Power Port E pull-down control register"
            },
            "PWR_PUCRF": {
              "offset": "0x48",
              "size": 32,
              "description": "Power Port F pull-up control register"
            },
            "PWR_PDCRF": {
              "offset": "0x4C",
              "size": 32,
              "description": "Power Port F pull-down control register"
            }
          },
          "bits": {
            "PWR_CR1": {
              "LPMS": {
                "bit": 0,
                "description": "Low-power mode selection\nThese bits select the low-power mode entered when CPU enters the deepsleep mode.\n1xx: Shutdown mode\nNote: If LPR bit is set, Stop 2 mode cannot be selected and Stop 1 mode shall be entered instead of Stop 2.\nNote: In Standby mode, SRAM2 can be preserved or not, depending on RRS bit configuration in PWR_CR3.",
                "width": 3
              },
              "FPD_STOP": {
                "bit": 3,
                "description": "Flash memory powered down during Stop mode.\nThis bit determines whether the flash memory is put in power-down mode or remains in idle mode when the device enters Stop mode."
              },
              "FPD_LPRUN": {
                "bit": 4,
                "description": "Flash memory powered down during Low-power run mode.\nThis bit determines whether the flash memory is put in power-down mode or remains in idle mode when the device enters Low-power sleep mode."
              },
              "FPD_LPSLP": {
                "bit": 5,
                "description": "Flash memory powered down during Low-power sleep mode.\nThis bit determines whether the flash memory is put in power-down mode or remains in idle mode when the device enters Low-power sleep mode."
              },
              "DBP": {
                "bit": 8,
                "description": "Disable backup domain write protection\nIn reset state, the RTC and backup registers are protected against parasitic write access. This bit must be set to enable write access to these registers."
              },
              "VOS": {
                "bit": 9,
                "description": "Voltage scaling range selection",
                "width": 2
              },
              "LPR": {
                "bit": 14,
                "description": "Low-power run\nWhen this bit is set, the regulator is switched from main mode (MR) to low-power mode (LPR).\nNote: Stop 2 mode cannot be entered when LPR bit is set. Stop 1 is entered instead."
              }
            },
            "PWR_CR2": {
              "PVDE": {
                "bit": 0,
                "description": "Programmable voltage detector enable\nNote: This bit is write-protected when the bit PVDL (PVD Lock) is set in the SYSCFG_CBR register.\nNote: This bit is reset only by a system reset."
              },
              "PLS": {
                "bit": 1,
                "description": "Programmable voltage detector level selection.\nThese bits select the voltage threshold detected by the programmable voltage detector:\nNote: These bits are write-protected when the bit PVDL (PVD Lock) is set in the SYSCFG_CBR register.\nNote: These bits are reset only by a system reset.",
                "width": 3
              },
              "PVME1": {
                "bit": 4,
                "description": "Peripheral voltage monitoring 1 enable: V<sub>DDUSB</sub> vs. 1.21V"
              },
              "PVME3": {
                "bit": 5,
                "description": "Peripheral voltage monitoring 3 enable: V<sub>DDA</sub> vs. 1.621V"
              },
              "PVME4": {
                "bit": 6,
                "description": "Peripheral voltage monitoring 4 enable: V<sub>DDA</sub> vs. 1.861V"
              },
              "USV": {
                "bit": 10,
                "description": "V<sub>DDUSB</sub> USB supply valid\nThis bit is used to validate the V<sub>DDUSB</sub> supply for electrical and logical isolation purpose.\nSetting this bit is mandatory to use the USB FS peripheral. If V<sub>DDUSB</sub> is not always\npresent in the application, the PVM can be used to determine whether this supply is ready or\nnot."
              }
            },
            "PWR_CR3": {
              "EWUP1": {
                "bit": 0,
                "description": "Enable Wake-up pin WKUP1\nWhen this bit is set, the external wake-up pin WKUP1 is enabled and triggers a wake-up from Standby or Shutdown event when a rising or a falling edge occurs. The active edge is configured via the WP1 bit in the PWR_CR4 register."
              },
              "EWUP2": {
                "bit": 1,
                "description": "Enable Wake-up pin WKUP2\nWhen this bit is set, the external wake-up pin WKUP2 is enabled and triggers a wake-up from Standby or Shutdown event when a rising or a falling edge occurs. The active edge is configured via the WP2 bit in the PWR_CR4 register."
              },
              "EWUP3": {
                "bit": 2,
                "description": "Enable Wake-up pin WKUP3\nWhen this bit is set, the external wake-up pin WKUP3 is enabled and triggers a wake-up from Standby or Shutdown event when a rising or a falling edge occurs. The active edge is configured via the WP3 bit in the PWR_CR4 register."
              },
              "EWUP4": {
                "bit": 3,
                "description": "Enable Wake-up pin WKUP4\nWhen this bit is set, the external wake-up pin WKUP4 is enabled and triggers a wake-up from Standby or Shutdown event when a rising or a falling edge occurs. The active edge is configured via the WP4 bit in the PWR_CR4 register."
              },
              "EWUP5": {
                "bit": 4,
                "description": "Enable Wake-up pin WKUP5\nWhen this bit is set, the external wake-up pin WKUP5 is enabled and triggers a wake-up from Standby or Shutdown event when a rising or a falling edge occurs.The active edge is configured via the WP5 bit in the PWR_CR4 register."
              },
              "EWUP7": {
                "bit": 6,
                "description": "Enable Wake-up pin WKUP7.\nWhen this bit is set, the external wake-up pin WKUP7 is enabled and triggers a wake-up from Standby or Shutdown event when a rising or a falling edge occurs.The active edge is configured via the WP7 bit in the PWR_CR4 register."
              },
              "RRS": {
                "bit": 8,
                "description": "SRAM2 retention in Standby mode"
              },
              "ENULP": {
                "bit": 9,
                "description": "Enable ULP sampling\nWhen this bit is set, the BORL, BORH and PVD are periodically sampled instead continuous monitoring to reduce power consumption. Fast supply drop between two sample/compare phases is not detected in this mode. This bit has impact only on STOP2, Standby and shutdown low power modes."
              },
              "APC": {
                "bit": 10,
                "description": "Apply pull-up and pull-down configuration\nWhen this bit is set, the I/O pull-up and pull-down configurations defined in the PWR_PUCRx\nand PWR_PDCRx registers are applied. When this bit is cleared, the PWR_PUCRx and PWR_PDCRx registers are not applied to the I/Os, instead the I/Os are in floating mode during Standby or configured according GPIO controller GPIOx_PUPDR register during RUN mode."
              },
              "EIWUL": {
                "bit": 15,
                "description": "Enable internal wake-up line"
              }
            },
            "PWR_CR4": {
              "WP1": {
                "bit": 0,
                "description": "Wake-up pin WKUP1 polarity\nThis bit defines the polarity used for an event detection on external wake-up pin, WKUP1"
              },
              "WP2": {
                "bit": 1,
                "description": "Wake-up pin WKUP2 polarity\nThis bit defines the polarity used for an event detection on external wake-up pin, WKUP2"
              },
              "WP3": {
                "bit": 2,
                "description": "Wake-up pin WKUP3 polarity\nThis bit defines the polarity used for an event detection on external wake-up pin, WKUP3"
              },
              "WP4": {
                "bit": 3,
                "description": "Wake-up pin WKUP4 polarity\nThis bit defines the polarity used for an event detection on external wake-up pin, WKUP4"
              },
              "WP5": {
                "bit": 4,
                "description": "Wake-up pin WKUP5 polarity\nThis bit defines the polarity used for an event detection on external wake-up pin, WKUP5"
              },
              "WP7": {
                "bit": 6,
                "description": "Wake-up pin WKUP7 polarity\nThis bit defines the polarity used for an event detection on external wake-up pin, WKUP7"
              },
              "VBE": {
                "bit": 8,
                "description": "V<sub>BAT</sub> battery charging enable"
              },
              "VBRS": {
                "bit": 9,
                "description": "V<sub>BAT</sub> battery charging resistor selection"
              }
            },
            "PWR_SR1": {
              "WUF1": {
                "bit": 0,
                "description": "Wake-up flag 1\nThis bit is set when a wake-up event is detected on wake-up pin, WKUP1. It is cleared by writing 1 in the CWUF1 bit of the PWR_SCR register."
              },
              "WUF2": {
                "bit": 1,
                "description": "Wake-up flag 2\nThis bit is set when a wake-up event is detected on wake-up pin, WKUP2. It is cleared by writing 1 in the CWUF2 bit of the PWR_SCR register."
              },
              "WUF3": {
                "bit": 2,
                "description": "Wake-up flag 3\nThis bit is set when a wake-up event is detected on wake-up pin, WKUP3. It is cleared by writing 1 in the CWUF3 bit of the PWR_SCR register."
              },
              "WUF4": {
                "bit": 3,
                "description": "Wake-up flag 4\nThis bit is set when a wake-up event is detected on wake-up pin,WKUP4. It is cleared by writing 1 in the CWUF4 bit of the PWR_SCR register."
              },
              "WUF5": {
                "bit": 4,
                "description": "Wake-up flag 5\nThis bit is set when a wake-up event is detected on wake-up pin, WKUP5. It is cleared by writing 1 in the CWUF5 bit of the PWR_SCR register."
              },
              "WUF7": {
                "bit": 6,
                "description": "Wake-up flag 7\nThis bit is set when a wake-up event is detected on wake-up pin, WKUP7. It is cleared by writing 1 in the CWUF7 bit of the PWR_SCR register."
              },
              "SBF": {
                "bit": 8,
                "description": "Standby flag\nThis bit is set by hardware when the device enters the Standby mode and is cleared by setting the CSBF bit in the PWR_SCR register, or by a power-on reset. It is not cleared by the system reset."
              },
              "STOPF": {
                "bit": 9,
                "description": "Stop Flags\nThese bits are set by hardware when the device enters any stop mode and are cleared by setting the CSBF bit in the PWR_SCR register, or by a power-on reset. It is not cleared by the system reset.",
                "width": 3
              },
              "WUFI": {
                "bit": 15,
                "description": "Wake-up flag internal\nThis bit is set when a wake-up is detected on the internal wake-up line. It is cleared when all internal wake-up sources are cleared."
              }
            },
            "PWR_SR2": {
              "FLASH_RDY": {
                "bit": 7,
                "description": "Flash ready flag\nThis bit is set by hardware to indicate when the flash memory is readey to be accessed after wake-up from power-down. To place the flash memory in power-down, set either FPD_LPRUN, FPD_LPSLP or FPD_STP bits.\nNote : If the system boots from SRAM, the user application must wait until the FLASH_RDY bit is set, prior to jumping to flash memory."
              },
              "REGLPS": {
                "bit": 8,
                "description": "Low-power regulator started\nThis bit provides the information whether the low-power regulator is ready after a power-on\nreset or a Standby/Shutdown. If the Standby mode is entered while REGLPS bit is still cleared, the wake-up from Standby mode time may be increased."
              },
              "REGLPF": {
                "bit": 9,
                "description": "Low-power regulator flag\nThis bit is set by hardware when the MCU is in Low-power run mode. When the MCU exits\nfrom the Low-power run mode, this bit remains at 1 until the regulator is ready in main mode. A polling on this bit must be done before increasing the product frequency.\nThis bit is cleared by hardware when the regulator is ready."
              },
              "VOSF": {
                "bit": 10,
                "description": "Voltage scaling flag\nA delay is required for the internal regulator to be ready after the voltage scaling has been changed. VOSF indicates that the regulator reached the voltage level defined with VOS bits of the PWR_CR1 register."
              },
              "PVDO": {
                "bit": 11,
                "description": "Programmable voltage detector output"
              },
              "PVMO1": {
                "bit": 12,
                "description": "Peripheral voltage monitoring output: V<sub>DDUSB</sub> vs. 1.2 V\nNote: PVMO1 is cleared when PVM1 is disabled (PVME1 = 0). After enabling PVM1, the PVM1 output is valid after the PVM1 wake-up time."
              },
              "PVMO3": {
                "bit": 14,
                "description": "Peripheral voltage monitoring output: V<sub>DDA</sub> vs. 1.621V\nNote: PVMO3 is cleared when PVM3 is disabled (PVME3 = 0). After enabling PVM3, the PVM3 output is valid after the PVM3 wake-up time."
              },
              "PVMO4": {
                "bit": 15,
                "description": "Peripheral voltage monitoring output: V<sub>DDA</sub> vs. 2.21V\nNote: PVMO4 is cleared when PVM4 is disabled (PVME4 = 0). After enabling PVM4, the PVM4 output is valid after the PVM4 wake-up time."
              }
            },
            "PWR_SCR": {
              "CWUF1": {
                "bit": 0,
                "description": "Clear wake-up flag 1\nSetting this bit clears the WUF1 flag in the PWR_SR1 register."
              },
              "CWUF2": {
                "bit": 1,
                "description": "Clear wake-up flag 2\nSetting this bit clears the WUF2 flag in the PWR_SR1 register."
              },
              "CWUF3": {
                "bit": 2,
                "description": "Clear wake-up flag 3\nSetting this bit clears the WUF3 flag in the PWR_SR1 register."
              },
              "CWUF4": {
                "bit": 3,
                "description": "Clear wake-up flag 4\nSetting this bit clears the WUF4 flag in the PWR_SR1 register."
              },
              "CWUF5": {
                "bit": 4,
                "description": "Clear wake-up flag 5\nSetting this bit clears the WUF5 flag in the PWR_SR1 register."
              },
              "CWUF7": {
                "bit": 6,
                "description": "Clear wake-up flag 7\nSetting this bit clears the WUF7 flag in the PWR_SR1 register."
              },
              "CSBF": {
                "bit": 8,
                "description": "Clear standby flag\nSetting this bit clears the SBF flag in the PWR_SR1 register."
              }
            },
            "PWR_PUCRA": {
              "PU0": {
                "bit": 0,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU1": {
                "bit": 1,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU2": {
                "bit": 2,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU3": {
                "bit": 3,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU4": {
                "bit": 4,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU5": {
                "bit": 5,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU6": {
                "bit": 6,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU7": {
                "bit": 7,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU8": {
                "bit": 8,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU9": {
                "bit": 9,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU10": {
                "bit": 10,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU11": {
                "bit": 11,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU12": {
                "bit": 12,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU13": {
                "bit": 13,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU14": {
                "bit": 14,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU15": {
                "bit": 15,
                "description": "Port A pull-up bit y (y1=115 to 0)\nWhen set, this bit activates the pull-up on PA[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              }
            },
            "PWR_PDCRA": {
              "PD0": {
                "bit": 0,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD1": {
                "bit": 1,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD2": {
                "bit": 2,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD3": {
                "bit": 3,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD4": {
                "bit": 4,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD5": {
                "bit": 5,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD6": {
                "bit": 6,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD7": {
                "bit": 7,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD8": {
                "bit": 8,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD9": {
                "bit": 9,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD10": {
                "bit": 10,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD11": {
                "bit": 11,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD12": {
                "bit": 12,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD13": {
                "bit": 13,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD14": {
                "bit": 14,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              },
              "PD15": {
                "bit": 15,
                "description": "Port A pull-down bit y\nWhen set, this bit activates the pull-down on PA[y] when APC bit is set in PWR_CR3 register."
              }
            },
            "PWR_PUCRB": {
              "PU0": {
                "bit": 0,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU1": {
                "bit": 1,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU2": {
                "bit": 2,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU3": {
                "bit": 3,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU4": {
                "bit": 4,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU5": {
                "bit": 5,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU6": {
                "bit": 6,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU7": {
                "bit": 7,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU8": {
                "bit": 8,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU9": {
                "bit": 9,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU10": {
                "bit": 10,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU11": {
                "bit": 11,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU12": {
                "bit": 12,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU13": {
                "bit": 13,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU14": {
                "bit": 14,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PU15": {
                "bit": 15,
                "description": "Port B pull-up bit y\nWhen set, this bit activates the pull-up on PB[y] when APC bit is set in PWR_CR3 register."
              }
            },
            "PWR_PDCRB": {
              "PD0": {
                "bit": 0,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD1": {
                "bit": 1,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD2": {
                "bit": 2,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD3": {
                "bit": 3,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD4": {
                "bit": 4,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD5": {
                "bit": 5,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD6": {
                "bit": 6,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD7": {
                "bit": 7,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD8": {
                "bit": 8,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD9": {
                "bit": 9,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD10": {
                "bit": 10,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD11": {
                "bit": 11,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD12": {
                "bit": 12,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD13": {
                "bit": 13,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD14": {
                "bit": 14,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              },
              "PD15": {
                "bit": 15,
                "description": "Port B pull-down bit y\nWhen set, this bit activates the pull-down on PB[y] when APC bit is set in PWR_CR3 register."
              }
            },
            "PWR_PUCRC": {
              "PU0": {
                "bit": 0,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU1": {
                "bit": 1,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU2": {
                "bit": 2,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU3": {
                "bit": 3,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU4": {
                "bit": 4,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU5": {
                "bit": 5,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU6": {
                "bit": 6,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU7": {
                "bit": 7,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU8": {
                "bit": 8,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU9": {
                "bit": 9,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU10": {
                "bit": 10,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU11": {
                "bit": 11,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU12": {
                "bit": 12,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU13": {
                "bit": 13,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU14": {
                "bit": 14,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU15": {
                "bit": 15,
                "description": "Port C pull-up bit y\nWhen set, this bit activates the pull-up on PC[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              }
            },
            "PWR_PDCRC": {
              "PD0": {
                "bit": 0,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD1": {
                "bit": 1,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD2": {
                "bit": 2,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD3": {
                "bit": 3,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD4": {
                "bit": 4,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD5": {
                "bit": 5,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD6": {
                "bit": 6,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD7": {
                "bit": 7,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD8": {
                "bit": 8,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD9": {
                "bit": 9,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD10": {
                "bit": 10,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD11": {
                "bit": 11,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD12": {
                "bit": 12,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD13": {
                "bit": 13,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD14": {
                "bit": 14,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              },
              "PD15": {
                "bit": 15,
                "description": "Port C pull-down bit y\nWhen set, this bit activates the pull-down on PC[y] when APC bit is set in PWR_CR3 register."
              }
            },
            "PWR_PUCRD": {
              "PU0": {
                "bit": 0,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU1": {
                "bit": 1,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU2": {
                "bit": 2,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU3": {
                "bit": 3,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU4": {
                "bit": 4,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU5": {
                "bit": 5,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU6": {
                "bit": 6,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU8": {
                "bit": 8,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU9": {
                "bit": 9,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU10": {
                "bit": 10,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU11": {
                "bit": 11,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU12": {
                "bit": 12,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU13": {
                "bit": 13,
                "description": "Port D pull-up bit y\nWhen set, this bit activates the pull-up on PD[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              }
            },
            "PWR_PDCRD": {
              "PD0": {
                "bit": 0,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD1": {
                "bit": 1,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD2": {
                "bit": 2,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD3": {
                "bit": 3,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD4": {
                "bit": 4,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD5": {
                "bit": 5,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD6": {
                "bit": 6,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD8": {
                "bit": 8,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD9": {
                "bit": 9,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD10": {
                "bit": 10,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD11": {
                "bit": 11,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD12": {
                "bit": 12,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              },
              "PD13": {
                "bit": 13,
                "description": "Port D pull-down bit y\nWhen set, this bit activates the pull-down on PD[y] when APC bit is set in PWR_CR3 register."
              }
            },
            "PWR_PUCRE": {
              "PU3": {
                "bit": 3,
                "description": "Port E pull-up bit 3\nWhen set, this bit activates the pull-up on PE[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU7": {
                "bit": 7,
                "description": "Port E pull-up bit y\nWhen set, this bit activates the pull-up on PE[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU8": {
                "bit": 8,
                "description": "Port E pull-up bit y\nWhen set, this bit activates the pull-up on PE[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU9": {
                "bit": 9,
                "description": "Port E pull-up bit y\nWhen set, this bit activates the pull-up on PE[y] when APC bit is set in PWR_CR3 register. If the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              }
            },
            "PWR_PDCRE": {
              "PD3": {
                "bit": 3,
                "description": "Port E pull-down bit 3\nWhen set, this bit activates the pull-down on PE[y] when APC bit is set in PWR_CR3 register."
              },
              "PD7": {
                "bit": 7,
                "description": "Port E pull-down bit y\nWhen set, this bit activates the pull-down on PE[y] when APC bit is set in PWR_CR3 register."
              },
              "PD8": {
                "bit": 8,
                "description": "Port E pull-down bit y\nWhen set, this bit activates the pull-down on PE[y] when APC bit is set in PWR_CR3 register."
              },
              "PD9": {
                "bit": 9,
                "description": "Port E pull-down bit y\nWhen set, this bit activates the pull-down on PE[y] when APC bit is set in PWR_CR3 register."
              }
            },
            "PWR_PUCRF": {
              "PU0": {
                "bit": 0,
                "description": "Port F pull-up bit y\nWhen set, this bit activates the pull-up on PH[y] when APC bit is set in PWR_CR3 register.\nIf the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU1": {
                "bit": 1,
                "description": "Port F pull-up bit y\nWhen set, this bit activates the pull-up on PH[y] when APC bit is set in PWR_CR3 register.\nIf the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU2": {
                "bit": 2,
                "description": "Port F pull-up bit y\nWhen set, this bit activates the pull-up on PH[y] when APC bit is set in PWR_CR3 register.\nIf the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              },
              "PU3": {
                "bit": 3,
                "description": "Port F pull-up bit y\nWhen set, this bit activates the pull-up on PH[y] when APC bit is set in PWR_CR3 register.\nIf the corresponding PDy bit is also set, the pull-up is not activated and the pull-down is activated instead with highest priority."
              }
            },
            "PWR_PDCRF": {
              "PD0": {
                "bit": 0,
                "description": "Port F pull-down bit y\nWhen set, this bit activates the pull-down on PH[y] when APC bit is set in PWR_CR3 register."
              },
              "PD1": {
                "bit": 1,
                "description": "Port F pull-down bit y\nWhen set, this bit activates the pull-down on PH[y] when APC bit is set in PWR_CR3 register."
              },
              "PD2": {
                "bit": 2,
                "description": "Port F pull-down bit y\nWhen set, this bit activates the pull-down on PH[y] when APC bit is set in PWR_CR3 register."
              },
              "PD3": {
                "bit": 3,
                "description": "Port F pull-down bit y\nWhen set, this bit activates the pull-down on PH[y] when APC bit is set in PWR_CR3 register."
              }
            }
          }
        },
        "RCC": {
          "instances": [
            {
              "name": "RCC",
              "base": "0x40021000",
              "irq": 4
            }
          ],
          "registers": {
            "RCC_CR": {
              "offset": "0x00",
              "size": 32,
              "description": "Clock control register"
            },
            "RCC_ICSCR": {
              "offset": "0x04",
              "size": 32,
              "description": "Internal clock sources calibration register"
            },
            "RCC_CFGR": {
              "offset": "0x08",
              "size": 32,
              "description": "Clock configuration register"
            },
            "RCC_PLLCFGR": {
              "offset": "0x0C",
              "size": 32,
              "description": "PLL configuration register"
            },
            "RCC_CIER": {
              "offset": "0x18",
              "size": 32,
              "description": "Clock interrupt enable register"
            },
            "RCC_CIFR": {
              "offset": "0x1C",
              "size": 32,
              "description": "Clock interrupt flag register"
            },
            "RCC_CICR": {
              "offset": "0x20",
              "size": 32,
              "description": "Clock interrupt clear register"
            },
            "RCC_AHBRSTR": {
              "offset": "0x28",
              "size": 32,
              "description": "AHB peripheral reset register"
            },
            "RCC_IOPRSTR": {
              "offset": "0x2C",
              "size": 32,
              "description": "I/O port reset register"
            },
            "RCC_APBRSTR1": {
              "offset": "0x38",
              "size": 32,
              "description": "APB peripheral reset register 1"
            },
            "RCC_APBRSTR2": {
              "offset": "0x40",
              "size": 32,
              "description": "APB peripheral reset register 2"
            },
            "RCC_AHBENR": {
              "offset": "0x48",
              "size": 32,
              "description": "AHB peripheral clock enable register"
            },
            "RCC_IOPENR": {
              "offset": "0x4C",
              "size": 32,
              "description": "I/O port clock enable register"
            },
            "RCC_DBGCFGR": {
              "offset": "0x50",
              "size": 32,
              "description": "Debug configuration register"
            },
            "RCC_APBENR1": {
              "offset": "0x58",
              "size": 32,
              "description": "APB peripheral clock enable register 1"
            },
            "RCC_APBENR2": {
              "offset": "0x60",
              "size": 32,
              "description": "APB peripheral clock enable register 2"
            },
            "RCC_AHBSMENR": {
              "offset": "0x68",
              "size": 32,
              "description": "AHB peripheral clock enable in Sleep/Stop mode register"
            },
            "RCC_IOPSMENR": {
              "offset": "0x6C",
              "size": 32,
              "description": "I/O port in Sleep mode clock enable register"
            },
            "RCC_APBSMENR1": {
              "offset": "0x78",
              "size": 32,
              "description": "APB peripheral clock enable in Sleep/Stop mode register 1"
            },
            "RCC_APBSMENR2": {
              "offset": "0x80",
              "size": 32,
              "description": "APB peripheral clock enable in Sleep/Stop mode register 2"
            },
            "RCC_CCIPR": {
              "offset": "0x88",
              "size": 32,
              "description": "Peripherals independent clock configuration register"
            },
            "RCC_BDCR": {
              "offset": "0x90",
              "size": 32,
              "description": "RTC domain control register"
            },
            "RCC_CSR": {
              "offset": "0x94",
              "size": 32,
              "description": "Control/status register"
            },
            "RCC_CRRCR": {
              "offset": "0x98",
              "size": 32,
              "description": "RCC clock recovery RC register"
            }
          },
          "bits": {
            "RCC_CR": {
              "MSION": {
                "bit": 0,
                "description": "MSI clock enable\nThis bit is set and cleared by software.\nCleared by hardware to stop the MSI oscillator when entering Stop, Standby or Shutdown mode.\nSet by hardware to force the MSI oscillator ON when exiting Standby or Shutdown mode.\nSet by hardware to force the MSI oscillator ON when STOPWUCK=0 when exiting from Stop modes, or in case of a failure of the HSE oscillator \nSet by hardware when used directly or indirectly as system clock."
              },
              "MSIRDY": {
                "bit": 1,
                "description": "MSI clock ready flag\nThis bit is set by hardware to indicate that the MSI oscillator is stable.\nNote: Once the MSION bit is cleared, MSIRDY goes low after 6 MSI clock cycles."
              },
              "MSIPLLEN": {
                "bit": 2,
                "description": "MSI clock PLL enable\nSet and cleared by software to enable/ disable the PLL part of the MSI clock source.\nMSIPLLEN must be enabled after LSE is enabled (LSEON enabled) and ready (LSERDY set by hardware).There is a hardware protection to avoid enabling MSIPLLEN if LSE is not ready.\nThis bit is cleared by hardware when LSE is disabled (LSEON = 0) or when the Clock Security System on LSE detects a LSE failure (refer to RCC_CSR register)."
              },
              "MSIRGSEL": {
                "bit": 3,
                "description": "MSI clock range selection\nSet by software to select the MSI clock range with MSIRANGE[3:0]. Write 0 has no effect.\nAfter a standby or a reset MSIRGSEL is at 0 and the MSI range value is provided by MSISRANGE in CSR register."
              },
              "MSIRANGE": {
                "bit": 4,
                "description": "MSI clock ranges\nThese bits are configured by software to choose the frequency range of MSI when MSIRGSEL is set.12 frequency ranges are available:\nothers: not allowed (hardware write protection)\nNote: Warning: MSIRANGE can be modified when MSI is OFF (MSION=0) or when MSI is ready (MSIRDY=1). MSIRANGE must NOT be modified when MSI is ON and NOT ready (MSION=1 and MSIRDY=0)",
                "width": 4
              },
              "HSION": {
                "bit": 8,
                "description": "HSI16 clock enable\nSet and cleared by software.\nCleared by hardware to stop the HSI16 oscillator when entering Stop, Standby, or Shutdown mode.\nForced by hardware to keep the HSI16 oscillator ON when it is used directly or indirectly as system clock (also when leaving Stop, Standby, or Shutdown modes, or in case of failure of the HSE oscillator used for system clock)."
              },
              "HSIKERON": {
                "bit": 9,
                "description": "HSI16 always enable for peripheral kernels.\nSet and cleared by software to force HSI16 ON even in Stop modes. The HSI16 can only feed USART1, USART2, CEC and I2C1 peripherals configured with HSI16 as kernel clock. Keeping the HSI16 ON in Stop mode allows avoiding to slow down the communication speed because of the HSI16 startup time. This bit has no effect on HSION value."
              },
              "HSIRDY": {
                "bit": 10,
                "description": "HSI16 clock ready flag\nSet by hardware to indicate that HSI16 oscillator is stable. This bit is set only when HSI16 is enabled by software by setting HSION. \nNote: Once the HSION bit is cleared, HSIRDY goes low after 6 HSI16 clock cycles."
              },
              "HSIASFS": {
                "bit": 11,
                "description": "HSI16 automatic start from Stop\nSet and cleared by software. When the system wake-up clock is MSI, this bit is used to wake up the HSI16 is parallel of the system wake-up."
              },
              "HSEON": {
                "bit": 16,
                "description": "HSE clock enable\nSet and cleared by software.\nCleared by hardware to stop the HSE oscillator when entering Stop, Standby, or Shutdown mode. This bit cannot be reset if the HSE oscillator is used directly or indirectly as the system clock."
              },
              "HSERDY": {
                "bit": 17,
                "description": "HSE clock ready flag\nSet by hardware to indicate that the HSE oscillator is stable. \nNote: Once the HSEON bit is cleared, HSERDY goes low after 6 HSE clock cycles."
              },
              "HSEBYP": {
                "bit": 18,
                "description": "HSE crystal oscillator bypass\nSet and cleared by software to bypass the oscillator with an external clock. The external clock must be enabled with the HSEON bit set, to be used by the device. The HSEBYP bit can be written only if the HSE oscillator is disabled."
              },
              "CSSON": {
                "bit": 19,
                "description": "Clock security system enable\nSet by software to enable the clock security system. When CSSON is set, the clock detector is enabled by hardware when the HSE oscillator is ready, and disabled by hardware if a HSE clock failure is detected. This bit is set only and is cleared by reset."
              },
              "PLLON": {
                "bit": 24,
                "description": "PLL enable\nSet and cleared by software to enable the PLL.\nCleared by hardware when entering Stop, Standby or Shutdown mode. This bit cannot be reset if the PLL clock is used as the system clock."
              },
              "PLLRDY": {
                "bit": 25,
                "description": "PLL clock ready flag\nSet by hardware to indicate that the PLL is locked."
              }
            },
            "RCC_ICSCR": {
              "MSICAL": {
                "bit": 0,
                "description": "MSI clock calibration\nThese bits are initialized at startup with the factory-programmed MSI calibration trim value. When MSITRIM is written, MSICAL is updated with the sum of MSITRIM and the factory trim value.",
                "width": 8
              },
              "MSITRIM": {
                "bit": 8,
                "description": "MSI clock trimming\nThese bits provide an additional user-programmable trimming value that is added to the MSICAL[7:0] bits. It can be programmed to adjust to variations in voltage and temperature that influence the frequency of the MSI.",
                "width": 8
              },
              "HSICAL": {
                "bit": 16,
                "description": "HSI16 clock calibration\nThese bits are initialized at startup with the factory-programmed HSI16 calibration trim value. When HSITRIM is written, HSICAL is updated with the sum of HSITRIM and the factory trim value.",
                "width": 8
              },
              "HSITRIM": {
                "bit": 24,
                "description": "HSI16 clock trimming\nThese bits provide an additional user-programmable trimming value that is added to the HSICAL[7:0] bits. It can be programmed to adjust to variations in voltage and temperature that influence the frequency of the HSI16.\nThe default value is 64 when added to the HSICAL value,  trim the HSI16 to 161MHz 1 11%.",
                "width": 7
              }
            },
            "RCC_CFGR": {
              "SW": {
                "bit": 0,
                "description": "System clock switch\nThis bitfield is controlled by software and hardware. The bitfield selects the clock for SYSCLK as follows:\nOthers: Reserved\nThe setting is forced by hardware to 000 (HSISYS selected) when the MCU exits Stop, Standby, or Shutdown mode, or when the setting is 001 (HSE selected) and HSE oscillator failure is detected.",
                "width": 3
              },
              "SWS": {
                "bit": 3,
                "description": "System clock switch status\nThis bitfield is controlled by hardware to indicate the clock source used as system clock:\nOthers: Reserved",
                "width": 3
              },
              "HPRE": {
                "bit": 8,
                "description": "AHB prescaler\nThis bitfield is controlled by software. To produce HCLK clock, it sets the division factor of SYSCLK clock as follows:\n0xxx: 1\nCaution: Depending on the device voltage range, the software has to set correctly these bits to ensure that the system frequency does not exceed the maximum allowed frequency (for more details, refer to Section14.1.4: Dynamic voltage scaling management). After a write operation to these bits and before decreasing the voltage range, this register must be read to be sure that the new value has been taken into account.",
                "width": 4
              },
              "PPRE": {
                "bit": 12,
                "description": "APB prescaler\nThis bitfield is controlled by software. To produce PCLK clock, it sets the division factor of HCLK clock as follows:\n0xx: 1",
                "width": 3
              },
              "STOPWUCK": {
                "bit": 15,
                "description": "Wake-up from Stop and CSS backup clock selection\nSet and cleared by software to select the system clock used when exiting Stop mode.\nThe selected clock is also used as emergency clock for the Clock Security System on HSE. Warning: STOPWUCK must not be modified when the Clock Security System is enabled by HSECSSON in RCC_CR register and the system clock is HSE (SWS=10) or a switch on HSE is requested (SW=10)."
              },
              "MCO2SEL": {
                "bit": 16,
                "description": "Microcontroller clock output 2 clock selector\nThis bitfield is controlled by software. It sets the clock selector for MCO2 output as follows:\nOthers: Reserved\nNote: This clock output may have some truncated cycles at startup or during MCO2 clock source switching.",
                "width": 4
              },
              "MCO2PRE": {
                "bit": 20,
                "description": "Microcontroller clock output 2 prescaler\nThis bitfield is controlled by software. It sets the division factor of the clock sent to the MCO2 output as follows:\n...\nOthers: reserved\nIt is highly recommended to set this field before the MCO2 output is enabled.",
                "width": 4
              },
              "MCOSEL": {
                "bit": 24,
                "description": "Microcontroller clock output clock selector\nThis bitfield is controlled by software. It sets the clock selector for MCO output as follows:\nOthers: Reserved\nNote: This clock output may have some truncated cycles at startup or during MCO clock source switching.",
                "width": 4
              },
              "MCOPRE": {
                "bit": 28,
                "description": "Microcontroller clock output prescaler\nThis bitfield is controlled by software. It sets the division factor of the clock sent to the MCO output as follows:\n...\nOthers: reserved\nIt is highly recommended to set this field before the MCO output is enabled.",
                "width": 4
              }
            },
            "RCC_PLLCFGR": {
              "PLLSRC": {
                "bit": 0,
                "description": "PLL input clock source\nThis bit is controlled by software to select PLL clock source, as follows:\nThe bitfield can be written only when the PLL is disabled.\nWhen the PLL is not used, selecting 00 allows saving power.",
                "width": 2
              },
              "PLLM": {
                "bit": 4,
                "description": "Division factor M of the PLL input clock divider\nThis bit is controlled by software to divide the PLL input clock before the actual phase-locked loop, as follows:\nThe bitfield can be written only when the PLL is disabled.\nCaution: The software must set these bits so that the PLL input frequency after the /M divider is between 2.66 and 161MHz.",
                "width": 3
              },
              "PLLN": {
                "bit": 8,
                "description": "PLL frequency multiplication factor N\nThis bit is controlled by software to set the division factor of the f<sub>VCO</sub> feedback divider (that determines the PLL multiplication ratio) as follows:\n...\n...\nThe bitfield can be written only when the PLL is disabled.\nCaution: The software must set these bits so that the VCO output frequency is between 96 and 3441MHz.",
                "width": 7
              },
              "PLLPEN": {
                "bit": 16,
                "description": "PLLPCLK clock output enable\nThis bit is controlled by software to enable/disable the PLLPCLK clock output of the PLL:\nDisabling the PLLPCLK clock output, when not used, allows saving power."
              },
              "PLLP": {
                "bit": 17,
                "description": "PLL VCO division factor P for PLLPCLK clock output\nThis bitfield is controlled by software. It sets the PLL VCO division factor P as follows:\n...\nThe bitfield can be written only when the PLL is disabled.\nCaution: The software must set this bitfield so as not to exceed 541MHz on this clock.",
                "width": 5
              },
              "PLLQEN": {
                "bit": 24,
                "description": "PLLQCLK clock output enable\nThis bit is controlled by software to enable/disable the PLLQCLK clock output of the PLL:\nDisabling the PLLQCLK clock output, when not used, allows saving power."
              },
              "PLLQ": {
                "bit": 25,
                "description": "PLL VCO division factor Q for PLLQCLK clock output\nThis bitfield is controlled by software. It sets the PLL VCO division factor Q as follows:\nThe bitfield can be written only when the PLL is disabled.\nCaution: The software must set this bitfield so as not to exceed 541MHz on this clock.",
                "width": 3
              },
              "PLLREN": {
                "bit": 28,
                "description": "PLLRCLK clock output enable\nThis bit is controlled by software to enable/disable the PLLRCLK clock output of the PLL:\nThis bit cannot be written when PLLRCLK output of the PLL is selected for system clock.\nDisabling the PLLRCLK clock output, when not used, allows saving power."
              },
              "PLLR": {
                "bit": 29,
                "description": "PLL VCO division factor R for PLLRCLK clock output\nThis bitfield is controlled by software. It sets the PLL VCO division factor R as follows:\nThe bitfield can be written only when the PLL is disabled.\nThe PLLRCLK clock can be selected as system clock.\nCaution: The software must set this bitfield so as not to exceed 122MHz on this clock.",
                "width": 3
              }
            },
            "RCC_CIER": {
              "LSIRDYIE": {
                "bit": 0,
                "description": "LSI ready interrupt enable\nSet and cleared by software to enable/disable interrupt caused by the LSI oscillator stabilization:"
              },
              "LSERDYIE": {
                "bit": 1,
                "description": "LSE ready interrupt enable\nSet and cleared by software to enable/disable interrupt caused by the LSE oscillator stabilization:"
              },
              "MSIRDYIE": {
                "bit": 2,
                "description": "MSI ready interrupt enable\nSet and cleared by software to enable/disable interrupt caused by the MSI oscillator stabilization."
              },
              "HSIRDYIE": {
                "bit": 3,
                "description": "HSI16 ready interrupt enable\nSet and cleared by software to enable/disable interrupt caused by the HSI16 oscillator stabilization:"
              },
              "HSERDYIE": {
                "bit": 4,
                "description": "HSE ready interrupt enable\nSet and cleared by software to enable/disable interrupt caused by the HSE oscillator stabilization:"
              },
              "PLLRDYIE": {
                "bit": 5,
                "description": "PLL ready interrupt enable\nSet and cleared by software to enable/disable interrupt caused by PLL lock:"
              },
              "LSECSSIE": {
                "bit": 9,
                "description": "LSE clock security system interrupt enable\nSet and cleared by software to enable/disable interrupt caused by the clock security system on LSE."
              },
              "HSI48RDYIE": {
                "bit": 10,
                "description": "HSI48 ready interrupt enable\nSet and cleared by software to enable/disable interrupt caused by the internal HSI48 oscillator."
              }
            },
            "RCC_CIFR": {
              "LSIRDYF": {
                "bit": 0,
                "description": "LSI ready interrupt flag\nSet by hardware when the LSI clock becomes stable and LSIRDYDIE is set.\nCleared by software setting the LSIRDYC bit."
              },
              "LSERDYF": {
                "bit": 1,
                "description": "LSE ready interrupt flag\nSet by hardware when the LSE clock becomes stable and LSERDYDIE is set.\nCleared by software setting the LSERDYC bit."
              },
              "MSIRDYF": {
                "bit": 2,
                "description": "MSI ready interrupt flag\nSet by hardware when the MSI clock becomes stable and MSIRDYDIE is set.\nCleared by software setting the MSIRDYC bit."
              },
              "HSIRDYF": {
                "bit": 3,
                "description": "HSI16 ready interrupt flag\nSet by hardware when the HSI16 clock becomes stable and HSIRDYIE is set in a response to setting the HSION (refer to Clock control register (RCC_CR)). When HSION is not set but the HSI16 oscillator is enabled by the peripheral through a clock request, this bit is not set and no interrupt is generated.\nCleared by software setting the HSIRDYC bit."
              },
              "HSERDYF": {
                "bit": 4,
                "description": "HSE ready interrupt flag\nSet by hardware when the HSE clock becomes stable and HSERDYIE is set.\nCleared by software setting the HSERDYC bit."
              },
              "PLLRDYF": {
                "bit": 5,
                "description": "PLL ready interrupt flag\nSet by hardware when the PLL locks and PLLRDYIE is set.\nCleared by software setting the PLLRDYC bit."
              },
              "CSSF": {
                "bit": 8,
                "description": "HSE clock security system interrupt flag\nSet by hardware when a failure is detected in the HSE oscillator.\nCleared by software setting the CSSC bit."
              },
              "LSECSSF": {
                "bit": 9,
                "description": "LSE clock security system interrupt flag\nSet by hardware when a failure is detected in the LSE oscillator.\nCleared by software by setting the LSECSSC bit."
              },
              "HSI48RDYF": {
                "bit": 10,
                "description": "HSI48 ready interrupt flag\nSet by hardware when the HSI48 clock becomes stable and HSI48RDYIE is set in a response to setting the HSI48ON (refer to RCC clock recovery RC register (RCC_CRRCR)). \nCleared by software setting the HSI48RDYC bit."
              }
            },
            "RCC_CICR": {
              "LSIRDYC": {
                "bit": 0,
                "description": "LSI ready interrupt clear\nThis bit is set by software to clear the LSIRDYF flag."
              },
              "LSERDYC": {
                "bit": 1,
                "description": "LSE ready interrupt clear\nThis bit is set by software to clear the LSERDYF flag."
              },
              "MSIRDYC": {
                "bit": 2,
                "description": "MSI ready interrupt clear\nThis bit is set by software to clear the MSIRDYF flag."
              },
              "HSIRDYC": {
                "bit": 3,
                "description": "HSI16 ready interrupt clear\nThis bit is set software to clear the HSIRDYF flag."
              },
              "HSERDYC": {
                "bit": 4,
                "description": "HSE ready interrupt clear\nThis bit is set by software to clear the HSERDYF flag."
              },
              "PLLRDYC": {
                "bit": 5,
                "description": "PLL ready interrupt clear\nThis bit is set by software to clear the PLLRDYF flag."
              },
              "CSSC": {
                "bit": 8,
                "description": "Clock security system interrupt clear\nThis bit is set by software to clear the HSECSSF flag."
              },
              "LSECSSC": {
                "bit": 9,
                "description": "LSE Clock security system interrupt clear\nThis bit is set by software to clear the LSECSSF flag."
              },
              "HSI48RDYC": {
                "bit": 10,
                "description": "HSI48 oscillator ready interrupt clear\nThis bit is set by software to clear the HSI48RDYF flag."
              }
            },
            "RCC_AHBRSTR": {
              "DMA1RST": {
                "bit": 0,
                "description": "DMA1 and DMAMUX reset\nSet and cleared by software."
              },
              "DMA2RST": {
                "bit": 1,
                "description": "DMA2 and DMAMUX reset\nSet and cleared by software."
              },
              "FLASHRST": {
                "bit": 8,
                "description": "Flash memory interface reset\nSet and cleared by software. \nThis bit can only be set when the flash memory is in power down mode."
              },
              "CRCRST": {
                "bit": 12,
                "description": "CRC reset\nSet and cleared by software."
              },
              "AESRST": {
                "bit": 16,
                "description": "AES hardware accelerator reset\nSet and cleared by software."
              },
              "RNGRST": {
                "bit": 18,
                "description": "Random number generator reset\nSet and cleared by software."
              },
              "TSCRST": {
                "bit": 24,
                "description": "Touch sensing controller reset\nSet and cleared by software."
              }
            },
            "RCC_IOPRSTR": {
              "GPIOARST": {
                "bit": 0,
                "description": "I/O port A reset\nThis bit is set and cleared by software."
              },
              "GPIOBRST": {
                "bit": 1,
                "description": "I/O port B reset\nThis bit is set and cleared by software."
              },
              "GPIOCRST": {
                "bit": 2,
                "description": "I/O port C reset\nThis bit is set and cleared by software."
              },
              "GPIODRST": {
                "bit": 3,
                "description": "I/O port D reset\nThis bit is set and cleared by software."
              },
              "GPIOERST": {
                "bit": 4,
                "description": "I/O port E reset\nThis bit is set and cleared by software."
              },
              "GPIOFRST": {
                "bit": 5,
                "description": "I/O port F reset\nThis bit is set and cleared by software."
              }
            },
            "RCC_APBRSTR1": {
              "TIM2RST": {
                "bit": 0,
                "description": "TIM2 timer reset\nSet and cleared by software."
              },
              "TIM3RST": {
                "bit": 1,
                "description": "TIM3 timer reset\nSet and cleared by software."
              },
              "TIM6RST": {
                "bit": 4,
                "description": "TIM6 timer reset\nSet and cleared by software."
              },
              "TIM7RST": {
                "bit": 5,
                "description": "TIM7 timer reset\nSet and cleared by software."
              },
              "LPUART2RST": {
                "bit": 7,
                "description": "LPUART2 reset\nSet and cleared by software."
              },
              "LCDRST": {
                "bit": 9,
                "description": "LCD reset<sup>(1)</sup>\nSet and cleared by software."
              },
              "LPUART3RST": {
                "bit": 12,
                "description": "LPUART3 reset<sup>(1)</sup>\nSet and cleared by software."
              },
              "USBRST": {
                "bit": 13,
                "description": "USB reset<sup>(1)</sup>\nSet and cleared by software."
              },
              "SPI2RST": {
                "bit": 14,
                "description": "SPI2 reset\nSet and cleared by software."
              },
              "SPI3RST": {
                "bit": 15,
                "description": "SPI3 reset<sup>(1)</sup>\nSet and cleared by software."
              },
              "CRSRST": {
                "bit": 16,
                "description": "CRS reset<sup>(1)</sup>\nSet and cleared by software."
              },
              "USART2RST": {
                "bit": 17,
                "description": "USART2 reset\nSet and cleared by software."
              },
              "USART3RST": {
                "bit": 18,
                "description": "USART3 reset\nSet and cleared by software."
              },
              "USART4RST": {
                "bit": 19,
                "description": "USART4 reset\nSet and cleared by software."
              },
              "LPUART1RST": {
                "bit": 20,
                "description": "LPUART1 reset\nSet and cleared by software."
              },
              "I2C1RST": {
                "bit": 21,
                "description": "I2C1 reset\nSet and cleared by software."
              },
              "I2C2RST": {
                "bit": 22,
                "description": "I2C2 reset\nSet and cleared by software."
              },
              "I2C3RST": {
                "bit": 23,
                "description": "I2C3 reset\nSet and cleared by software."
              },
              "OPAMPRST": {
                "bit": 24,
                "description": "OPAMP reset\nSet and cleared by software."
              },
              "I2C4RST": {
                "bit": 25,
                "description": "I2C4 reset<sup>(1)</sup>\nSet and cleared by software."
              },
              "LPTIM3RST": {
                "bit": 26,
                "description": "LPTIM3 reset\nSet and cleared by software."
              },
              "PWRRST": {
                "bit": 28,
                "description": "Power interface reset\nSet and cleared by software."
              },
              "DAC1RST": {
                "bit": 29,
                "description": "DAC1 interface reset\nSet and cleared by software."
              },
              "LPTIM2RST": {
                "bit": 30,
                "description": "Low Power Timer 2 reset\nSet and cleared by software."
              },
              "LPTIM1RST": {
                "bit": 31,
                "description": "Low Power Timer 1 reset\nSet and cleared by software."
              }
            },
            "RCC_APBRSTR2": {
              "SYSCFGRST": {
                "bit": 0,
                "description": "SYSCFG, COMP and VREFBUF reset\nSet and cleared by software."
              },
              "TIM1RST": {
                "bit": 11,
                "description": "TIM1 timer reset\nSet and cleared by software."
              },
              "SPI1RST": {
                "bit": 12,
                "description": "SPI1 reset\nSet and cleared by software."
              },
              "USART1RST": {
                "bit": 14,
                "description": "USART1 reset\nSet and cleared by software."
              },
              "TIM15RST": {
                "bit": 16,
                "description": "TIM15 timer reset\nSet and cleared by software."
              },
              "TIM16RST": {
                "bit": 17,
                "description": "TIM16 timer reset\nSet and cleared by software."
              },
              "ADCRST": {
                "bit": 20,
                "description": "ADC reset\nSet and cleared by software."
              }
            },
            "RCC_AHBENR": {
              "DMA1EN": {
                "bit": 0,
                "description": "DMA1 and DMAMUX clock enable\nSet and cleared by software.\nDMAMUX is enabled as long as at least one DMA peripheral is enabled."
              },
              "DMA2EN": {
                "bit": 1,
                "description": "DMA2 and DMAMUX clock enable\nSet and cleared by software.\nDMAMUX is enabled as long as at least one DMA peripheral is enabled."
              },
              "FLASHEN": {
                "bit": 8,
                "description": "Flash memory interface clock enable\nSet and cleared by software. \nThis bit can only be cleared when the flash memory is in power down mode."
              },
              "CRCEN": {
                "bit": 12,
                "description": "CRC clock enable\nSet and cleared by software."
              },
              "AESEN": {
                "bit": 16,
                "description": "AES hardware accelerator\nSet and cleared by software."
              },
              "RNGEN": {
                "bit": 18,
                "description": "Random number generator clock enable\nSet and cleared by software."
              },
              "TSCEN": {
                "bit": 24,
                "description": "Touch sensing controller clock enable\nSet and cleared by software."
              }
            },
            "RCC_IOPENR": {
              "GPIOAEN": {
                "bit": 0,
                "description": "I/O port A clock enable\nThis bit is set and cleared by software."
              },
              "GPIOBEN": {
                "bit": 1,
                "description": "I/O port B clock enable\nThis bit is set and cleared by software."
              },
              "GPIOCEN": {
                "bit": 2,
                "description": "I/O port C clock enable\nThis bit is set and cleared by software."
              },
              "GPIODEN": {
                "bit": 3,
                "description": "I/O port D clock enable\nThis bit is set and cleared by software."
              },
              "GPIOEEN": {
                "bit": 4,
                "description": "I/O port E clock enable<sup>(1)</sup>\nThis bit is set and cleared by software."
              },
              "GPIOFEN": {
                "bit": 5,
                "description": "I/O port F clock enable\nThis bit is set and cleared by software."
              }
            },
            "RCC_DBGCFGR": {
              "DBGEN": {
                "bit": 0,
                "description": "Debug support clock enable\nSet and cleared by software."
              },
              "DBGRST": {
                "bit": 1,
                "description": "Debug support reset\nSet and cleared by software."
              }
            },
            "RCC_APBENR1": {
              "TIM2EN": {
                "bit": 0,
                "description": "TIM2 timer clock enable\nSet and cleared by software."
              },
              "TIM3EN": {
                "bit": 1,
                "description": "TIM3 timer clock enable\nSet and cleared by software."
              },
              "TIM6EN": {
                "bit": 4,
                "description": "TIM6 timer clock enable\nSet and cleared by software."
              },
              "TIM7EN": {
                "bit": 5,
                "description": "TIM7 timer clock enable\nSet and cleared by software."
              },
              "LPUART2EN": {
                "bit": 7,
                "description": "LPUART2 clock enable\nSet and cleared by software."
              },
              "LCDEN": {
                "bit": 9,
                "description": "LCD clock enable<sup>(1)</sup>\nSet and cleared by software."
              },
              "RTCAPBEN": {
                "bit": 10,
                "description": "RTC APB clock enable\nSet and cleared by software."
              },
              "WWDGEN": {
                "bit": 11,
                "description": "WWDG clock enable\nSet by software to enable the window watchdog clock. Cleared by hardware system reset\nThis bit can also be set by hardware if the WWDG_SW option bit is 0."
              },
              "LPUART3EN": {
                "bit": 12,
                "description": "LPUART3 clock enable\nSet and cleared by software."
              },
              "USBEN": {
                "bit": 13,
                "description": "USB clock enable<sup>(1)</sup>\nSet and cleared by software."
              },
              "SPI2EN": {
                "bit": 14,
                "description": "SPI2 clock enable\nSet and cleared by software."
              },
              "SPI3EN": {
                "bit": 15,
                "description": "SPI3 clock enable<sup>(1)</sup>\nSet and cleared by software."
              },
              "CRSEN": {
                "bit": 16,
                "description": "CRS clock enable<sup>(1)</sup>\nSet and cleared by software."
              },
              "USART2EN": {
                "bit": 17,
                "description": "USART2 clock enable\nSet and cleared by software."
              },
              "USART3EN": {
                "bit": 18,
                "description": "USART3 clock enable\nSet and cleared by software."
              },
              "USART4EN": {
                "bit": 19,
                "description": "USART4 clock enable\nSet and cleared by software."
              },
              "LPUART1EN": {
                "bit": 20,
                "description": "LPUART1 clock enable\nSet and cleared by software."
              },
              "I2C1EN": {
                "bit": 21,
                "description": "I2C1 clock enable\nSet and cleared by software."
              },
              "I2C2EN": {
                "bit": 22,
                "description": "I2C2 clock enable\nSet and cleared by software."
              },
              "I2C3EN": {
                "bit": 23,
                "description": "I2C3 clock enable\nSet and cleared by software."
              },
              "OPAMPEN": {
                "bit": 24,
                "description": "OPAMP clock enable\nSet and cleared by software."
              },
              "I2C4EN": {
                "bit": 25,
                "description": "I2C4EN clock enable<sup>(1)</sup>\nSet and cleared by software."
              },
              "LPTIM3EN": {
                "bit": 26,
                "description": "LPTIM3 clock enable\nSet and cleared by software."
              },
              "PWREN": {
                "bit": 28,
                "description": "Power interface clock enable\nSet and cleared by software."
              },
              "DAC1EN": {
                "bit": 29,
                "description": "DAC1 interface clock enable\nSet and cleared by software."
              },
              "LPTIM2EN": {
                "bit": 30,
                "description": "LPTIM2 clock enable\nSet and cleared by software."
              },
              "LPTIM1EN": {
                "bit": 31,
                "description": "LPTIM1 clock enable\nSet and cleared by software."
              }
            },
            "RCC_APBENR2": {
              "SYSCFGEN": {
                "bit": 0,
                "description": "SYSCFG, COMP and VREFBUF clock enable\nSet and cleared by software."
              },
              "TIM1EN": {
                "bit": 11,
                "description": "TIM1 timer clock enable\nSet and cleared by software."
              },
              "SPI1EN": {
                "bit": 12,
                "description": "SPI1 clock enable\nSet and cleared by software."
              },
              "USART1EN": {
                "bit": 14,
                "description": "USART1 clock enable\nSet and cleared by software."
              },
              "TIM15EN": {
                "bit": 16,
                "description": "TIM15 timer clock enable\nSet and cleared by software."
              },
              "TIM16EN": {
                "bit": 17,
                "description": "TIM16 timer clock enable\nSet and cleared by software."
              },
              "ADCEN": {
                "bit": 20,
                "description": "ADC clock enable\nSet and cleared by software."
              }
            },
            "RCC_AHBSMENR": {
              "DMA1SMEN": {
                "bit": 0,
                "description": "DMA1 and DMAMUX clock enable during Sleep mode\nSet and cleared by software.\nClock to DMAMUX during Sleep mode is enabled as long as the clock in Sleep mode is enabled to at least one DMA peripheral."
              },
              "DMA2SMEN": {
                "bit": 1,
                "description": "DMA2 and DMAMUX clock enable during Sleep mode\nSet and cleared by software.\nClock to DMAMUX during Sleep mode is enabled as long as the clock in Sleep mode is enabled to at least one DMA peripheral."
              },
              "FLASHSMEN": {
                "bit": 8,
                "description": "Flash memory interface clock enable during Sleep mode\nSet and cleared by software.\nThis bit can be activated only when the flash memory is in power down mode."
              },
              "SRAMSMEN": {
                "bit": 9,
                "description": "SRAM clock enable during Sleep mode\nSet and cleared by software."
              },
              "CRCSMEN": {
                "bit": 12,
                "description": "CRC clock enable during Sleep mode\nSet and cleared by software."
              },
              "AESSMEN": {
                "bit": 16,
                "description": "AES hardware accelerator clock enable during Sleep mode\nSet and cleared by software."
              },
              "RNGSMEN": {
                "bit": 18,
                "description": "RNG clock enable during Sleep and Stop mode\nSet and cleared by software."
              },
              "TSCSMEN": {
                "bit": 24,
                "description": "TSC clock enable during Sleep and Stop mode\nSet and cleared by software."
              }
            },
            "RCC_IOPSMENR": {
              "GPIOASMEN": {
                "bit": 0,
                "description": "I/O port A clock enable during Sleep mode\nSet and cleared by software."
              },
              "GPIOBSMEN": {
                "bit": 1,
                "description": "I/O port B clock enable during Sleep mode\nSet and cleared by software."
              },
              "GPIOCSMEN": {
                "bit": 2,
                "description": "I/O port C clock enable during Sleep mode\nSet and cleared by software."
              },
              "GPIODSMEN": {
                "bit": 3,
                "description": "I/O port D clock enable during Sleep mode<sup>(1)</sup>\nSet and cleared by software."
              },
              "GPIOESMEN": {
                "bit": 4,
                "description": "I/O port E clock enable during Sleep mode\nSet and cleared by software."
              },
              "GPIOFSMEN": {
                "bit": 5,
                "description": "I/O port F clock enable during Sleep mode\nSet and cleared by software."
              }
            },
            "RCC_APBSMENR1": {
              "TIM2SMEN": {
                "bit": 0,
                "description": "TIM2 timer clock enable during Sleep mode\nSet and cleared by software."
              },
              "TIM3SMEN": {
                "bit": 1,
                "description": "TIM3 timer clock enable during Sleep mode\nSet and cleared by software."
              },
              "TIM6SMEN": {
                "bit": 4,
                "description": "TIM6 timer clock enable during Sleep mode\nSet and cleared by software."
              },
              "TIM7SMEN": {
                "bit": 5,
                "description": "TIM7 timer clock enable during Sleep mode\nSet and cleared by software."
              },
              "LPUART2SMEN": {
                "bit": 7,
                "description": "LPUART2 clock enable during Sleep and Stop modes\nSet and cleared by software."
              },
              "LCDSMEN": {
                "bit": 9,
                "description": "LCD clock enable during Sleep mode<sup>(1)</sup>\nSet and cleared by software."
              },
              "RTCAPBSMEN": {
                "bit": 10,
                "description": "RTC APB clock enable during Sleep mode\nSet and cleared by software."
              },
              "WWDGSMEN": {
                "bit": 11,
                "description": "WWDG clock enable during Sleep and Stop modes\nSet and cleared by software."
              },
              "LPUART3SMEN": {
                "bit": 12,
                "description": "LPUART3 clock enable during Sleep and Stop modes\nSet and cleared by software."
              },
              "USBSMEN": {
                "bit": 13,
                "description": "USB clock enable during Sleep mode<sup>(1)</sup>\nSet and cleared by software."
              },
              "SPI2SMEN": {
                "bit": 14,
                "description": "SPI2 clock enable during Sleep mode\nSet and cleared by software."
              },
              "SPI3SMEN": {
                "bit": 15,
                "description": "SPI3 clock enable during Sleep mode<sup>(1)</sup>\nSet and cleared by software."
              },
              "CRSSMEN": {
                "bit": 16,
                "description": "CRS clock enable during Sleep and Stop modes<sup>(1)</sup>\nSet and cleared by software."
              },
              "USART2SMEN": {
                "bit": 17,
                "description": "USART2 clock enable during Sleep and Stop modes\nSet and cleared by software."
              },
              "USART3SMEN": {
                "bit": 18,
                "description": "USART3 clock enable during Sleep mode\nSet and cleared by software."
              },
              "USART4SMEN": {
                "bit": 19,
                "description": "USART4 clock enable during Sleep mode\nSet and cleared by software."
              },
              "LPUART1SMEN": {
                "bit": 20,
                "description": "LPUART1 clock enable during Sleep and Stop modes\nSet and cleared by software."
              },
              "I2C1SMEN": {
                "bit": 21,
                "description": "I2C1 clock enable during Sleep and Stop modes\nSet and cleared by software."
              },
              "I2C2SMEN": {
                "bit": 22,
                "description": "I2C2 clock enable during Sleep mode\nSet and cleared by software."
              },
              "I2C3SMEN": {
                "bit": 23,
                "description": "I2C3 clock enable during Sleep mode\nSet and cleared by software."
              },
              "OPAMPSMEN": {
                "bit": 24,
                "description": "OPAMP clock enable during Sleep and Stop modes\nSet and cleared by software."
              },
              "I2C4SMEN": {
                "bit": 25,
                "description": "I2C4 clock enable during Sleep mode<sup>(1)</sup>\nSet and cleared by software."
              },
              "LPTIM3SMEN": {
                "bit": 26,
                "description": "Low power timer 3 clock enable during Sleep mode\nSet and cleared by software."
              },
              "PWRSMEN": {
                "bit": 28,
                "description": "Power interface clock enable during Sleep mode\nSet and cleared by software."
              },
              "DAC1SMEN": {
                "bit": 29,
                "description": "DAC1 interface clock enable during Sleep and Stop modes\nSet and cleared by software."
              },
              "LPTIM2SMEN": {
                "bit": 30,
                "description": "Low Power Timer 2 clock enable during Sleep and Stop modes\nSet and cleared by software."
              },
              "LPTIM1SMEN": {
                "bit": 31,
                "description": "Low Power Timer 1 clock enable during Sleep and Stop modes\nSet and cleared by software."
              }
            },
            "RCC_APBSMENR2": {
              "SYSCFGSMEN": {
                "bit": 0,
                "description": "SYSCFG, COMP and VREFBUF clock enable during Sleep and Stop modes\nSet and cleared by software."
              },
              "TIM1SMEN": {
                "bit": 11,
                "description": "TIM1 timer clock enable during Sleep mode\nSet and cleared by software."
              },
              "SPI1SMEN": {
                "bit": 12,
                "description": "SPI1 clock enable during Sleep mode\nSet and cleared by software."
              },
              "USART1SMEN": {
                "bit": 14,
                "description": "USART1 clock enable during Sleep and Stop modes\nSet and cleared by software."
              },
              "TIM15SMEN": {
                "bit": 16,
                "description": "TIM15 timer clock enable during Sleep mode\nSet and cleared by software."
              },
              "TIM16SMEN": {
                "bit": 17,
                "description": "TIM16 timer clock enable during Sleep mode\nSet and cleared by software."
              },
              "ADCSMEN": {
                "bit": 20,
                "description": "ADC clock enable during Sleep mode\nSet and cleared by software."
              }
            },
            "RCC_CCIPR": {
              "USART1SEL": {
                "bit": 0,
                "description": "USART1 clock source selection\nThis bitfield is controlled by software to select USART1 clock source as follows:",
                "width": 2
              },
              "USART2SEL": {
                "bit": 2,
                "description": "USART2 clock source selection\nThis bitfield is controlled by software to select USART2 clock source as follows:",
                "width": 2
              },
              "LPUART3SEL": {
                "bit": 6,
                "description": "LPUART3 clock source selection<sup>(1)</sup>\nThis bitfield is controlled by software to select LPUART3 clock source as follows:",
                "width": 2
              },
              "LPUART2SEL": {
                "bit": 8,
                "description": "LPUART2 clock source selection\nThis bitfield is controlled by software to select LPUART2 clock source as follows:",
                "width": 2
              },
              "LPUART1SEL": {
                "bit": 10,
                "description": "LPUART1 clock source selection\nThis bitfield is controlled by software to select LPUART1 clock source as follows:",
                "width": 2
              },
              "I2C1SEL": {
                "bit": 12,
                "description": "I2C1 clock source selection\nThis bitfield is controlled by software to select I2C1 clock source as follows:",
                "width": 2
              },
              "I2C3SEL": {
                "bit": 16,
                "description": "I2C3 clock source selection\nThis bitfield is controlled by software to select I2C3 clock source as follows:",
                "width": 2
              },
              "LPTIM1SEL": {
                "bit": 18,
                "description": "LPTIM1 clock source selection\nThis bitfield is controlled by software to select LPTIM1 clock source as follows:",
                "width": 2
              },
              "LPTIM2SEL": {
                "bit": 20,
                "description": "LPTIM2 clock source selection\nThis bitfield is controlled by software to select LPTIM2 clock source as follows:",
                "width": 2
              },
              "LPTIM3SEL": {
                "bit": 22,
                "description": "LPTIM3 clock source selection\nThis bitfield is controlled by software to select LPTIM3 clock source as follows:",
                "width": 2
              },
              "TIM1SEL": {
                "bit": 24,
                "description": "TIM1 clock source selection\nThis bit is set and cleared by software. It selects TIM1 clock source as follows:"
              },
              "TIM15SEL": {
                "bit": 25,
                "description": "TIM15 clock source selection\nThis bit is set and cleared by software. It selects TIM15 clock source as follows:"
              },
              "CLK48SEL": {
                "bit": 26,
                "description": "481MHz clock source selection\nThis bitfield is controlled by software to select the 481MHz clock source used by the USB FS and the RNG:",
                "width": 2
              },
              "ADCSEL": {
                "bit": 28,
                "description": "ADCs clock source selection\nThis bitfield is controlled by software to select the clock source for ADC:",
                "width": 2
              }
            },
            "RCC_BDCR": {
              "LSEON": {
                "bit": 0,
                "description": "LSE oscillator enable\nSet and cleared by software to enable LSE oscillator:"
              },
              "LSERDY": {
                "bit": 1,
                "description": "LSE oscillator ready\nSet and cleared by hardware to indicate when the external 321kHz oscillator is ready (stable):\nAfter the LSEON bit is cleared, LSERDY goes low after 6 external low-speed oscillator clock cycles."
              },
              "LSEBYP": {
                "bit": 2,
                "description": "LSE oscillator bypass\nSet and cleared by software to bypass the LSE oscillator (in debug mode).\nThis bit can be written only when the external 321kHz oscillator is disabled (LSEON=0 and LSERDY=0)."
              },
              "LSEDRV": {
                "bit": 3,
                "description": "LSE oscillator drive capability \nSet by software to select the LSE oscillator drive capability as follows:\nApplicable when the LSE oscillator is in Xtal mode, as opposed to bypass mode.",
                "width": 2
              },
              "LSECSSON": {
                "bit": 5,
                "description": "CSS on LSE enable\nSet by software to enable the clock security system on LSE (321kHz) oscillator as follows:\nLSECSSON must be enabled after the LSE oscillator is enabled (LSEON bit enabled) and ready (LSERDY flag set by hardware), and after the RTCSEL bit is selected.\nOnce enabled, this bit cannot be disabled, except after a LSE failure detection (LSECSSD\n=1). In that case the software must disable the LSECSSON bit."
              },
              "LSECSSD": {
                "bit": 6,
                "description": "CSS on LSE failure Detection\nSet by hardware to indicate when a failure is detected by the clock security system\non the external 321kHz oscillator (LSE):"
              },
              "LSESYSEN": {
                "bit": 7,
                "description": "LSE clock enable for system usage\nThis bit must be set by software to enable the LSE clock for a system usage."
              },
              "RTCSEL": {
                "bit": 8,
                "description": "RTC clock source selection\nSet by software to select the clock source for the RTC as follows:\nOnce the RTC clock source is selected, it cannot be changed anymore unless the RTC domain is reset, or unless a failure is detected on LSE (LSECSSD is set). The BDRST bit can be used to reset this bitfield to 00.",
                "width": 2
              },
              "LSESYSRDY": {
                "bit": 11,
                "description": "LSE clock ready for system usage\nThis flag is set by hardware to indicate that the LSE clock is ready for being used by the system (see LSESYSEN bit). This flag is set when LSE clock is ready (LSEON1=11 and LSERDY1=11) and two LSE clock cycles after that LSESYSEN is set. \nCleared by hardware to indicate that the LSE clock is not ready to be used by the system."
              },
              "RTCEN": {
                "bit": 15,
                "description": "RTC clock enable\nSet and cleared by software. The bit enables clock to RTC and TAMP."
              },
              "BDRST": {
                "bit": 16,
                "description": "RTC domain software reset\nSet and cleared by software to reset the RTC domain:"
              },
              "LSCOEN": {
                "bit": 24,
                "description": "Low-speed clock output (LSCO) enable\nSet and cleared by software."
              },
              "LSCOSEL": {
                "bit": 25,
                "description": "Low-speed clock output selection\nSet and cleared by software to select the low-speed output clock:"
              }
            },
            "RCC_CSR": {
              "LSION": {
                "bit": 0,
                "description": "LSI oscillator enable\nSet and cleared by software to enable/disable the LSI oscillator:"
              },
              "LSIRDY": {
                "bit": 1,
                "description": "LSI oscillator ready\nSet and cleared by hardware to indicate when the LSI oscillator is ready (stable): \nAfter the LSION bit is cleared, LSIRDY goes low after 3 LSI oscillator clock cycles. This bit can be set even if LSION = 0 if the LSI is requested by the Clock Security System on LSE, by the Independent Watchdog or by the RTC."
              },
              "LSIPREDIV": {
                "bit": 2,
                "description": "Internal low-speed oscillator pre-divided by 128\nSet and reset by hardware to indicate when the low-speed internal RC oscillator has to be divided by 128. The software has to switch off the LSI before changing this bit."
              },
              "MSISRANGE": {
                "bit": 8,
                "description": "MSI range after Standby mode\nSet by software to chose the MSI frequency at startup. This range is used after exiting Standby mode until MSIRGSEL is set. After a pad or a power-on reset, the range is always 41MHz. MSISRANGE[3:0] can be written only when MSIRGSEL1=11.\nOthers: Reserved\nNote: Changing the MSISRANGE[3:0] does not change the current MSI frequency.",
                "width": 4
              },
              "RMVF": {
                "bit": 23,
                "description": "Remove reset flags\nSet by software to clear the reset flags."
              },
              "OBLRSTF": {
                "bit": 25,
                "description": "Option byte loader reset flag\nSet by hardware when a reset from the Option byte loading occurs.\nCleared by setting the RMVF bit."
              },
              "PINRSTF": {
                "bit": 26,
                "description": "Pin reset flag\nSet by hardware when a reset from the NRST pin occurs.\nCleared by setting the RMVF bit."
              },
              "PWRRSTF": {
                "bit": 27,
                "description": "BOR or POR/PDR flag\nSet by hardware when a BOR or POR/PDR occurs.\nCleared by setting the RMVF bit."
              },
              "SFTRSTF": {
                "bit": 28,
                "description": "Software reset flag\nSet by hardware when a software reset occurs.\nCleared by setting the RMVF bit."
              },
              "IWDGRSTF": {
                "bit": 29,
                "description": "Independent window watchdog reset flag\nSet by hardware when an independent watchdog reset domain occurs.\nCleared by setting the RMVF bit."
              },
              "WWDGRSTF": {
                "bit": 30,
                "description": "Window watchdog reset flag\nSet by hardware when a window watchdog reset occurs.\nCleared by setting the RMVF bit."
              },
              "LPWRRSTF": {
                "bit": 31,
                "description": "Low-power reset flag\nSet by hardware when a reset occurs due to illegal Stop, Standby, or Shutdown mode entry.\nCleared by setting the RMVF bit.\nThis operates only if nRST_STOP, nRST_STDBY or nRST_SHDW option bits are cleared."
              }
            },
            "RCC_CRRCR": {
              "HSI48ON": {
                "bit": 0,
                "description": "HSI48 RC oscillator enable<sup>(1)</sup>"
              },
              "HSI48RDY": {
                "bit": 1,
                "description": "HSI48 clock ready flag<sup>(1)</sup>\nThe flag is set when the HSI48 clock is ready for use."
              },
              "HSI48CAL": {
                "bit": 7,
                "description": "HSI48 clock calibration\nThese bits are initialized at startup with the factory-programmed HSI48 calibration trim value.",
                "width": 9
              }
            }
          }
        },
        "RNG": {
          "instances": [
            {
              "name": "RNG",
              "base": "0x40025000"
            }
          ],
          "registers": {
            "RNG_CR": {
              "offset": "0x00",
              "size": 32,
              "description": "RNG control register"
            },
            "RNG_SR": {
              "offset": "0x04",
              "size": 32,
              "description": "RNG status register"
            },
            "RNG_DR": {
              "offset": "0x08",
              "size": 32,
              "description": "RNG data register"
            },
            "RNG_HTCR": {
              "offset": "0x10",
              "size": 32,
              "description": "RNG health test control register"
            }
          },
          "bits": {
            "RNG_CR": {
              "RNGEN": {
                "bit": 2,
                "description": "True random number generator enable"
              },
              "IE": {
                "bit": 3,
                "description": "Interrupt enable"
              },
              "CED": {
                "bit": 5,
                "description": "Clock error detection \nThe clock error detection cannot be enabled nor disabled on-the-fly when the RNG is enabled, that is to enable or disable CED, the RNG must be disabled.\nWriting this bit is taken into account only if the CONDRST bit is set to 1 in the same access, while CONFIGLOCK remains at 0. Writing to this bit is ignored if CONFIGLOCK1=11."
              },
              "ARDIS": {
                "bit": 7,
                "description": "Auto reset disable\nWhen auto-reset is enabled the application still need to clear the SEIS bit after a noise source error.\nWriting this bit is taken into account only if CONDRST bit is set to 1 in the same access, while CONFIGLOCK remains at 0. Writing to this bit is ignored if CONFIGLOCK1=11."
              },
              "RNG_CONFIG3": {
                "bit": 8,
                "description": "RNG configuration 3\nReserved to the RNG configuration (bitfield 3). Refer to RNG_CONFIG1 bitfield for details.\nIf the NISTC bit is cleared in this register RNG_CONFIG3 bitfield values are ignored by RNG.",
                "width": 4
              },
              "NISTC": {
                "bit": 12,
                "description": "NIST custom\ntwo conditioning loops are performed and 256 bits of noise source are used.\nWriting this bit is taken into account only if CONDRST bit is set to 1 in the same access, while CONFIGLOCK remains at 0. Writing to this bit is ignored if CONFIGLOCK1=11."
              },
              "RNG_CONFIG2": {
                "bit": 13,
                "description": "RNG configuration 2\nReserved to the RNG configuration (bitfield 2). Bit 13 can be set when RNG power consumption is critical. See Section120.3.8: RNG low-power use. Refer to the RNG_CONFIG1 bitfield for details.",
                "width": 3
              },
              "CLKDIV": {
                "bit": 16,
                "description": "Clock divider factor\nThis value used to configure an internal programmable divider (from 1 to 16) acting on the incoming RNG clock. These bits can be written only when the core is disabled (RNGEN1=10). \n...\nWriting these bits is taken into account only if the CONDRST bit is set to 1 in the same access, while CONFIGLOCK remains at 0. Writing to this bit is ignored if CONFIGLOCK1=11.",
                "width": 4
              },
              "RNG_CONFIG1": {
                "bit": 20,
                "description": "RNG configuration 1\nReserved to the RNG configuration (bitfield 1). Must be initialized using the recommended value documented in Section120.6: RNG entropy source validation.\nWriting any bit of RNG_CONFIG1 is taken into account only if the CONDRST bit is set to 1 in the same access, while CONFIGLOCK remains at 0. Writing to this bit is ignored if CONFIGLOCK1=11.",
                "width": 6
              },
              "CONDRST": {
                "bit": 30,
                "description": "Conditioning soft reset\nWrite 1 and then write 0 to reset the conditioning logic, clear all the FIFOs and start a new RNG initialization process, with RNG_SR cleared. Registers RNG_CR and RNG_HTCR are not changed by CONDRST.\nThis bit must be set to 1 in the same access that set any configuration bits [29:4]. In other words, when CONDRST bit is set to 1 correct configuration in bits [29:4] must also be written.\nWhen CONDRST is set to 0 by the software, its value goes to 0 when the reset process is done. It takes about 2 AHB clock cycles + 2 RNG clock cycles."
              },
              "CONFIGLOCK": {
                "bit": 31,
                "description": "RNG Config lock\nThis bitfield is set once: if this bit is set it can only be reset to 0 if RNG is reset."
              }
            },
            "RNG_SR": {
              "DRDY": {
                "bit": 0,
                "description": "Data ready\nOnce the output buffer becomes empty (after reading the RNG_DR register), this bit returns to 0 until a new random value is generated.\nNote: The DRDY bit can rise when the peripheral is disabled (RNGEN1=10 in the RNG_CR register).\nIf IE=1 in the RNG_CR register, an interrupt is generated when DRDY1=11."
              },
              "CECS": {
                "bit": 1,
                "description": "Clock error current status\nNote: CECS bit is valid only if the CED bit in the RNG_CR register is set to 0."
              },
              "SECS": {
                "bit": 2,
                "description": "Seed error current status\nRuntime repetition count test failed (noise source has provided more than 24 consecutive bits at a constant value 0 or 1, or more than 32 consecutive occurrence of two bits patterns 01 or 10)\nStartup or continuous adaptive proportion test on noise source failed.\nStartup post-processing/conditioning sanity check failed."
              },
              "CEIS": {
                "bit": 5,
                "description": "Clock error interrupt status\nThis bit is set at the same time as CECS. It is cleared by writing 0. Writing 1 has no effect.\nAn interrupt is pending if IE = 1 in the RNG_CR register."
              },
              "SEIS": {
                "bit": 6,
                "description": "Seed error interrupt status\nThis bit is set at the same time as SECS. It is cleared by writing 0 (unless CONDRST is used). Writing 1 has no effect.\nAn interrupt is pending if IE = 1 in the RNG_CR register."
              }
            },
            "RNG_DR": {
              "RNDATA": {
                "bit": 0,
                "description": "Random data\n32-bit random data, which are valid when DRDY1=11. When DRDY1=10, the RNDATA value is1zero.\nWhen DRDY is set, it is recommended to always verify that RNG_DR is different from zero. Because when it is the case a seed error occurred between RNG_SR polling and RND_DR output reading (rare event).",
                "width": 32
              }
            },
            "RNG_HTCR": {
              "HTCFG": {
                "bit": 0,
                "description": "health test configuration\nThis configuration is used by RNG to configure the health tests. See Section120.6: RNG entropy source validation for the recommended value.\nNote: The RNG behavior, including the read to this register, is not guaranteed if a different value from the recommended value is written.",
                "width": 32
              }
            }
          }
        },
        "RTC": {
          "instances": [
            {
              "name": "RTC",
              "base": "0x40002800",
              "irq": 2
            }
          ],
          "registers": {
            "RTC_TR": {
              "offset": "0x00",
              "size": 32,
              "description": "RTC time register"
            },
            "RTC_DR": {
              "offset": "0x04",
              "size": 32,
              "description": "RTC date register"
            },
            "RTC_SSR": {
              "offset": "0x08",
              "size": 32,
              "description": "RTC subsecond register"
            },
            "RTC_ICSR": {
              "offset": "0x0C",
              "size": 32,
              "description": "RTC initialization control and status register"
            },
            "RTC_PRER": {
              "offset": "0x10",
              "size": 32,
              "description": "RTC prescaler register"
            },
            "RTC_WUTR": {
              "offset": "0x14",
              "size": 32,
              "description": "RTC wake-up timer register"
            },
            "RTC_CR": {
              "offset": "0x18",
              "size": 32,
              "description": "RTC control register"
            },
            "RTC_WPR": {
              "offset": "0x24",
              "size": 32,
              "description": "RTC write protection register"
            },
            "RTC_CALR": {
              "offset": "0x28",
              "size": 32,
              "description": "RTC calibration register"
            },
            "RTC_SHIFTR": {
              "offset": "0x2C",
              "size": 32,
              "description": "RTC shift control register"
            },
            "RTC_TSTR": {
              "offset": "0x30",
              "size": 32,
              "description": "RTC timestamp time register"
            },
            "RTC_TSDR": {
              "offset": "0x34",
              "size": 32,
              "description": "RTC timestamp date register"
            },
            "RTC_TSSSR": {
              "offset": "0x38",
              "size": 32,
              "description": "RTC timestamp subsecond register"
            },
            "RTC_ALRMAR": {
              "offset": "0x40",
              "size": 32,
              "description": "RTC alarm A register"
            },
            "RTC_ALRMASSR": {
              "offset": "0x44",
              "size": 32,
              "description": "RTC alarm A subsecond register"
            },
            "RTC_ALRMBR": {
              "offset": "0x48",
              "size": 32,
              "description": "RTC alarm B register"
            },
            "RTC_ALRMBSSR": {
              "offset": "0x4C",
              "size": 32,
              "description": "RTC alarm B subsecond register"
            },
            "RTC_SR": {
              "offset": "0x50",
              "size": 32,
              "description": "RTC status register"
            },
            "RTC_MISR": {
              "offset": "0x54",
              "size": 32,
              "description": "RTC masked interrupt status register"
            },
            "RTC_SCR": {
              "offset": "0x5C",
              "size": 32,
              "description": "RTC status clear register"
            },
            "RTC_ALRABINR": {
              "offset": "0x70",
              "size": 32,
              "description": "RTC alarm A binary mode register"
            },
            "RTC_ALRBBINR": {
              "offset": "0x74",
              "size": 32,
              "description": "RTC alarm B binary mode register"
            }
          },
          "bits": {
            "RTC_TR": {
              "SU": {
                "bit": 0,
                "description": "Second units in BCD format",
                "width": 4
              },
              "ST": {
                "bit": 4,
                "description": "Second tens in BCD format",
                "width": 3
              },
              "MNU": {
                "bit": 8,
                "description": "Minute units in BCD format",
                "width": 4
              },
              "MNT": {
                "bit": 12,
                "description": "Minute tens in BCD format",
                "width": 3
              },
              "HU": {
                "bit": 16,
                "description": "Hour units in BCD format",
                "width": 4
              },
              "HT": {
                "bit": 20,
                "description": "Hour tens in BCD format",
                "width": 2
              },
              "PM": {
                "bit": 22,
                "description": "AM/PM notation"
              }
            },
            "RTC_DR": {
              "DU": {
                "bit": 0,
                "description": "Date units in BCD format",
                "width": 4
              },
              "DT": {
                "bit": 4,
                "description": "Date tens in BCD format",
                "width": 2
              },
              "MU": {
                "bit": 8,
                "description": "Month units in BCD format",
                "width": 4
              },
              "MT": {
                "bit": 12,
                "description": "Month tens in BCD format"
              },
              "WDU": {
                "bit": 13,
                "description": "Week day units\n...",
                "width": 3
              },
              "YU": {
                "bit": 16,
                "description": "Year units in BCD format",
                "width": 4
              },
              "YT": {
                "bit": 20,
                "description": "Year tens in BCD format",
                "width": 4
              }
            },
            "RTC_SSR": {
              "SS": {
                "bit": 0,
                "description": "Synchronous binary counter\nSS[31:16]: Synchronous binary counter MSB values\nWhen Binary or Mixed mode is selected (BIN = 01 or 10 or 11):\nSS[31:16] are the 16 MSB of the SS[31:0] free-running down-counter.\nWhen BCD mode is selected (BIN=00):\nSS[31:16] are forced by hardware to 0x0000.\nSS[15:0]: Subsecond value/synchronous binary counter LSB values\nWhen Binary mode is selected (BIN = 01 or 10 or 11):\nSS[15:0] are the 16 LSB of the SS[31:0] free-running down-counter.\nWhen BCD mode is selected (BIN=00):\nSS[15:0] is the value in the synchronous prescaler counter. The fraction of a second is given by the formula below:\nSecond fraction = (PREDIV_S - SS) / (PREDIV_S + 1)\nSS can be larger than PREDIV_S only after a shift operation. In that case, the correct time/date is one second less than as indicated by RTC_TR/RTC_DR.",
                "width": 32
              }
            },
            "RTC_ICSR": {
              "WUTWF": {
                "bit": 2,
                "description": "Wake-up timer write flag\nThis bit is set by hardware when WUT value can be changed, after the WUTE bit has been set to 0 in RTC_CR.\nIt is cleared by hardware in initialization mode."
              },
              "SHPF": {
                "bit": 3,
                "description": "Shift operation pending\nThis flag is set by hardware as soon as a shift operation is initiated by a write to the RTC_SHIFTR register. It is cleared by hardware when the corresponding shift operation has been executed. Writing to the SHPF bit has no effect."
              },
              "INITS": {
                "bit": 4,
                "description": "Initialization status flag\nThis bit is set by hardware when the calendar year field is different from 0 (Backup domain reset state)."
              },
              "RSF": {
                "bit": 5,
                "description": "Registers synchronization flag\nThis bit is set by hardware each time the calendar registers are copied into the shadow registers (RTC_SSR, RTC_TR and RTC_DR). This bit is cleared by hardware in initialization mode, while a shift operation is pending (SHPF = 1), or when in bypass shadow register mode (BYPSHAD = 1). This bit can also be cleared by software.\nIt is cleared either by software or by hardware in initialization mode."
              },
              "INITF": {
                "bit": 6,
                "description": "Initialization flag\nWhen this bit is set to 1, the RTC is in initialization state, and the time, date and prescaler registers can be updated."
              },
              "INIT": {
                "bit": 7,
                "description": "Initialization mode"
              },
              "BIN": {
                "bit": 8,
                "description": "Binary mode",
                "width": 2
              },
              "BCDU": {
                "bit": 10,
                "description": "BCD update (BIN = 10 or 11)\nIn mixed mode when both BCD calendar and binary extended counter are used (BIN = 10 or 11), the calendar second is incremented using the SSR Least Significant Bits.",
                "width": 3
              },
              "RECALPF": {
                "bit": 16,
                "description": "Recalibration pending Flag\nThe RECALPF status flag is automatically set to 1 when software writes to the RTC_CALR register, indicating that the RTC_CALR register is blocked. When the new calibration settings are taken into account, this bit returns to 0. Refer to Re-calibration on-the-fly."
              }
            },
            "RTC_PRER": {
              "PREDIV_S": {
                "bit": 0,
                "description": "Synchronous prescaler factor\nThis is the synchronous division factor:\nck_spre frequency = ck_apre frequency/(PREDIV_S+1)",
                "width": 15
              },
              "PREDIV_A": {
                "bit": 16,
                "description": "Asynchronous prescaler factor\nThis is the asynchronous division factor:\nck_apre frequency = RTCCLK frequency/(PREDIV_A+1)",
                "width": 7
              }
            },
            "RTC_WUTR": {
              "WUT": {
                "bit": 0,
                "description": "Wake-up auto-reload value bits\nWhen the wake-up timer is enabled (WUTE set to 1), the WUTF flag is set every (WUT[15:0]1+11) ck_wut cycles. The ck_wut period is selected through WUCKSEL[2:0] bits of the RTC_CR register.\nWhen WUCKSEL[2] = 1, the wake-up timer becomes 17-bits and WUCKSEL[1] effectively becomes WUT[16] the most-significant bit to be reloaded into the timer.\nThe first assertion of WUTF occurs between WUT and (WUT + 2) ck_wut cycles after WUTE is set. Setting WUT[15:0] to 0x0000 with WUCKSEL[2:0] = 011 (RTCCLK/2) is forbidden.",
                "width": 16
              },
              "WUTOCLR": {
                "bit": 16,
                "description": "Wake-up auto-reload output clear value\nWhen WUTOCLR[15:0] is different from 0x0000, WUTF is set by hardware when the auto-reload down-counter reaches 0 and is cleared by hardware when the auto-reload downcounter reaches WUTOCLR[15:0].\nWhen WUTOCLR[15:0] = 0x0000, WUTF is set by hardware when the WUT down-counter\nreaches 0 and is cleared by software.",
                "width": 16
              }
            },
            "RTC_CR": {
              "WUCKSEL": {
                "bit": 0,
                "description": "ck_wut wake-up clock selection\n10x: ck_spre (usually 11Hz) clock is selected in BCD mode. In binary or mixed mode, this is the clock selected by BCDU.\n11x: ck_spre (usually 1 Hz) clock is selected in BCD mode. In binary or mixed mode, this is the clock selected by BCDU. Furthermore, 2<sup>16</sup> is added to the WUT counter value.",
                "width": 3
              },
              "TSEDGE": {
                "bit": 3,
                "description": "Timestamp event active edge\nTSE must be reset when TSEDGE is changed to avoid unwanted TSF setting."
              },
              "REFCKON": {
                "bit": 4,
                "description": "RTC_REFIN reference clock detection enable (50 or 601Hz)\nNote: BIN must be 0x00 and PREDIV_S must be 0x00FF."
              },
              "BYPSHAD": {
                "bit": 5,
                "description": "Bypass the shadow registers\nNote: If the frequency of the APB clock is less than seven times the frequency of RTCCLK, BYPSHAD must be set to 1."
              },
              "FMT": {
                "bit": 6,
                "description": "Hour format"
              },
              "SSRUIE": {
                "bit": 7,
                "description": "SSR underflow interrupt enable"
              },
              "ALRAE": {
                "bit": 8,
                "description": "Alarm A enable"
              },
              "ALRBE": {
                "bit": 9,
                "description": "Alarm B enable"
              },
              "WUTE": {
                "bit": 10,
                "description": "Wake-up timer enable\nNote: When the wake-up timer is disabled, wait for WUTWF = 1 before enabling it again."
              },
              "TSE": {
                "bit": 11,
                "description": "timestamp enable"
              },
              "ALRAIE": {
                "bit": 12,
                "description": "Alarm A interrupt enable"
              },
              "ALRBIE": {
                "bit": 13,
                "description": "Alarm B interrupt enable"
              },
              "WUTIE": {
                "bit": 14,
                "description": "Wake-up timer interrupt enable"
              },
              "TSIE": {
                "bit": 15,
                "description": "Timestamp interrupt enable"
              },
              "ADD1H": {
                "bit": 16,
                "description": "Add 1 hour (summer time change)\nWhen this bit is set outside initialization mode, 1 hour is added to the calendar time. This bit is always read as 0."
              },
              "SUB1H": {
                "bit": 17,
                "description": "Subtract 1 hour (winter time change)\nWhen this bit is set outside initialization mode, 1 hour is subtracted to the calendar time if the current hour is not 0. This bit is always read as 0.\nSetting this bit has no effect when current hour is 0."
              },
              "BKP": {
                "bit": 18,
                "description": "Backup\nThis bit can be written by the user to memorize whether the daylight saving time change has been performed or not."
              },
              "COSEL": {
                "bit": 19,
                "description": "Calibration output selection\nWhen COE = 1, this bit selects which signal is output on CALIB.\nThese frequencies are valid for RTCCLK at 32.7681kHz and prescalers at their default values (PREDIV_A = 127 and PREDIV_S = 255). Refer to Section128.3.16: Calibration clock output."
              },
              "POL": {
                "bit": 20,
                "description": "Output polarity\nThis bit is used to configure the polarity of TAMPALRM output."
              },
              "OSEL": {
                "bit": 21,
                "description": "Output selection\nThese bits are used to select the flag to be routed to TAMPALRM output.",
                "width": 2
              },
              "COE": {
                "bit": 23,
                "description": "Calibration output enable\nThis bit enables the CALIB output"
              },
              "ITSE": {
                "bit": 24,
                "description": "timestamp on internal event enable"
              },
              "TAMPTS": {
                "bit": 25,
                "description": "Activate timestamp on tamper detection event\nTAMPTS is valid even if TSE = 0 in the RTC_CR register. Timestamp flag is set up to 3 ck_apre cycles after the tamper flags.\nNote: TAMPTS must be cleared before entering RTC initialization mode."
              },
              "TAMPOE": {
                "bit": 26,
                "description": "Tamper detection output enable on TAMPALRM"
              },
              "ALRAFCLR": {
                "bit": 27,
                "description": "Alarm A flag automatic clear"
              },
              "ALRBFCLR": {
                "bit": 28,
                "description": "Alarm B flag automatic clear"
              },
              "TAMPALRM_PU": {
                "bit": 29,
                "description": "TAMPALRM pull-up enable"
              },
              "TAMPALRM_TYPE": {
                "bit": 30,
                "description": "TAMPALRM output type"
              },
              "OUT2EN": {
                "bit": 31,
                "description": "RTC_OUT2 output enable"
              }
            },
            "RTC_WPR": {
              "KEY": {
                "bit": 0,
                "description": "Write protection key\nThis byte is written by software.\nReading this byte always returns 0x00.\nRefer to RTC register write protection for a description of how to unlock RTC register write protection.",
                "width": 8
              }
            },
            "RTC_CALR": {
              "CALM": {
                "bit": 0,
                "description": "Calibration minus\nThe frequency of the calendar is reduced by masking CALM out of 2<sup>20</sup> RTCCLK pulses (321seconds if the input frequency is 327681Hz). This decreases the frequency of the calendar with a resolution of 0.95371ppm.\nTo increase the frequency of the calendar, this feature should be used in conjunction with CALP. See Section128.3.14: RTC smooth digital calibration on page1733.",
                "width": 9
              },
              "LPCAL": {
                "bit": 12,
                "description": "RTC low-power mode"
              },
              "CALW16": {
                "bit": 13,
                "description": "Use a 16-second calibration cycle period\nWhen CALW16 is set to 1, the 16-second calibration cycle period is selected. This bit must not be set to 1 if CALW8 = 1.\nNote: CALM[0] is stuck at 0 when CALW16 = 1. Refer to Section128.3.14: RTC smooth digital calibration."
              },
              "CALW8": {
                "bit": 14,
                "description": "Use an 8-second calibration cycle period\nWhen CALW8 is set to 1, the 8-second calibration cycle period is selected.\nNote: CALM[1:0] are stuck at 00 when CALW8 = 1. Refer to Section128.3.14: RTC smooth digital calibration."
              },
              "CALP": {
                "bit": 15,
                "description": "Increase frequency of RTC by 488.51ppm."
              }
            },
            "RTC_SHIFTR": {
              "SUBFS": {
                "bit": 0,
                "description": "Subtract a fraction of a second\nThese bits are write only and is always read as zero. Writing to this bit has no effect when a shift operation is pending (when SHPF = 1, in RTC_ICSR).\nThe value which is written to SUBFS is added to the synchronous prescaler counter. Since this counter counts down, this operation effectively subtracts from (delays) the clock by:\nDelay (seconds) = SUBFS / (PREDIV_S + 1)\nA fraction of a second can effectively be added to the clock (advancing the clock) when the ADD1S function is used in conjunction with SUBFS, effectively advancing the clock by:\nAdvance (seconds) = (1 - (SUBFS / (PREDIV_S + 1))).\nIn mixed BCD-binary mode (BIN=10 or 11), the SUBFS[14:BCDU+8] must be written with 0.\nNote: Writing to SUBFS causes RSF to be cleared. Software can then wait until RSF = 1 to be sure that the shadow registers have been updated with the shifted time.",
                "width": 15
              },
              "ADD1S": {
                "bit": 31,
                "description": "Add one second\nThis bit is write only and is always read as zero. Writing to this bit has no effect when a shift operation is pending (when SHPF = 1, in RTC_ICSR).\nThis function is intended to be used with SUBFS (see description below) in order to effectively add a fraction of a second to the clock in an atomic operation."
              }
            },
            "RTC_TSTR": {
              "SU": {
                "bit": 0,
                "description": "Second units in BCD format.",
                "width": 4
              },
              "ST": {
                "bit": 4,
                "description": "Second tens in BCD format.",
                "width": 3
              },
              "MNU": {
                "bit": 8,
                "description": "Minute units in BCD format.",
                "width": 4
              },
              "MNT": {
                "bit": 12,
                "description": "Minute tens in BCD format.",
                "width": 3
              },
              "HU": {
                "bit": 16,
                "description": "Hour units in BCD format.",
                "width": 4
              },
              "HT": {
                "bit": 20,
                "description": "Hour tens in BCD format.",
                "width": 2
              },
              "PM": {
                "bit": 22,
                "description": "AM/PM notation"
              }
            },
            "RTC_TSDR": {
              "DU": {
                "bit": 0,
                "description": "Date units in BCD format",
                "width": 4
              },
              "DT": {
                "bit": 4,
                "description": "Date tens in BCD format",
                "width": 2
              },
              "MU": {
                "bit": 8,
                "description": "Month units in BCD format",
                "width": 4
              },
              "MT": {
                "bit": 12,
                "description": "Month tens in BCD format"
              },
              "WDU": {
                "bit": 13,
                "description": "Week day units",
                "width": 3
              }
            },
            "RTC_TSSSR": {
              "SS": {
                "bit": 0,
                "description": "Subsecond value/synchronous binary counter values\nSS[31:0] is the value of the synchronous prescaler counter when the timestamp event occurred.",
                "width": 32
              }
            },
            "RTC_ALRMAR": {
              "SU": {
                "bit": 0,
                "description": "Second units in BCD format.",
                "width": 4
              },
              "ST": {
                "bit": 4,
                "description": "Second tens in BCD format.",
                "width": 3
              },
              "MSK1": {
                "bit": 7,
                "description": "Alarm A seconds mask"
              },
              "MNU": {
                "bit": 8,
                "description": "Minute units in BCD format",
                "width": 4
              },
              "MNT": {
                "bit": 12,
                "description": "Minute tens in BCD format",
                "width": 3
              },
              "MSK2": {
                "bit": 15,
                "description": "Alarm A minutes mask"
              },
              "HU": {
                "bit": 16,
                "description": "Hour units in BCD format",
                "width": 4
              },
              "HT": {
                "bit": 20,
                "description": "Hour tens in BCD format",
                "width": 2
              },
              "PM": {
                "bit": 22,
                "description": "AM/PM notation"
              },
              "MSK3": {
                "bit": 23,
                "description": "Alarm A hours mask"
              },
              "DU": {
                "bit": 24,
                "description": "Date units or day in BCD format",
                "width": 4
              },
              "DT": {
                "bit": 28,
                "description": "Date tens in BCD format",
                "width": 2
              },
              "WDSEL": {
                "bit": 30,
                "description": "Week day selection"
              },
              "MSK4": {
                "bit": 31,
                "description": "Alarm A date mask"
              }
            },
            "RTC_ALRMASSR": {
              "SS": {
                "bit": 0,
                "description": "Subseconds value\nThis value is compared with the contents of the synchronous prescaler counter to determine if alarm A is to be activated. Only bits 0 up MASKSS-1 are compared.\nThis field is the mirror of SS[14:0] in the RTC_ALRABINR, and so can also be read or written through RTC_ALRABINR.",
                "width": 15
              },
              "MASKSS": {
                "bit": 24,
                "description": "Mask the most-significant bits starting at this bit\n...\nFrom 32 to 63: All 32 SS bits are compared and must match to activate alarm.\nNote: In BCD mode (BIN=00) the overflow bits of the synchronous counter (bits 31:15) are never compared. These bits can be different from 0 only after a shift operation.",
                "width": 6
              },
              "SSCLR": {
                "bit": 31,
                "description": "Clear synchronous counter on alarm (Binary mode only)\nNote: SSCLR must be kept to 0 when BCD or mixed mode is used (BIN = 00, 10 or 11)."
              }
            },
            "RTC_ALRMBR": {
              "SU": {
                "bit": 0,
                "description": "Second units in BCD format",
                "width": 4
              },
              "ST": {
                "bit": 4,
                "description": "Second tens in BCD format",
                "width": 3
              },
              "MSK1": {
                "bit": 7,
                "description": "Alarm B seconds mask"
              },
              "MNU": {
                "bit": 8,
                "description": "Minute units in BCD format",
                "width": 4
              },
              "MNT": {
                "bit": 12,
                "description": "Minute tens in BCD format",
                "width": 3
              },
              "MSK2": {
                "bit": 15,
                "description": "Alarm B minutes mask"
              },
              "HU": {
                "bit": 16,
                "description": "Hour units in BCD format",
                "width": 4
              },
              "HT": {
                "bit": 20,
                "description": "Hour tens in BCD format",
                "width": 2
              },
              "PM": {
                "bit": 22,
                "description": "AM/PM notation"
              },
              "MSK3": {
                "bit": 23,
                "description": "Alarm B hours mask"
              },
              "DU": {
                "bit": 24,
                "description": "Date units or day in BCD format",
                "width": 4
              },
              "DT": {
                "bit": 28,
                "description": "Date tens in BCD format",
                "width": 2
              },
              "WDSEL": {
                "bit": 30,
                "description": "Week day selection"
              },
              "MSK4": {
                "bit": 31,
                "description": "Alarm B date mask"
              }
            },
            "RTC_ALRMBSSR": {
              "SS": {
                "bit": 0,
                "description": "Subseconds value\nThis value is compared with the contents of the synchronous prescaler counter to determine if alarm B is to be activated. Only bits 0 up to MASKSS-1 are compared.\nThis field is the mirror of SS[14:0] in the RTC_ALRBBINR, and so can also be read or written through RTC_ALRBBINR.",
                "width": 15
              },
              "MASKSS": {
                "bit": 24,
                "description": "Mask the most-significant bits starting at this bit\n...\nFrom 32 to 63: All 32 SS bits are compared and must match to activate alarm.\nNote: In BCD mode (BIN=00)The overflow bits of the synchronous counter (bits 15) is never compared. This bit can be different from 0 only after a shift operation.",
                "width": 6
              },
              "SSCLR": {
                "bit": 31,
                "description": "Clear synchronous counter on alarm (Binary mode only)\nNote: SSCLR must be kept to 0 when BCD or mixed mode is used (BIN = 00, 10 or 11)."
              }
            },
            "RTC_SR": {
              "ALRAF": {
                "bit": 0,
                "description": "Alarm A flag\nThis flag is set by hardware when the time/date registers (RTC_TR and RTC_DR) match the alarm A register (RTC_ALRMAR)."
              },
              "ALRBF": {
                "bit": 1,
                "description": "Alarm B flag\nThis flag is set by hardware when the time/date registers (RTC_TR and RTC_DR) match the alarm B register (RTC_ALRMBR)."
              },
              "WUTF": {
                "bit": 2,
                "description": "Wake-up timer flag\nThis flag is set by hardware when the wake-up auto-reload counter reaches 0.\nIf WUTOCLR[15:0] is different from 0x0000, WUTF is cleared by hardware when the wake-up auto-reload counter reaches WUTOCLR value.\nIf WUTOCLR[15:0] is 0x0000, WUTF must be cleared by software.\nThis flag must be cleared by software at least 1.5 RTCCLK periods before WUTF is set to 1 again."
              },
              "TSF": {
                "bit": 3,
                "description": "Timestamp flag\nThis flag is set by hardware when a timestamp event occurs.\nIf ITSF flag is set, TSF must be cleared together with ITSF.\nNote: TSF is not set if TAMPTS1=11 and the tamper flag is read during the 3 ck_apre cycles following tamper event. Refer to Timestamp on tamper event for more details."
              },
              "TSOVF": {
                "bit": 4,
                "description": "Timestamp overflow flag\nThis flag is set by hardware when a timestamp event occurs while TSF is already set.\nIt is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared."
              },
              "ITSF": {
                "bit": 5,
                "description": "Internal timestamp flag\nThis flag is set by hardware when a timestamp on the internal event occurs."
              },
              "SSRUF": {
                "bit": 6,
                "description": "SSR underflow flag\nThis flag is set by hardware when the SSR rolls under 0. SSRUF is not set when SSCLR=1."
              }
            },
            "RTC_MISR": {
              "ALRAMF": {
                "bit": 0,
                "description": "Alarm A masked flag\nThis flag is set by hardware when the alarm A interrupt occurs."
              },
              "ALRBMF": {
                "bit": 1,
                "description": "Alarm B masked flag\nThis flag is set by hardware when the alarm B interrupt occurs."
              },
              "WUTMF": {
                "bit": 2,
                "description": "Wake-up timer masked flag\nThis flag is set by hardware when the wake-up timer interrupt occurs.\nThis flag must be cleared by software at least 1.5 RTCCLK periods before WUTF is set to 1 again."
              },
              "TSMF": {
                "bit": 3,
                "description": "Timestamp masked flag\nThis flag is set by hardware when a timestamp interrupt occurs.\nIf ITSF flag is set, TSF must be cleared together with ITSF."
              },
              "TSOVMF": {
                "bit": 4,
                "description": "Timestamp overflow masked flag\nThis flag is set by hardware when a timestamp interrupt occurs while TSMF is already set.\nIt is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared."
              },
              "ITSMF": {
                "bit": 5,
                "description": "Internal timestamp masked flag\nThis flag is set by hardware when a timestamp on the internal event occurs and timestampinterrupt is raised."
              },
              "SSRUMF": {
                "bit": 6,
                "description": "SSR underflow masked flag\nThis flag is set by hardware when the SSR underflow interrupt occurs."
              }
            },
            "RTC_SCR": {
              "CALRAF": {
                "bit": 0,
                "description": "Clear alarm A flag\nWriting 1 in this bit clears the ALRAF bit in the RTC_SR register."
              },
              "CALRBF": {
                "bit": 1,
                "description": "Clear alarm B flag\nWriting 1 in this bit clears the ALRBF bit in the RTC_SR register."
              },
              "CWUTF": {
                "bit": 2,
                "description": "Clear wake-up timer flag\nWriting 1 in this bit clears the WUTF bit in the RTC_SR register."
              },
              "CTSF": {
                "bit": 3,
                "description": "Clear timestamp flag\nWriting 1 in this bit clears the TSF bit in the RTC_SR register.\nIf ITSF flag is set, TSF must be cleared together with ITSF by setting CRSF and CITSF."
              },
              "CTSOVF": {
                "bit": 4,
                "description": "Clear timestamp overflow flag\nWriting 1 in this bit clears the TSOVF bit in the RTC_SR register.\nIt is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared."
              },
              "CITSF": {
                "bit": 5,
                "description": "Clear internal timestamp flag\nWriting 1 in this bit clears the ITSF bit in the RTC_SR register."
              },
              "CSSRUF": {
                "bit": 6,
                "description": "Clear SSR underflow flag\nWriting 1 in this bit clears the SSRUF in the RTC_SR register."
              }
            },
            "RTC_ALRABINR": {
              "SS": {
                "bit": 0,
                "description": "Synchronous counter alarm value in Binary mode\nThis value is compared with the contents of the synchronous counter to determine if Alarm A is to be activated. Only bits 0 up MASKSS-1 are compared.\nSS[14:0] is the mirror of SS[14:0] in the RTC_ALRMASSRR, and so can also be read or written through RTC_ALRMASSR.",
                "width": 32
              }
            },
            "RTC_ALRBBINR": {
              "SS": {
                "bit": 0,
                "description": "Synchronous counter alarm value in Binary mode\nThis value is compared with the contents of the synchronous counter to determine if Alarm Bis to be activated. Only bits 0 up MASKSS-1 are compared.\nSS[14:0] is the mirror of SS[14:0] in the RTC_ALRMBSSRR, and so can also be read or written through RTC_ALRMBSSR.",
                "width": 32
              }
            }
          }
        },
        "SPI": {
          "instances": [
            {
              "name": "SPI1",
              "base": "0x40013000",
              "irq": 25
            },
            {
              "name": "SPI2",
              "base": "0x40003800",
              "irq": 26
            },
            {
              "name": "SPI3",
              "base": "0x40003C00"
            }
          ],
          "registers": {
            "SPI_CR1": {
              "offset": "0x00",
              "size": 16,
              "description": "SPI control register 1"
            },
            "SPI_CR2": {
              "offset": "0x04",
              "size": 16,
              "description": "SPI control register 2"
            },
            "SPI_SR": {
              "offset": "0x08",
              "size": 16,
              "description": "SPI status register"
            },
            "SPI_DR": {
              "offset": "0x0C",
              "size": 16,
              "description": "SPI data register"
            },
            "SPI_CRCPR": {
              "offset": "0x10",
              "size": 16,
              "description": "SPI CRC polynomial register"
            },
            "SPI_RXCRCR": {
              "offset": "0x14",
              "size": 16,
              "description": "SPI Rx CRC register"
            },
            "SPI_TXCRCR": {
              "offset": "0x18",
              "size": 16,
              "description": "SPI Tx CRC register"
            }
          },
          "bits": {
            "SPI_CR1": {
              "CPHA": {
                "bit": 0,
                "description": "Clock phase \nNote: This bit should not be changed when communication is ongoing.\nNote: This bit is not used in SPI TI mode except the case when CRC is applied at TI mode."
              },
              "CPOL": {
                "bit": 1,
                "description": "Clock polarity \nNote: This bit should not be changed when communication is ongoing.\nNote: This bit is not used in SPI TI mode except the case when CRC is applied at TI mode."
              },
              "MSTR": {
                "bit": 2,
                "description": "Master selection \nNote: This bit should not be changed when communication is ongoing."
              },
              "BR": {
                "bit": 3,
                "description": "Baud rate control\nNote: These bits should not be changed when communication is ongoing.",
                "width": 3
              },
              "SPE": {
                "bit": 6,
                "description": "SPI enable\nNote: When disabling the SPI, follow the procedure described in Procedure for disabling the SPI on page1954."
              },
              "LSBFIRST": {
                "bit": 7,
                "description": "Frame format\nNote: 1. This bit should not be changed when communication is ongoing.\nNote: 2. This bit is not used in SPI TI mode."
              },
              "SSI": {
                "bit": 8,
                "description": "Internal slave select\nThis bit has an effect only when the SSM bit is set. The value of this bit is forced onto the NSS pin and the I/O value of the NSS pin is ignored.\nNote: This bit is not used in SPI TI mode."
              },
              "SSM": {
                "bit": 9,
                "description": "Software slave management\nWhen the SSM bit is set, the NSS pin input is replaced with the value from the SSI bit.\nNote: This bit is not used in SPI TI mode."
              },
              "RXONLY": {
                "bit": 10,
                "description": "Receive only mode enabled. \nThis bit enables simplex communication using a single unidirectional line to receive data exclusively. Keep BIDIMODE bit clear when receive only mode is active.This bit is also useful in a multislave system in which this particular slave is not accessed, the output from the accessed slave is not corrupted."
              },
              "CRCL": {
                "bit": 11,
                "description": "CRC length\nThis bit is set and cleared by software to select the CRC length.\nNote: This bit should be written only when SPI is disabled (SPE = 0) for correct operation."
              },
              "CRCNEXT": {
                "bit": 12,
                "description": "Transmit CRC next\nNote: This bit has to be written as soon as the last data is written in the SPI_DR register."
              },
              "CRCEN": {
                "bit": 13,
                "description": "Hardware CRC calculation enable\nNote: This bit should be written only when SPI is disabled (SPE = 0) for correct operation."
              },
              "BIDIOE": {
                "bit": 14,
                "description": "Output enable in bidirectional mode\nThis bit combined with the BIDIMODE bit selects the direction of transfer in bidirectional mode.\nNote: In master mode, the MOSI pin is used and in slave mode, the MISO pin is used."
              },
              "BIDIMODE": {
                "bit": 15,
                "description": "Bidirectional data mode enable. \nThis bit enables half-duplex communication using common single bidirectional data line. Keep RXONLY bit clear when bidirectional mode is active."
              }
            },
            "SPI_CR2": {
              "RXDMAEN": {
                "bit": 0,
                "description": "Rx buffer DMA enable\nWhen this bit is set, a DMA request is generated whenever the RXNE flag is set."
              },
              "TXDMAEN": {
                "bit": 1,
                "description": "Tx buffer DMA enable\nWhen this bit is set, a DMA request is generated whenever the TXE flag is set."
              },
              "SSOE": {
                "bit": 2,
                "description": "SS output enable\nNote: This bit is not used in SPI TI mode."
              },
              "NSSP": {
                "bit": 3,
                "description": "NSS pulse management\nThis bit is used in master mode only. it allows the SPI to generate an NSS pulse between two consecutive data when doing continuous transfers. In the case of a single data transfer, it forces the NSS pin high level after the transfer. \nIt has no meaning if CPHA = 1, or FRF = 1.\nNote: 1. This bit must be written only when the SPI is disabled (SPE=0).\nNote: 2. This bit is not used in SPI TI mode."
              },
              "FRF": {
                "bit": 4,
                "description": "Frame format\n1 SPI TI mode\nNote: This bit must be written only when the SPI is disabled (SPE=0)."
              },
              "ERRIE": {
                "bit": 5,
                "description": "Error interrupt enable\nThis bit controls the generation of an interrupt when an error condition occurs (CRCERR, OVR, MODF in SPI mode, FRE at TI mode)."
              },
              "RXNEIE": {
                "bit": 6,
                "description": "RX buffer not empty interrupt enable"
              },
              "TXEIE": {
                "bit": 7,
                "description": "Tx buffer empty interrupt enable"
              },
              "DS": {
                "bit": 8,
                "description": "Data size\nThese bits configure the data length for SPI transfers.\nIf software attempts to write one of the Not used values, they are forced to the value 0111\n(8-bit)",
                "width": 4
              },
              "FRXTH": {
                "bit": 12,
                "description": "FIFO reception threshold\nThis bit is used to set the threshold of the RXFIFO that triggers an RXNE event"
              },
              "LDMA_RX": {
                "bit": 13,
                "description": "Last DMA transfer for reception\nThis bit is used in data packing mode, to define if the total number of data to receive by DMA is odd or even. It has significance only if the RXDMAEN bit in the SPI_CR2 register is set and if packing mode is used (data length =< 8-bit and write access to SPI_DR is 16-bit wide). It has to be written when the SPI is disabled (SPE = 0 in the SPI_CR1 register).\nNote: Refer to Procedure for disabling the SPI on page1954 if the CRCEN bit is set."
              },
              "LDMA_TX": {
                "bit": 14,
                "description": "Last DMA transfer for transmission\nThis bit is used in data packing mode, to define if the total number of data to transmit by DMA is odd or even. It has significance only if the TXDMAEN bit in the SPI_CR2 register is set and if packing mode is used (data length =< 8-bit and write access to SPI_DR is 16-bit wide). It has to be written when the SPI is disabled (SPE = 0 in the SPI_CR1 register).\nNote: Refer to Procedure for disabling the SPI on page1954 if the CRCEN bit is set."
              }
            },
            "SPI_SR": {
              "RXNE": {
                "bit": 0,
                "description": "Receive buffer not empty"
              },
              "TXE": {
                "bit": 1,
                "description": "Transmit buffer empty"
              },
              "CRCERR": {
                "bit": 4,
                "description": "CRC error flag\nNote: This flag is set by hardware and cleared by software writing 0."
              },
              "MODF": {
                "bit": 5,
                "description": "Mode fault\nThis flag is set by hardware and reset by a software sequence. Refer to Section1: Mode fault (MODF) on page1964 for the software sequence."
              },
              "OVR": {
                "bit": 6,
                "description": "Overrun flag\nThis flag is set by hardware and reset by a software sequence."
              },
              "BSY": {
                "bit": 7,
                "description": "Busy flag\nThis flag is set and cleared by hardware.\nNote: The BSY flag must be used with caution: refer to Section133.4.10: SPI status flags and Procedure for disabling the SPI on page1954."
              },
              "FRE": {
                "bit": 8,
                "description": "Frame format error\nThis flag is used for SPI in TI slave mode. Refer to Section133.4.11: SPI error flags.\nThis flag is set by hardware and reset when SPI_SR is read by software."
              },
              "FRLVL": {
                "bit": 9,
                "description": "FIFO reception level\nThese bits are set and cleared by hardware.\nNote: These bits are not used in SPI receive-only mode while CRC calculation is enabled.",
                "width": 2
              },
              "FTLVL": {
                "bit": 11,
                "description": "FIFO transmission level\nThese bits are set and cleared by hardware.",
                "width": 2
              }
            },
            "SPI_DR": {
              "DR": {
                "bit": 0,
                "description": "Data register\nData received or to be transmitted\nThe data register serves as an interface between the Rx and Tx FIFOs. When the data register is read, RxFIFO is accessed while the write to data register accesses TxFIFO (See Section133.4.9: Data transmission and reception procedures).\nNote: Data is always right-aligned. Unused bits are ignored when writing to the register, and read as zero when the register is read. The Rx threshold setting must always correspond with the read access currently used.",
                "width": 16
              }
            },
            "SPI_CRCPR": {
              "CRCPOLY": {
                "bit": 0,
                "description": "CRC polynomial register\nThis register contains the polynomial for the CRC calculation.\nThe CRC polynomial (0x0007) is the reset value of this register. Another polynomial can be configured as required.",
                "width": 16
              }
            },
            "SPI_RXCRCR": {
              "RXCRC": {
                "bit": 0,
                "description": "Rx CRC register\nWhen CRC calculation is enabled, the RXCRC[15:0] bits contain the computed CRC value of the subsequently received bytes. This register is reset when the CRCEN bit in SPI_CR1 register is written to 1. The CRC is calculated serially using the polynomial programmed in the SPI_CRCPR register. \nOnly the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPI_CR1 is cleared). CRC calculation is done based on any CRC8 standard.\nThe entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPI_CR1 register is set). CRC calculation is done based on any CRC16 standard.\nNote: A read to this register when the BSY Flag is set could return an incorrect value.",
                "width": 16
              }
            },
            "SPI_TXCRCR": {
              "TXCRC": {
                "bit": 0,
                "description": "Tx CRC register\nWhen CRC calculation is enabled, the TXCRC[7:0] bits contain the computed CRC value of the subsequently transmitted bytes. This register is reset when the CRCEN bit of SPI_CR1 is written to 1. The CRC is calculated serially using the polynomial programmed in the SPI_CRCPR register.\nOnly the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPI_CR1 is cleared). CRC calculation is done based on any CRC8 standard.\nThe entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPI_CR1 register is set). CRC calculation is done based on any CRC16 standard.\nNote: A read to this register when the BSY flag is set could return an incorrect value.",
                "width": 16
              }
            }
          }
        },
        "SYSCFG": {
          "instances": [
            {
              "name": "SYSCFG",
              "base": "0x40010000"
            }
          ],
          "registers": {
            "SYSCFG_CFGR1": {
              "offset": "0x00",
              "size": 32,
              "description": "SYSCFG configuration register 1"
            },
            "SYSCFG_CFGR2": {
              "offset": "0x18",
              "size": 32,
              "description": "SYSCFG configuration register 2"
            },
            "SYSCFG_SCSR": {
              "offset": "0x1C",
              "size": 32,
              "description": "SYSCFG SRAM2 control and status register"
            },
            "SYSCFG_SKR": {
              "offset": "0x20",
              "size": 32,
              "description": "SYSCFG SRAM2 key register"
            },
            "SYSCFG_TSCCR": {
              "offset": "0x24",
              "size": 32,
              "description": "SYSCFG TSC comparator register"
            },
            "SYSCFG_ITLINE0": {
              "offset": "0x80",
              "size": 32,
              "description": "SYSCFG interrupt line 0 status register"
            },
            "SYSCFG_ITLINE1": {
              "offset": "0x84",
              "size": 32,
              "description": "SYSCFG interrupt line 1 status register"
            },
            "SYSCFG_ITLINE2": {
              "offset": "0x88",
              "size": 32,
              "description": "SYSCFG interrupt line 2 status register"
            },
            "SYSCFG_ITLINE3": {
              "offset": "0x8C",
              "size": 32,
              "description": "SYSCFG interrupt line 3 status register"
            },
            "SYSCFG_ITLINE4": {
              "offset": "0x90",
              "size": 32,
              "description": "SYSCFG interrupt line 4 status register"
            },
            "SYSCFG_ITLINE5": {
              "offset": "0x94",
              "size": 32,
              "description": "SYSCFG interrupt line 5 status register"
            },
            "SYSCFG_ITLINE6": {
              "offset": "0x98",
              "size": 32,
              "description": "SYSCFG interrupt line 6 status register"
            },
            "SYSCFG_ITLINE7": {
              "offset": "0x9C",
              "size": 32,
              "description": "SYSCFG interrupt line 7 status register"
            },
            "SYSCFG_ITLINE8": {
              "offset": "0xA0",
              "size": 32,
              "description": "SYSCFG interrupt line 8 status register"
            },
            "SYSCFG_ITLINE9": {
              "offset": "0xA4",
              "size": 32,
              "description": "SYSCFG interrupt line 9 status register"
            },
            "SYSCFG_ITLINE10": {
              "offset": "0xA8",
              "size": 32,
              "description": "SYSCFG interrupt line 10 status register"
            },
            "SYSCFG_ITLINE11": {
              "offset": "0xAC",
              "size": 32,
              "description": "SYSCFG interrupt line 11 status register"
            },
            "SYSCFG_ITLINE12": {
              "offset": "0xB0",
              "size": 32,
              "description": "SYSCFG interrupt line 12 status register"
            },
            "SYSCFG_ITLINE13": {
              "offset": "0xB4",
              "size": 32,
              "description": "SYSCFG interrupt line 13 status register"
            },
            "SYSCFG_ITLINE14": {
              "offset": "0xB8",
              "size": 32,
              "description": "SYSCFG interrupt line 14 status register"
            },
            "SYSCFG_ITLINE15": {
              "offset": "0xBC",
              "size": 32,
              "description": "SYSCFG interrupt line 15 status register"
            },
            "SYSCFG_ITLINE16": {
              "offset": "0xC0",
              "size": 32,
              "description": "SYSCFG interrupt line 16 status register"
            },
            "SYSCFG_ITLINE17": {
              "offset": "0xC4",
              "size": 32,
              "description": "SYSCFG interrupt line 17 status register"
            },
            "SYSCFG_ITLINE18": {
              "offset": "0xC8",
              "size": 32,
              "description": "SYSCFG interrupt line 18 status register"
            },
            "SYSCFG_ITLINE19": {
              "offset": "0xCC",
              "size": 32,
              "description": "SYSCFG interrupt line 19 status register"
            },
            "SYSCFG_ITLINE20": {
              "offset": "0xD0",
              "size": 32,
              "description": "SYSCFG interrupt line 20 status register"
            },
            "SYSCFG_ITLINE21": {
              "offset": "0xD4",
              "size": 32,
              "description": "SYSCFG interrupt line 21 status register"
            },
            "SYSCFG_ITLINE22": {
              "offset": "0xD8",
              "size": 32,
              "description": "SYSCFG interrupt line 22 status register"
            },
            "SYSCFG_ITLINE23": {
              "offset": "0xDC",
              "size": 32,
              "description": "SYSCFG interrupt line 23 status register"
            },
            "SYSCFG_ITLINE24": {
              "offset": "0xE0",
              "size": 32,
              "description": "SYSCFG interrupt line 24 status register"
            },
            "SYSCFG_ITLINE25": {
              "offset": "0xE4",
              "size": 32,
              "description": "SYSCFG interrupt line 25 status register"
            },
            "SYSCFG_ITLINE26": {
              "offset": "0xE8",
              "size": 32,
              "description": "SYSCFG interrupt line 26 status register"
            },
            "SYSCFG_ITLINE27": {
              "offset": "0xEC",
              "size": 32,
              "description": "SYSCFG interrupt line 27 status register"
            },
            "SYSCFG_ITLINE28": {
              "offset": "0xF0",
              "size": 32,
              "description": "SYSCFG interrupt line 28 status register"
            },
            "SYSCFG_ITLINE29": {
              "offset": "0xF4",
              "size": 32,
              "description": "SYSCFG interrupt line 29 status register"
            },
            "SYSCFG_ITLINE30": {
              "offset": "0xF8",
              "size": 32,
              "description": "SYSCFG interrupt line 30 status register"
            },
            "SYSCFG_ITLINE31": {
              "offset": "0xFC",
              "size": 32,
              "description": "SYSCFG interrupt line 31 status register"
            }
          },
          "bits": {
            "SYSCFG_CFGR1": {
              "MEM_MODE": {
                "bit": 0,
                "description": "Memory mapping selection bits\nThese bits are set and cleared by software. They control the memory internal mapping at address 0x000010000. After reset these bits take on the value selected by the actual boot mode configuration. Refer to Section12.5: Boot configuration for more details.\nX0: Main flash memory mapped at 0x000010000",
                "width": 2
              },
              "PA11_RMP": {
                "bit": 3,
                "description": "PA11 pin remapping\nThis bit is set and cleared by software. When set, it remaps the PA11 pin to operate as PA9 GPIO port, instead as PA11 GPIO port."
              },
              "PA12_RMP": {
                "bit": 4,
                "description": "PA12 pin remapping\nThis bit is set and cleared by software. When set, it remaps the PA12 pin to operate as PA10 GPIO port, instead as PA12 GPIO port."
              },
              "IR_POL": {
                "bit": 5,
                "description": "IR output polarity selection"
              },
              "IR_MOD": {
                "bit": 6,
                "description": "IR Modulation Envelope signal selection\nThis bitfield selects the signal for IR modulation envelope:",
                "width": 2
              },
              "BOOSTEN": {
                "bit": 8,
                "description": "I/O analog switch voltage booster enable\nThis bit selects the way of supplying I/O analog switches:\nWhen using the analog inputs , setting to 0 is recommended for high V<sub>DD</sub>, setting to 1 for low V<sub>DD</sub> (less than 2.4 V)."
              },
              "I2C_PB6_FMP": {
                "bit": 16,
                "description": "Fast Mode Plus (FM+) enable for PB6\nThis bit is set and cleared by software. It enables I<sup>2</sup>C FM+ driving capability on PB6 I/O port.\nWith this bit in disable state, the I<sup>2</sup>C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I<sup>2</sup>C FM+ is enabled, the speed control is ignored.\nNote: This control bit is kept for legacy reasons. It is recommended to use the FMP bit of the I2Cx_CR1 register instead."
              },
              "I2C_PB7_FMP": {
                "bit": 17,
                "description": "Fast Mode Plus (FM+) enable for PB7\nThis bit is set and cleared by software. It enables I<sup>2</sup>C FM+ driving capability on PB7 I/O port.\nWith this bit in disable state, the I<sup>2</sup>C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I<sup>2</sup>C FM+ is enabled, the speed control is ignored.\nNote: This control bit is kept for legacy reasons. It is recommended to use the FMP bit of the I2Cx_CR1 register instead."
              },
              "I2C_PB8_FMP": {
                "bit": 18,
                "description": "Fast Mode Plus (FM+) enable for PB8\nThis bit is set and cleared by software. It enables I<sup>2</sup>C FM+ driving capability on PB8 I/O port.\nWith this bit in disable state, the I<sup>2</sup>C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I<sup>2</sup>C FM+ is enabled, the speed control is ignored.\nNote: This control bit is kept for legacy reasons. It is recommended to use the FMP bit of the I2Cx_CR1 register instead."
              },
              "I2C_PB9_FMP": {
                "bit": 19,
                "description": "Fast Mode Plus (FM+) enable for PB9\nThis bit is set and cleared by software. It enables I<sup>2</sup>C FM+ driving capability on PB9 I/O port.\nWith this bit in disable state, the I<sup>2</sup>C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I<sup>2</sup>C FM+ is enabled, the speed control is ignored.\nNote: This control bit is kept for legacy reasons. It is recommended to use the FMP bit of the I2Cx_CR1 register instead."
              },
              "I2C_PA9_FMP": {
                "bit": 22,
                "description": "Fast Mode Plus (FM+) enable for PA9\nThis bit is set and cleared by software. It enables I<sup>2</sup>C FM+ driving capability on PA9 I/O port.\nWith this bit in disable state, the I<sup>2</sup>C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I<sup>2</sup>C FM+ is enabled, the speed control is ignored.\nNote: This control bit is kept for legacy reasons. It is recommended to use the FMP bit of the I2Cx_CR1 register instead."
              },
              "I2C_PA10_FMP": {
                "bit": 23,
                "description": "Fast Mode Plus (FM+) enable for PA10\nThis bit is set and cleared by software. It enables I<sup>2</sup>C FM+ driving capability on PA10 I/O port.\nWith this bit in disable state, the I<sup>2</sup>C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I<sup>2</sup>C FM+ is enabled, the speed control is ignored.\nNote: This control bit is kept for legacy reasons. It is recommended to use the FMP bit of the I2Cx_CR1 register instead."
              },
              "I2C3_FMP": {
                "bit": 24,
                "description": "Fast Mode Plus (FM+) enable for I2C3\nThis bit is set and cleared by software. It enables I<sup>2</sup>C FM+ driving capability on I/O ports configured as I2C3 through GPIOx_AFR registers.\nWith this bit in disable state, the I<sup>2</sup>C FM+ driving capability on I/O ports configured as I2C3 can be enabled through their corresponding I2Cx_FMP bit. When I<sup>2</sup>C FM+ is enabled, the speed control is ignored.\nNote: This control bit is kept for legacy reasons. It is recommended to use the FMP bit of the I2Cx_CR1 register instead."
              }
            },
            "SYSCFG_CFGR2": {
              "CCL": {
                "bit": 0,
                "description": "Cortex<Superscript>1<Default 1 Font>-M0+ LOCKUP bit enable bit \nThis bit is set by software and cleared by a system reset. It can be use to enable and lock the connection of Cortex<Superscript>1<Default 1 Font>-M0+ LOCKUP (Hardfault) output to TIM1/15/16 Break input."
              },
              "SPL": {
                "bit": 1,
                "description": "SRAM1 parity lock bit\nThis bit is set by software and cleared by a system reset. It can be used to enable and lock the SRAM1 parity error signal connection to TIM1/15/16 Break input."
              },
              "PVDL": {
                "bit": 2,
                "description": "PVD lock enable bit\nThis bit is set by software and cleared by a system reset. It can be used to enable and lock the PVD connection to TIM1/15/16 Break input, as well as the PVDE and PLS[2:0] in the PWR_CR register."
              },
              "ECCL": {
                "bit": 3,
                "description": "ECC error lock bit\nThis bit is set by software and cleared by a system reset. It can be used to enable and lock the flash ECC 2-bit error detection signal connection to TIM1/15/16 Break input."
              },
              "BKPL": {
                "bit": 4,
                "description": "Backup SRAM2 parity lock\nThis bit is set by software and cleared by a system reset. It can be used to enable and lock the SRAM2 parity error signal connection to TIM1/15/16 Break input."
              },
              "BKPF": {
                "bit": 7,
                "description": "Backup SRAM2 parity error flag\nThis bit is set by hardware when an SRAM2 parity error is detected. It is cleared by software by writing 1."
              },
              "SPF": {
                "bit": 8,
                "description": "SRAM1 parity error flag\nThis bit is set by hardware when an SRAM1 parity error is detected. It is cleared by software by writing 1."
              }
            },
            "SYSCFG_SCSR": {
              "SRAM2ER": {
                "bit": 0,
                "description": "SRAM2 erase\nSetting this bit starts a hardware SRAM2 erase operation. This bit is automatically cleared at the end of the SRAM2 erase operation.\nNote: This bit is write-protected: setting this bit is possible only after the correct key sequence is written in the SYSCFG_SKR register."
              },
              "SRAM2BSY": {
                "bit": 1,
                "description": "SRAM2 busy by erase operation"
              }
            },
            "SYSCFG_SKR": {
              "KEY": {
                "bit": 0,
                "description": "SRAM2 write protection key for software erase\nThe following steps are required to unlock the write protection of the SRAM2ER bit in the SYSCFG_CFGR2 register:\nWrite 0xCA into KEY[7:0]\nWrite 0x53 into KEY[7:0]\nWriting a wrong key reactivates the write protection.",
                "width": 8
              }
            },
            "SYSCFG_TSCCR": {
              "G2_IO1": {
                "bit": 0,
                "description": "Comparator mode for group 2 on I/O 1"
              },
              "G2_IO3": {
                "bit": 1,
                "description": "Comparator mode for group 2 on I/O 3"
              },
              "G4_IO3": {
                "bit": 2,
                "description": "Comparator mode for group 4 on I/O 3"
              },
              "G6_IO1": {
                "bit": 3,
                "description": "Comparator mode for group 6 on I/O 1"
              },
              "G7_IO1": {
                "bit": 4,
                "description": "Comparator mode for group 7 on I/O 1"
              },
              "TSC_IOCTRL": {
                "bit": 5,
                "description": "I/O control in comparator mode\nThe I/O control in comparator mode can be overwritten by hardware."
              }
            },
            "SYSCFG_ITLINE0": {
              "WWDG": {
                "bit": 0,
                "description": "Window watchdog interrupt pending flag"
              }
            },
            "SYSCFG_ITLINE1": {
              "PVDOUT": {
                "bit": 0,
                "description": "PVD supply monitoring interrupt request pending (EXTI line 16)."
              },
              "PVMOUT1": {
                "bit": 1,
                "description": "V<sub>DDUSB</sub> supply monitoring interrupt request pending (EXTI line 19)"
              },
              "PVMOUT3": {
                "bit": 2,
                "description": "ADC supply monitoring interrupt request pending (EXTI line 20)"
              },
              "PVMOUT4": {
                "bit": 3,
                "description": "DAC supply monitoring interrupt request pending (EXTI line 21)"
              }
            },
            "SYSCFG_ITLINE2": {
              "TAMP": {
                "bit": 0,
                "description": "Tamper interrupt request pending (EXTI line 21)"
              },
              "RTC": {
                "bit": 1,
                "description": "RTC interrupt request pending (EXTI line 19)"
              }
            },
            "SYSCFG_ITLINE3": {
              "FLASH_ITF": {
                "bit": 0,
                "description": "Flash interface interrupt request pending"
              },
              "FLASH_ECC": {
                "bit": 1,
                "description": "Flash interface ECC interrupt request pending"
              }
            },
            "SYSCFG_ITLINE4": {
              "RCC": {
                "bit": 0,
                "description": "Reset and clock control interrupt request pending"
              },
              "CRS": {
                "bit": 1,
                "description": "CRS interrupt request pending"
              }
            },
            "SYSCFG_ITLINE5": {
              "EXTI0": {
                "bit": 0,
                "description": "EXTI line 0 interrupt request pending"
              },
              "EXTI1": {
                "bit": 1,
                "description": "EXTI line 1 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE6": {
              "EXTI2": {
                "bit": 0,
                "description": "EXTI line 2 interrupt request pending"
              },
              "EXTI3": {
                "bit": 1,
                "description": "EXTI line 3 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE7": {
              "EXTI4": {
                "bit": 0,
                "description": "EXTI line 4 interrupt request pending"
              },
              "EXTI5": {
                "bit": 1,
                "description": "EXTI line 5 interrupt request pending"
              },
              "EXTI6": {
                "bit": 2,
                "description": "EXTI line 6 interrupt request pending"
              },
              "EXTI7": {
                "bit": 3,
                "description": "EXTI line 7 interrupt request pending"
              },
              "EXTI8": {
                "bit": 4,
                "description": "EXTI line 8 interrupt request pending"
              },
              "EXTI9": {
                "bit": 5,
                "description": "EXTI line 9 interrupt request pending"
              },
              "EXTI10": {
                "bit": 6,
                "description": "EXTI line 10 interrupt request pending"
              },
              "EXTI11": {
                "bit": 7,
                "description": "EXTI line 11 interrupt request pending"
              },
              "EXTI12": {
                "bit": 8,
                "description": "EXTI line 12 interrupt request pending"
              },
              "EXTI13": {
                "bit": 9,
                "description": "EXTI line 13 interrupt request pending"
              },
              "EXTI14": {
                "bit": 10,
                "description": "EXTI line 14 interrupt request pending"
              },
              "EXTI15": {
                "bit": 11,
                "description": "EXTI line 15 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE8": {
              "USB": {
                "bit": 0,
                "description": "USB interrupt request pending"
              }
            },
            "SYSCFG_ITLINE9": {
              "DMA1_CH1": {
                "bit": 0,
                "description": "DMA1 channel 1 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE10": {
              "DMA1_CH2": {
                "bit": 0,
                "description": "DMA1 channel 2 interrupt request pending"
              },
              "DMA1_CH3": {
                "bit": 1,
                "description": "DMA1 channel 3 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE11": {
              "DMAMUX": {
                "bit": 0,
                "description": "DMAMUX interrupt request pending"
              },
              "DMA1_CH4": {
                "bit": 1,
                "description": "DMA1 channel 4 interrupt request pending"
              },
              "DMA1_CH5": {
                "bit": 2,
                "description": "DMA1 channel 5 interrupt request pending"
              },
              "DMA1_CH6": {
                "bit": 3,
                "description": "DMA1 channel 6 interrupt request pending"
              },
              "DMA1_CH7": {
                "bit": 4,
                "description": "DMA1 channel 7 interrupt request pending"
              },
              "DMA2_CH1": {
                "bit": 5,
                "description": "DMA2 channel 1 interrupt request pending"
              },
              "DMA2_CH2": {
                "bit": 6,
                "description": "DMA2 channel 2 interrupt request pending"
              },
              "DMA2_CH3": {
                "bit": 7,
                "description": "DMA2 channel 3 interrupt request pending"
              },
              "DMA2_CH4": {
                "bit": 8,
                "description": "DMA2 channel 4 interrupt request pending"
              },
              "DMA2_CH5": {
                "bit": 9,
                "description": "DMA2 channel 5 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE12": {
              "ADC": {
                "bit": 0,
                "description": "ADC interrupt request pending"
              },
              "COMP1": {
                "bit": 1,
                "description": "Comparator 1 interrupt request pending (EXTI line 17)"
              },
              "COMP2": {
                "bit": 2,
                "description": "Comparator 2 interrupt request pending (EXTI line 18)"
              }
            },
            "SYSCFG_ITLINE13": {
              "TIM1_CCU": {
                "bit": 0,
                "description": "Timer 1 commutation interrupt request pending"
              },
              "TIM1_TRG": {
                "bit": 1,
                "description": "Timer 1 trigger interrupt request pending"
              },
              "TIM1_UPD": {
                "bit": 2,
                "description": "Timer 1 update interrupt request pending"
              },
              "TIM1_BRK": {
                "bit": 3,
                "description": "Timer 1 break interrupt request pending"
              }
            },
            "SYSCFG_ITLINE14": {
              "TIM1_CC1": {
                "bit": 0,
                "description": "Timer 1 capture compare 1 interrupt request pending"
              },
              "TIM1_CC2": {
                "bit": 1,
                "description": "Timer 1 capture compare 2 interrupt request pending"
              },
              "TIM1_CC3": {
                "bit": 2,
                "description": "Timer 1 capture compare 3 interrupt request pending"
              },
              "TIM1_CC4": {
                "bit": 3,
                "description": "Timer 1 capture compare 4 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE15": {
              "TIM2": {
                "bit": 0,
                "description": "Timer 2 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE16": {
              "TIM3": {
                "bit": 0,
                "description": "Timer 3 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE17": {
              "TIM6": {
                "bit": 0,
                "description": "Timer 6 interrupt request pending"
              },
              "DAC": {
                "bit": 1,
                "description": "DAC underrun interrupt request pending"
              },
              "LPTIM1": {
                "bit": 2,
                "description": "Low-power timer 1 interrupt request pending (EXTI line 29)"
              }
            },
            "SYSCFG_ITLINE18": {
              "TIM7": {
                "bit": 0,
                "description": "Timer 7 interrupt request pending"
              },
              "LPTIM2": {
                "bit": 1,
                "description": "Low-power timer 2 interrupt request pending (EXTI line 30)"
              }
            },
            "SYSCFG_ITLINE19": {
              "TIM15": {
                "bit": 0,
                "description": "Timer 15 interrupt request pending"
              },
              "LPTIM3": {
                "bit": 1,
                "description": "Low-power timer 3 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE20": {
              "TIM16": {
                "bit": 0,
                "description": "Timer 16 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE21": {
              "TSC_MCE": {
                "bit": 0,
                "description": "TSC max count error interrupt request pending"
              },
              "TSC_EOA": {
                "bit": 1,
                "description": "TSC end of acquisition interrupt request pending"
              }
            },
            "SYSCFG_ITLINE22": {
              "LCD": {
                "bit": 0,
                "description": "LCD interrupt request pending"
              }
            },
            "SYSCFG_ITLINE23": {
              "I2C1": {
                "bit": 0,
                "description": "I2C1 interrupt request pending (EXTI line 33)"
              }
            },
            "SYSCFG_ITLINE24": {
              "I2C2": {
                "bit": 0,
                "description": "I2C2 interrupt request pending"
              },
              "I2C4": {
                "bit": 1,
                "description": "I2C4 interrupt request pending"
              },
              "I2C3": {
                "bit": 2,
                "description": "I2C3 interrupt request pending (EXTI line 23)"
              }
            },
            "SYSCFG_ITLINE25": {
              "SPI1": {
                "bit": 0,
                "description": "SPI1 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE26": {
              "SPI2": {
                "bit": 0,
                "description": "SPI2 interrupt request pending"
              },
              "SPI3": {
                "bit": 1,
                "description": "SPI3 interrupt request pending"
              }
            },
            "SYSCFG_ITLINE27": {
              "USART1": {
                "bit": 0,
                "description": "USART1 interrupt request pending, combined with EXTI line 25"
              }
            },
            "SYSCFG_ITLINE28": {
              "USART2": {
                "bit": 0,
                "description": "USART2 interrupt request pending (EXTI line 35)"
              },
              "LPUART2": {
                "bit": 1,
                "description": "LPUART2 interrupt request pending (EXTI line 31)"
              }
            },
            "SYSCFG_ITLINE29": {
              "USART3": {
                "bit": 0,
                "description": "USART3 interrupt request pending"
              },
              "LPUART1": {
                "bit": 1,
                "description": "LPUART1 interrupt request pending (EXTI line 30)"
              }
            },
            "SYSCFG_ITLINE30": {
              "USART4": {
                "bit": 0,
                "description": "USART4 interrupt request pending"
              },
              "LPUART3": {
                "bit": 1,
                "description": "LPUART3 interrupt request pending (EXTI line 32)"
              }
            },
            "SYSCFG_ITLINE31": {
              "RNG": {
                "bit": 0,
                "description": "RNG interrupt request pending"
              },
              "AES": {
                "bit": 1,
                "description": "AES interrupt request pending"
              }
            }
          }
        },
        "TAMP": {
          "instances": [
            {
              "name": "TAMP",
              "base": "0x4000B000"
            }
          ],
          "registers": {
            "TAMP_CR1": {
              "offset": "0x00",
              "size": 32,
              "description": "TAMP control register 1"
            },
            "TAMP_CR2": {
              "offset": "0x04",
              "size": 32,
              "description": "TAMP control register 2"
            },
            "TAMP_CR3": {
              "offset": "0x08",
              "size": 32,
              "description": "TAMP control register 3"
            },
            "TAMP_FLTCR": {
              "offset": "0x0C",
              "size": 32,
              "description": "TAMP filter control register"
            },
            "TAMP_IER": {
              "offset": "0x2C",
              "size": 32,
              "description": "TAMP interrupt enable register"
            },
            "TAMP_SR": {
              "offset": "0x30",
              "size": 32,
              "description": "TAMP status register"
            },
            "TAMP_MISR": {
              "offset": "0x34",
              "size": 32,
              "description": "TAMP masked interrupt status register"
            },
            "TAMP_SCR": {
              "offset": "0x3C",
              "size": 32,
              "description": "TAMP status clear register"
            },
            "TAMP_BKP0R": {
              "offset": "0x100",
              "size": 32,
              "description": "TAMP backup 0 register"
            },
            "TAMP_BKP1R": {
              "offset": "0x104",
              "size": 32,
              "description": "TAMP backup 1 register"
            },
            "TAMP_BKP2R": {
              "offset": "0x108",
              "size": 32,
              "description": "TAMP backup 2 register"
            },
            "TAMP_BKP3R": {
              "offset": "0x10C",
              "size": 32,
              "description": "TAMP backup 3 register"
            },
            "TAMP_BKP4R": {
              "offset": "0x110",
              "size": 32,
              "description": "TAMP backup 4 register"
            },
            "TAMP_BKP5R": {
              "offset": "0x114",
              "size": 32,
              "description": "TAMP backup 5 register"
            },
            "TAMP_BKP6R": {
              "offset": "0x118",
              "size": 32,
              "description": "TAMP backup 6 register"
            },
            "TAMP_BKP7R": {
              "offset": "0x11C",
              "size": 32,
              "description": "TAMP backup 7 register"
            },
            "TAMP_BKP8R": {
              "offset": "0x120",
              "size": 32,
              "description": "TAMP backup 8 register"
            }
          },
          "bits": {
            "TAMP_CR1": {
              "TAMP1E": {
                "bit": 0,
                "description": "Tamper detection on TAMP_IN1 enable"
              },
              "TAMP2E": {
                "bit": 1,
                "description": "Tamper detection on TAMP_IN2 enable<sup>(1)</sup>"
              },
              "TAMP3E": {
                "bit": 2,
                "description": "Tamper detection on TAMP_IN3 enable<sup>(1)</sup>"
              },
              "TAMP4E": {
                "bit": 3,
                "description": "Tamper detection on TAMP_IN4 enable<sup>(1)</sup>"
              },
              "TAMP5E": {
                "bit": 4,
                "description": "Tamper detection on TAMP_IN5 enable<sup>(1)</sup>"
              },
              "ITAMP3E": {
                "bit": 18,
                "description": "Internal tamper 3 enable"
              },
              "ITAMP4E": {
                "bit": 19,
                "description": "Internal tamper 4 enable"
              },
              "ITAMP5E": {
                "bit": 20,
                "description": "Internal tamper 5 enable"
              },
              "ITAMP6E": {
                "bit": 21,
                "description": "Internal tamper 6 enable"
              }
            },
            "TAMP_CR2": {
              "TAMP1POM": {
                "bit": 0,
                "description": "Tamper 1 potential mode"
              },
              "TAMP2POM": {
                "bit": 1,
                "description": "Tamper 2 potential mode"
              },
              "TAMP3POM": {
                "bit": 2,
                "description": "Tamper 3 potential mode"
              },
              "TAMP4POM": {
                "bit": 3,
                "description": "Tamper 4 potential mode"
              },
              "TAMP5POM": {
                "bit": 4,
                "description": "Tamper 5 potential mode"
              },
              "TAMP1MSK": {
                "bit": 16,
                "description": "Tamper 1 mask\nThe tamper 1 interrupt must not be enabled when TAMP1MSK is set."
              },
              "TAMP2MSK": {
                "bit": 17,
                "description": "Tamper 2 mask\nThe tamper 2 interrupt must not be enabled when TAMP2MSK is set."
              },
              "TAMP3MSK": {
                "bit": 18,
                "description": "Tamper 3 mask\nThe tamper 3 interrupt must not be enabled when TAMP3MSK is set."
              },
              "BKBLOCK": {
                "bit": 22,
                "description": "Backup registers and device secrets<sup>(1)</sup> access blocked"
              },
              "BKERASE": {
                "bit": 23,
                "description": "Backup registers and device secrets<sup>(1)</sup> erase\nWriting 1 to this bit reset the backup registers and device secrets<sup>(1)</sup>. Writing 0 has no effect. This bit is always read as 0."
              },
              "TAMP1TRG": {
                "bit": 24,
                "description": "Active level for tamper 1 input\nIf TAMPFLT1=100 tamper 1 input rising edge triggers a tamper detection event.\nIf TAMPFLT1=100 tamper 1 input falling edge triggers a tamper detection event."
              },
              "TAMP2TRG": {
                "bit": 25,
                "description": "Active level for tamper 2 input\nIf TAMPFLT = 00 tamper 2 input rising edge triggers a tamper detection event.\nIf TAMPFLT1=100 tamper 2 input falling edge triggers a tamper detection event."
              },
              "TAMP3TRG": {
                "bit": 26,
                "description": "Active level for tamper 3 input\nIf TAMPFLT1=100 tamper 3 input rising edge triggers a tamper detection event.\nIf TAMPFLT1=100 tamper 3 input falling edge triggers a tamper detection event."
              },
              "TAMP4TRG": {
                "bit": 27,
                "description": "Active level for tamper 4 input (active mode disabled)\nIf TAMPFLT1=100 tamper 4 input rising edge triggers a tamper detection event.\nIf TAMPFLT1=100 tamper 4 input falling edge triggers a tamper detection event."
              },
              "TAMP5TRG": {
                "bit": 28,
                "description": "Active level for tamper 5 input (active mode disabled)\nIf TAMPFLT1=100 tamper 5 input rising edge triggers a tamper detection event.\nIf TAMPFLT1=100 tamper 5 input falling edge triggers a tamper detection event."
              }
            },
            "TAMP_CR3": {
              "ITAMP3POM": {
                "bit": 2,
                "description": "Internal tamper 3 potential mode"
              },
              "ITAMP4POM": {
                "bit": 3,
                "description": "Internal tamper 4 potential mode"
              },
              "ITAMP5POM": {
                "bit": 4,
                "description": "Internal tamper 5 potential mode"
              },
              "ITAMP6POM": {
                "bit": 5,
                "description": "Internal tamper 6 potential mode"
              }
            },
            "TAMP_FLTCR": {
              "TAMPFREQ": {
                "bit": 0,
                "description": "Tamper sampling frequency\nDetermines the frequency at which each of the TAMP_INx inputs are sampled.",
                "width": 3
              },
              "TAMPFLT": {
                "bit": 3,
                "description": "TAMP_INx filter count\nThese bits determines the number of consecutive samples at the specified level (TAMP*TRG) needed to activate a tamper event. TAMPFLT is valid for each of the TAMP_INx inputs.",
                "width": 2
              },
              "TAMPPRCH": {
                "bit": 5,
                "description": "TAMP_INx precharge duration\nThese bit determines the duration of time during which the pull-up/is activated before each sample. TAMPPRCH is valid for each of the TAMP_INx inputs.",
                "width": 2
              },
              "TAMPPUDIS": {
                "bit": 7,
                "description": "TAMP_INx pull-up disable\nThis bit determines if each of the TAMPx pins are precharged before each sample."
              }
            },
            "TAMP_IER": {
              "TAMP1IE": {
                "bit": 0,
                "description": "Tamper 1 interrupt enable"
              },
              "TAMP2IE": {
                "bit": 1,
                "description": "Tamper 2 interrupt enable"
              },
              "TAMP3IE": {
                "bit": 2,
                "description": "Tamper 3 interrupt enable"
              },
              "TAMP4IE": {
                "bit": 3,
                "description": "Tamper 4 interrupt enable"
              },
              "TAMP5IE": {
                "bit": 4,
                "description": "Tamper 5 interrupt enable"
              },
              "ITAMP3IE": {
                "bit": 18,
                "description": "Internal tamper 3 interrupt enable"
              },
              "ITAMP4IE": {
                "bit": 19,
                "description": "Internal tamper 4 interrupt enable"
              },
              "ITAMP5IE": {
                "bit": 20,
                "description": "Internal tamper 5 interrupt enable"
              },
              "ITAMP6IE": {
                "bit": 21,
                "description": "Internal tamper 6 interrupt enable"
              }
            },
            "TAMP_SR": {
              "TAMP1F": {
                "bit": 0,
                "description": "TAMP1 detection flag\nThis flag is set by hardware when a tamper detection event is detected on the TAMP1 input."
              },
              "TAMP2F": {
                "bit": 1,
                "description": "TAMP2 detection flag\nThis flag is set by hardware when a tamper detection event is detected on the TAMP2 input."
              },
              "TAMP3F": {
                "bit": 2,
                "description": "TAMP3 detection flag\nThis flag is set by hardware when a tamper detection event is detected on the TAMP3 input."
              },
              "TAMP4F": {
                "bit": 3,
                "description": "TAMP4 detection flag\nThis flag is set by hardware when a tamper detection event is detected on the TAMP4 input."
              },
              "TAMP5F": {
                "bit": 4,
                "description": "TAMP5 detection flag\nThis flag is set by hardware when a tamper detection event is detected on the TAMP5 input."
              },
              "ITAMP3F": {
                "bit": 18,
                "description": "Internal tamper 3 flag\nThis flag is set by hardware when a tamper detection event is detected on the internal tamper 3."
              },
              "ITAMP4F": {
                "bit": 19,
                "description": "Internal tamper 4 flag\nThis flag is set by hardware when a tamper detection event is detected on the internal tamper 4."
              },
              "ITAMP5F": {
                "bit": 20,
                "description": "Internal tamper 5 flag\nThis flag is set by hardware when a tamper detection event is detected on the internal tamper 5."
              },
              "ITAMP6F": {
                "bit": 21,
                "description": "Internal tamper 6 flag\nThis flag is set by hardware when a tamper detection event is detected on the internal tamper 6."
              }
            },
            "TAMP_MISR": {
              "TAMP1MF": {
                "bit": 0,
                "description": "TAMP1 interrupt masked flag\nThis flag is set by hardware when the tamper 1 interrupt is raised."
              },
              "TAMP2MF": {
                "bit": 1,
                "description": "TAMP2 interrupt masked flag\nThis flag is set by hardware when the tamper 2 interrupt is raised."
              },
              "TAMP3MF": {
                "bit": 2,
                "description": "TAMP3 interrupt masked flag\nThis flag is set by hardware when the tamper 3 interrupt is raised."
              },
              "TAMP4MF": {
                "bit": 3,
                "description": "TAMP4 interrupt masked flag\nThis flag is set by hardware when the tamper 4 interrupt is raised."
              },
              "TAMP5MF": {
                "bit": 4,
                "description": "TAMP5 interrupt masked flag\nThis flag is set by hardware when the tamper 5 interrupt is raised."
              },
              "ITAMP3MF": {
                "bit": 18,
                "description": "Internal tamper 3  interrupt masked flag\nThis flag is set by hardware when the internal tamper 3 interrupt is raised."
              },
              "ITAMP4MF": {
                "bit": 19,
                "description": "Internal tamper 4  interrupt masked flag\nThis flag is set by hardware when the internal tamper 4 interrupt is raised."
              },
              "ITAMP5MF": {
                "bit": 20,
                "description": "Internal tamper 5  interrupt masked flag\nThis flag is set by hardware when the internal tamper 5 interrupt is raised."
              },
              "ITAMP6MF": {
                "bit": 21,
                "description": "Internal tamper 6  interrupt masked flag\nThis flag is set by hardware when the internal tamper 6 interrupt is raised."
              }
            },
            "TAMP_SCR": {
              "CTAMP1F": {
                "bit": 0,
                "description": "Clear TAMP1 detection flag\nWriting 1 in this bit clears the TAMP1F bit in the TAMP_SR register."
              },
              "CTAMP2F": {
                "bit": 1,
                "description": "Clear TAMP2 detection flag\nWriting 1 in this bit clears the TAMP2F bit in the TAMP_SR register."
              },
              "CTAMP3F": {
                "bit": 2,
                "description": "Clear TAMP3 detection flag\nWriting 1 in this bit clears the TAMP3F bit in the TAMP_SR register."
              },
              "CTAMP4F": {
                "bit": 3,
                "description": "Clear TAMP4 detection flag\nWriting 1 in this bit clears the TAMP4F bit in the TAMP_SR register."
              },
              "CTAMP5F": {
                "bit": 4,
                "description": "Clear TAMP5 detection flag\nWriting 1 in this bit clears the TAMP5F bit in the TAMP_SR register."
              },
              "CITAMP3F": {
                "bit": 18,
                "description": "Clear ITAMP3 detection flag\nWriting 1 in this bit clears the ITAMP3F bit in the TAMP_SR register."
              },
              "CITAMP4F": {
                "bit": 19,
                "description": "Clear ITAMP4 detection flag\nWriting 1 in this bit clears the ITAMP4F bit in the TAMP_SR register."
              },
              "CITAMP5F": {
                "bit": 20,
                "description": "Clear ITAMP5 detection flag\nWriting 1 in this bit clears the ITAMP5F bit in the TAMP_SR register."
              },
              "CITAMP6F": {
                "bit": 21,
                "description": "Clear ITAMP6 detection flag\nWriting 1 in this bit clears the ITAMP6F bit in the TAMP_SR register."
              }
            },
            "TAMP_BKP0R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nIn the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP1R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nIn the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP2R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nIn the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP3R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nIn the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP4R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nIn the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP5R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nIn the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP6R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nIn the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP7R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nIn the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP8R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nIn the default (ERASE) configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            }
          }
        },
        "TSC": {
          "instances": [
            {
              "name": "TSC",
              "base": "0x40024000",
              "irq": 21
            }
          ],
          "registers": {
            "TSC_CR": {
              "offset": "0x00",
              "size": 32,
              "description": "TSC control register"
            },
            "TSC_IER": {
              "offset": "0x04",
              "size": 32,
              "description": "TSC interrupt enable register"
            },
            "TSC_ICR": {
              "offset": "0x08",
              "size": 32,
              "description": "TSC interrupt clear register"
            },
            "TSC_ISR": {
              "offset": "0x0C",
              "size": 32,
              "description": "TSC interrupt status register"
            },
            "TSC_IOHCR": {
              "offset": "0x10",
              "size": 32,
              "description": "TSC I/O hysteresis control register"
            },
            "TSC_IOASCR": {
              "offset": "0x18",
              "size": 32,
              "description": "TSC I/O analog switch control register"
            },
            "TSC_IOSCR": {
              "offset": "0x20",
              "size": 32,
              "description": "TSC I/O sampling control register"
            },
            "TSC_IOCCR": {
              "offset": "0x28",
              "size": 32,
              "description": "TSC I/O channel control register"
            },
            "TSC_IOGCSR": {
              "offset": "0x30",
              "size": 32,
              "description": "TSC I/O group control status register"
            },
            "TSC_IOG1CR": {
              "offset": "0x34",
              "size": 32,
              "description": "TSC I/O group 1 counter register"
            },
            "TSC_IOG2CR": {
              "offset": "0x38",
              "size": 32,
              "description": "TSC I/O group 2 counter register"
            },
            "TSC_IOG3CR": {
              "offset": "0x3C",
              "size": 32,
              "description": "TSC I/O group 3 counter register"
            },
            "TSC_IOG4CR": {
              "offset": "0x40",
              "size": 32,
              "description": "TSC I/O group 4 counter register"
            },
            "TSC_IOG5CR": {
              "offset": "0x44",
              "size": 32,
              "description": "TSC I/O group 5 counter register"
            },
            "TSC_IOG6CR": {
              "offset": "0x48",
              "size": 32,
              "description": "TSC I/O group 6 counter register"
            },
            "TSC_IOG7CR": {
              "offset": "0x4C",
              "size": 32,
              "description": "TSC I/O group 7 counter register"
            }
          },
          "bits": {
            "TSC_CR": {
              "TSCE": {
                "bit": 0,
                "description": "Touch sensing controller enable\nThis bit is set and cleared by software to enable/disable the touch sensing controller.\nNote: When the touch sensing controller is disabled, TSC registers settings have no effect."
              },
              "START": {
                "bit": 1,
                "description": "Start a new acquisition\nThis bit is set by software to start a new acquisition. It is cleared by hardware as soon as the acquisition is complete or by software to cancel the ongoing acquisition."
              },
              "AM": {
                "bit": 2,
                "description": "Acquisition mode\nThis bit is set and cleared by software to select the acquisition mode.\nNote: This bit must not be modified when an acquisition is ongoing."
              },
              "SYNCPOL": {
                "bit": 3,
                "description": "Synchronization pin polarity\nThis bit is set and cleared by software to select the polarity of the synchronization input pin."
              },
              "IODEF": {
                "bit": 4,
                "description": "I/O Default mode\nThis bit is set and cleared by software. It defines the configuration of all the TSC I/Os when there is no ongoing acquisition. When there is an ongoing acquisition, it defines the configuration of all unused I/Os (not defined as sampling capacitor I/O or as channel I/O).\nNote: This bit must not be modified when an acquisition is ongoing."
              },
              "MCV": {
                "bit": 5,
                "description": "Max count value\nThese bits are set and cleared by software. They define the maximum number of charge transfer pulses that can be generated before a max count error is generated.\nNote: These bits must not be modified when an acquisition is ongoing.",
                "width": 3
              },
              "PGPSC": {
                "bit": 12,
                "description": "Pulse generator prescaler\nThese bits are set and cleared by software.They select the AHB clock divider used to generate the pulse generator clock (PGCLK).\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: Some configurations are forbidden. Refer to the Section119.4.4: Charge transfer acquisition sequence for details.",
                "width": 3
              },
              "SSPSC": {
                "bit": 15,
                "description": "Spread spectrum prescaler\nThis bit is set and cleared by software. It selects the AHB clock divider used to generate the spread spectrum clock (SSCLK).\nNote: This bit must not be modified when an acquisition is ongoing."
              },
              "SSE": {
                "bit": 16,
                "description": "Spread spectrum enable\nThis bit is set and cleared by software to enable/disable the spread spectrum feature.\nNote: This bit must not be modified when an acquisition is ongoing."
              },
              "SSD": {
                "bit": 17,
                "description": "Spread spectrum deviation\nThese bits are set and cleared by software. They define the spread spectrum deviation which consists in adding a variable number of periods of the SSCLK clock to the charge transfer pulse high state.\n...\nNote: These bits must not be modified when an acquisition is ongoing.",
                "width": 7
              },
              "CTPL": {
                "bit": 24,
                "description": "Charge transfer pulse low\nThese bits are set and cleared by software. They define the duration of the low state of the charge transfer pulse (transfer of charge from C<sub>X</sub> to C<sub>S</sub>).\n...\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: Some configurations are forbidden. Refer to the Section119.4.4: Charge transfer acquisition sequence for details.",
                "width": 4
              },
              "CTPH": {
                "bit": 28,
                "description": "Charge transfer pulse high\nThese bits are set and cleared by software. They define the duration of the high state of the charge transfer pulse (charge of C<sub>X</sub>).\n...\nNote: These bits must not be modified when an acquisition is ongoing.",
                "width": 4
              }
            },
            "TSC_IER": {
              "EOAIE": {
                "bit": 0,
                "description": "End of acquisition interrupt enable\nThis bit is set and cleared by software to enable/disable the end of acquisition interrupt."
              },
              "MCEIE": {
                "bit": 1,
                "description": "Max count error interrupt enable\nThis bit is set and cleared by software to enable/disable the max count error interrupt."
              }
            },
            "TSC_ICR": {
              "EOAIC": {
                "bit": 0,
                "description": "End of acquisition interrupt clear\nThis bit is set by software to clear the end of acquisition flag and it is cleared by hardware when the flag is reset. Writing a 0 has no effect."
              },
              "MCEIC": {
                "bit": 1,
                "description": "Max count error interrupt clear\nThis bit is set by software to clear the max count error flag and it is cleared by hardware when the flag is reset. Writing a 0 has no effect."
              }
            },
            "TSC_ISR": {
              "EOAF": {
                "bit": 0,
                "description": "End of acquisition flag\nThis bit is set by hardware when the acquisition of all enabled group is complete (all GxS bits of all enabled analog I/O groups are set or when a max count error is detected). It is cleared by software writing 1 to the bit EOAIC of the TSC_ICR register."
              },
              "MCEF": {
                "bit": 1,
                "description": "Max count error flag\nThis bit is set by hardware as soon as an analog I/O group counter reaches the max count value specified. It is cleared by software writing 1 to the bit MCEIC of the TSC_ICR register."
              }
            },
            "TSC_IOHCR": {
              "G1_IO1": {
                "bit": 0,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G1_IO2": {
                "bit": 1,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G1_IO3": {
                "bit": 2,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G1_IO4": {
                "bit": 3,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G2_IO1": {
                "bit": 4,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G2_IO2": {
                "bit": 5,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G2_IO3": {
                "bit": 6,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G2_IO4": {
                "bit": 7,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G3_IO1": {
                "bit": 8,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G3_IO2": {
                "bit": 9,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G3_IO3": {
                "bit": 10,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G3_IO4": {
                "bit": 11,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G4_IO1": {
                "bit": 12,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G4_IO2": {
                "bit": 13,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G4_IO3": {
                "bit": 14,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G4_IO4": {
                "bit": 15,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G5_IO1": {
                "bit": 16,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G5_IO2": {
                "bit": 17,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G5_IO3": {
                "bit": 18,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G5_IO4": {
                "bit": 19,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G6_IO1": {
                "bit": 20,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G6_IO2": {
                "bit": 21,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G6_IO3": {
                "bit": 22,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G6_IO4": {
                "bit": 23,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G7_IO1": {
                "bit": 24,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G7_IO2": {
                "bit": 25,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G7_IO3": {
                "bit": 26,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G7_IO4": {
                "bit": 27,
                "description": "Gx_IOy Schmitt trigger hysteresis mode\nThese bits are set and cleared by software to enable/disable the Gx_IOy Schmitt trigger hysteresis.\nNote: These bits control the I/O Schmitt trigger hysteresis whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              }
            },
            "TSC_IOASCR": {
              "G1_IO1": {
                "bit": 0,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G1_IO2": {
                "bit": 1,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G1_IO3": {
                "bit": 2,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G1_IO4": {
                "bit": 3,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G2_IO1": {
                "bit": 4,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G2_IO2": {
                "bit": 5,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G2_IO3": {
                "bit": 6,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G2_IO4": {
                "bit": 7,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G3_IO1": {
                "bit": 8,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G3_IO2": {
                "bit": 9,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G3_IO3": {
                "bit": 10,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G3_IO4": {
                "bit": 11,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G4_IO1": {
                "bit": 12,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G4_IO2": {
                "bit": 13,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G4_IO3": {
                "bit": 14,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G4_IO4": {
                "bit": 15,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G5_IO1": {
                "bit": 16,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G5_IO2": {
                "bit": 17,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G5_IO3": {
                "bit": 18,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G5_IO4": {
                "bit": 19,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G6_IO1": {
                "bit": 20,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G6_IO2": {
                "bit": 21,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G6_IO3": {
                "bit": 22,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G6_IO4": {
                "bit": 23,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G7_IO1": {
                "bit": 24,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G7_IO2": {
                "bit": 25,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G7_IO3": {
                "bit": 26,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              },
              "G7_IO4": {
                "bit": 27,
                "description": "Gx_IOy analog switch enable\nThese bits are set and cleared by software to enable/disable the Gx_IOy analog switch.\nNote: These bits control the I/O analog switch whatever the I/O control mode is (even if controlled by standard GPIO registers)."
              }
            },
            "TSC_IOSCR": {
              "G1_IO1": {
                "bit": 0,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G1_IO2": {
                "bit": 1,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G1_IO3": {
                "bit": 2,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G1_IO4": {
                "bit": 3,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G2_IO1": {
                "bit": 4,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G2_IO2": {
                "bit": 5,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G2_IO3": {
                "bit": 6,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G2_IO4": {
                "bit": 7,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G3_IO1": {
                "bit": 8,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G3_IO2": {
                "bit": 9,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G3_IO3": {
                "bit": 10,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G3_IO4": {
                "bit": 11,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G4_IO1": {
                "bit": 12,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G4_IO2": {
                "bit": 13,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G4_IO3": {
                "bit": 14,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G4_IO4": {
                "bit": 15,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G5_IO1": {
                "bit": 16,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G5_IO2": {
                "bit": 17,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G5_IO3": {
                "bit": 18,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G5_IO4": {
                "bit": 19,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G6_IO1": {
                "bit": 20,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G6_IO2": {
                "bit": 21,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G6_IO3": {
                "bit": 22,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G6_IO4": {
                "bit": 23,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G7_IO1": {
                "bit": 24,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G7_IO2": {
                "bit": 25,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G7_IO3": {
                "bit": 26,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G7_IO4": {
                "bit": 27,
                "description": "Gx_IOy sampling mode\nThese bits are set and cleared by software to configure the Gx_IOy as a sampling capacitor I/O. Only one I/O per analog I/O group must be defined as sampling capacitor.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOSCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              }
            },
            "TSC_IOCCR": {
              "G1_IO1": {
                "bit": 0,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G1_IO2": {
                "bit": 1,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G1_IO3": {
                "bit": 2,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G1_IO4": {
                "bit": 3,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G2_IO1": {
                "bit": 4,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G2_IO2": {
                "bit": 5,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G2_IO3": {
                "bit": 6,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G2_IO4": {
                "bit": 7,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G3_IO1": {
                "bit": 8,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G3_IO2": {
                "bit": 9,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G3_IO3": {
                "bit": 10,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G3_IO4": {
                "bit": 11,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G4_IO1": {
                "bit": 12,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G4_IO2": {
                "bit": 13,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G4_IO3": {
                "bit": 14,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G4_IO4": {
                "bit": 15,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G5_IO1": {
                "bit": 16,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G5_IO2": {
                "bit": 17,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G5_IO3": {
                "bit": 18,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G5_IO4": {
                "bit": 19,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G6_IO1": {
                "bit": 20,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G6_IO2": {
                "bit": 21,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G6_IO3": {
                "bit": 22,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G6_IO4": {
                "bit": 23,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G7_IO1": {
                "bit": 24,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G7_IO2": {
                "bit": 25,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G7_IO3": {
                "bit": 26,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              },
              "G7_IO4": {
                "bit": 27,
                "description": "Gx_IOy channel mode\nThese bits are set and cleared by software to configure the Gx_IOy as a channel I/O.\nNote: These bits must not be modified when an acquisition is ongoing.\nNote: During the acquisition phase and even if the TSC peripheral alternate function is not enabled, as soon as the TSC_IOCCR bit is set, the corresponding GPIO analog switch is automatically controlled by the touch sensing controller."
              }
            },
            "TSC_IOGCSR": {
              "G1E": {
                "bit": 0,
                "description": "Analog I/O group x enable\nThese bits are set and cleared by software to enable/disable the acquisition (counter is counting) on the corresponding analog I/O group x."
              },
              "G2E": {
                "bit": 1,
                "description": "Analog I/O group x enable\nThese bits are set and cleared by software to enable/disable the acquisition (counter is counting) on the corresponding analog I/O group x."
              },
              "G3E": {
                "bit": 2,
                "description": "Analog I/O group x enable\nThese bits are set and cleared by software to enable/disable the acquisition (counter is counting) on the corresponding analog I/O group x."
              },
              "G4E": {
                "bit": 3,
                "description": "Analog I/O group x enable\nThese bits are set and cleared by software to enable/disable the acquisition (counter is counting) on the corresponding analog I/O group x."
              },
              "G5E": {
                "bit": 4,
                "description": "Analog I/O group x enable\nThese bits are set and cleared by software to enable/disable the acquisition (counter is counting) on the corresponding analog I/O group x."
              },
              "G6E": {
                "bit": 5,
                "description": "Analog I/O group x enable\nThese bits are set and cleared by software to enable/disable the acquisition (counter is counting) on the corresponding analog I/O group x."
              },
              "G7E": {
                "bit": 6,
                "description": "Analog I/O group x enable\nThese bits are set and cleared by software to enable/disable the acquisition (counter is counting) on the corresponding analog I/O group x."
              },
              "G1S": {
                "bit": 16,
                "description": "Analog I/O group x status\nThese bits are set by hardware when the acquisition on the corresponding enabled analog I/O group x is complete. They are cleared by hardware when a new acquisition is started.\nNote: When a max count error is detected the remaining GxS bits of the enabled analog I/O groups are not set."
              },
              "G2S": {
                "bit": 17,
                "description": "Analog I/O group x status\nThese bits are set by hardware when the acquisition on the corresponding enabled analog I/O group x is complete. They are cleared by hardware when a new acquisition is started.\nNote: When a max count error is detected the remaining GxS bits of the enabled analog I/O groups are not set."
              },
              "G3S": {
                "bit": 18,
                "description": "Analog I/O group x status\nThese bits are set by hardware when the acquisition on the corresponding enabled analog I/O group x is complete. They are cleared by hardware when a new acquisition is started.\nNote: When a max count error is detected the remaining GxS bits of the enabled analog I/O groups are not set."
              },
              "G4S": {
                "bit": 19,
                "description": "Analog I/O group x status\nThese bits are set by hardware when the acquisition on the corresponding enabled analog I/O group x is complete. They are cleared by hardware when a new acquisition is started.\nNote: When a max count error is detected the remaining GxS bits of the enabled analog I/O groups are not set."
              },
              "G5S": {
                "bit": 20,
                "description": "Analog I/O group x status\nThese bits are set by hardware when the acquisition on the corresponding enabled analog I/O group x is complete. They are cleared by hardware when a new acquisition is started.\nNote: When a max count error is detected the remaining GxS bits of the enabled analog I/O groups are not set."
              },
              "G6S": {
                "bit": 21,
                "description": "Analog I/O group x status\nThese bits are set by hardware when the acquisition on the corresponding enabled analog I/O group x is complete. They are cleared by hardware when a new acquisition is started.\nNote: When a max count error is detected the remaining GxS bits of the enabled analog I/O groups are not set."
              },
              "G7S": {
                "bit": 22,
                "description": "Analog I/O group x status\nThese bits are set by hardware when the acquisition on the corresponding enabled analog I/O group x is complete. They are cleared by hardware when a new acquisition is started.\nNote: When a max count error is detected the remaining GxS bits of the enabled analog I/O groups are not set."
              }
            },
            "TSC_IOG1CR": {
              "CNT": {
                "bit": 0,
                "description": "Counter value\nThese bits represent the number of charge transfer cycles generated on the analog I/O group x to complete its acquisition (voltage across C<sub>S</sub> has reached the threshold).",
                "width": 14
              }
            },
            "TSC_IOG2CR": {
              "CNT": {
                "bit": 0,
                "description": "Counter value\nThese bits represent the number of charge transfer cycles generated on the analog I/O group x to complete its acquisition (voltage across C<sub>S</sub> has reached the threshold).",
                "width": 14
              }
            },
            "TSC_IOG3CR": {
              "CNT": {
                "bit": 0,
                "description": "Counter value\nThese bits represent the number of charge transfer cycles generated on the analog I/O group x to complete its acquisition (voltage across C<sub>S</sub> has reached the threshold).",
                "width": 14
              }
            },
            "TSC_IOG4CR": {
              "CNT": {
                "bit": 0,
                "description": "Counter value\nThese bits represent the number of charge transfer cycles generated on the analog I/O group x to complete its acquisition (voltage across C<sub>S</sub> has reached the threshold).",
                "width": 14
              }
            },
            "TSC_IOG5CR": {
              "CNT": {
                "bit": 0,
                "description": "Counter value\nThese bits represent the number of charge transfer cycles generated on the analog I/O group x to complete its acquisition (voltage across C<sub>S</sub> has reached the threshold).",
                "width": 14
              }
            },
            "TSC_IOG6CR": {
              "CNT": {
                "bit": 0,
                "description": "Counter value\nThese bits represent the number of charge transfer cycles generated on the analog I/O group x to complete its acquisition (voltage across C<sub>S</sub> has reached the threshold).",
                "width": 14
              }
            },
            "TSC_IOG7CR": {
              "CNT": {
                "bit": 0,
                "description": "Counter value\nThese bits represent the number of charge transfer cycles generated on the analog I/O group x to complete its acquisition (voltage across C<sub>S</sub> has reached the threshold).",
                "width": 14
              }
            }
          }
        },
        "USB": {
          "instances": [
            {
              "name": "USB",
              "base": "0x40005C00",
              "irq": 8
            }
          ],
          "registers": {
            "USB_CHEP0R": {
              "offset": "0x00",
              "size": 32,
              "description": "USB endpoint/channel 0 register"
            },
            "USB_CHEP1R": {
              "offset": "0x04",
              "size": 32,
              "description": "USB endpoint/channel 1 register"
            },
            "USB_CHEP2R": {
              "offset": "0x08",
              "size": 32,
              "description": "USB endpoint/channel 2 register"
            },
            "USB_CHEP3R": {
              "offset": "0x0C",
              "size": 32,
              "description": "USB endpoint/channel 3 register"
            },
            "USB_CHEP4R": {
              "offset": "0x10",
              "size": 32,
              "description": "USB endpoint/channel 4 register"
            },
            "USB_CHEP5R": {
              "offset": "0x14",
              "size": 32,
              "description": "USB endpoint/channel 5 register"
            },
            "USB_CHEP6R": {
              "offset": "0x18",
              "size": 32,
              "description": "USB endpoint/channel 6 register"
            },
            "USB_CHEP7R": {
              "offset": "0x1C",
              "size": 32,
              "description": "USB endpoint/channel 7 register"
            },
            "USB_CNTR": {
              "offset": "0x40",
              "size": 32,
              "description": "USB control register"
            },
            "USB_ISTR": {
              "offset": "0x44",
              "size": 32,
              "description": "USB interrupt status register"
            },
            "USB_FNR": {
              "offset": "0x48",
              "size": 32,
              "description": "USB frame number register"
            },
            "USB_DADDR": {
              "offset": "0x4C",
              "size": 32,
              "description": "USB Device address"
            },
            "USB_LPMCSR": {
              "offset": "0x54",
              "size": 32,
              "description": "LPM control and status register"
            },
            "USB_BCDR": {
              "offset": "0x58",
              "size": 32,
              "description": "Battery charging detector"
            }
          },
          "bits": {
            "USB_CHEP0R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint (in device mode) or when a SETUP transaction is acknowledged by the device (in host mode).\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. Table1217 summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Section134.5.3: Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered STALL instead of ACK. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Table1216: Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in Section134.5.5: Isochronous transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Table1215: Reception status encoding on page11025. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX1=11) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only VALID or DISABLED, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to STALL or NAK for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application must not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device mode), while it sets this bit to 1 when SETUP transaction is acknowledged by device (in host mode).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. \nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. \n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application must consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application must read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application must read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint"
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP1R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint (in device mode) or when a SETUP transaction is acknowledged by the device (in host mode).\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. Table1217 summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Section134.5.3: Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered STALL instead of ACK. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Table1216: Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in Section134.5.5: Isochronous transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Table1215: Reception status encoding on page11025. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX1=11) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only VALID or DISABLED, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to STALL or NAK for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application must not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device mode), while it sets this bit to 1 when SETUP transaction is acknowledged by device (in host mode).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. \nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. \n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application must consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application must read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application must read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint"
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP2R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint (in device mode) or when a SETUP transaction is acknowledged by the device (in host mode).\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. Table1217 summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Section134.5.3: Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered STALL instead of ACK. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Table1216: Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in Section134.5.5: Isochronous transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Table1215: Reception status encoding on page11025. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX1=11) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only VALID or DISABLED, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to STALL or NAK for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application must not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device mode), while it sets this bit to 1 when SETUP transaction is acknowledged by device (in host mode).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. \nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. \n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application must consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application must read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application must read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint"
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP3R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint (in device mode) or when a SETUP transaction is acknowledged by the device (in host mode).\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. Table1217 summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Section134.5.3: Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered STALL instead of ACK. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Table1216: Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in Section134.5.5: Isochronous transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Table1215: Reception status encoding on page11025. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX1=11) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only VALID or DISABLED, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to STALL or NAK for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application must not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device mode), while it sets this bit to 1 when SETUP transaction is acknowledged by device (in host mode).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. \nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. \n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application must consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application must read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application must read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint"
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP4R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint (in device mode) or when a SETUP transaction is acknowledged by the device (in host mode).\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. Table1217 summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Section134.5.3: Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered STALL instead of ACK. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Table1216: Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in Section134.5.5: Isochronous transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Table1215: Reception status encoding on page11025. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX1=11) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only VALID or DISABLED, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to STALL or NAK for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application must not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device mode), while it sets this bit to 1 when SETUP transaction is acknowledged by device (in host mode).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. \nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. \n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application must consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application must read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application must read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint"
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP5R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint (in device mode) or when a SETUP transaction is acknowledged by the device (in host mode).\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. Table1217 summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Section134.5.3: Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered STALL instead of ACK. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Table1216: Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in Section134.5.5: Isochronous transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Table1215: Reception status encoding on page11025. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX1=11) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only VALID or DISABLED, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to STALL or NAK for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application must not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device mode), while it sets this bit to 1 when SETUP transaction is acknowledged by device (in host mode).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. \nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. \n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application must consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application must read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application must read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint"
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP6R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint (in device mode) or when a SETUP transaction is acknowledged by the device (in host mode).\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. Table1217 summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Section134.5.3: Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered STALL instead of ACK. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Table1216: Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in Section134.5.5: Isochronous transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Table1215: Reception status encoding on page11025. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX1=11) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only VALID or DISABLED, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to STALL or NAK for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application must not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device mode), while it sets this bit to 1 when SETUP transaction is acknowledged by device (in host mode).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. \nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. \n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application must consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application must read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application must read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint"
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP7R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint (in device mode) or when a SETUP transaction is acknowledged by the device (in host mode).\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits. Table1217 summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Section134.5.3: Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered STALL instead of ACK. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Table1216: Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in Section134.5.5: Isochronous transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Table1215: Reception status encoding on page11025. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX1=11) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only VALID or DISABLED, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to STALL or NAK for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application must not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (01=1DATA0, 11=1DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device mode), while it sets this bit to 1 when SETUP transaction is acknowledged by device (in host mode).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Section134.5.3: Double-buffered endpoints and usage in Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Section134.5.5: Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below. \nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated. \n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application must consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application must read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application must read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint"
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CNTR": {
              "USBRST": {
                "bit": 0,
                "description": "USB Reset\nSoftware can set this bit to reset the USB core, exactly as it happens when receiving a RESET signaling on the USB.The USB peripheral, in response to a RESET, resets its internal protocol state machine. Reception and transmission are disabled until the RST_DCON bit is cleared. All configuration registers do not reset: the microcontroller must explicitly clear these registers (this is to ensure that the RST_DCON interrupt can be safely delivered, and any transaction immediately followed by a RESET can be completed). The function address and endpoint registers are reset by an USB reset event.\nSoftware sets this bit to drive USB reset state on the bus and initialize the device. USB reset terminates as soon as this bit is cleared by software."
              },
              "PDWN": {
                "bit": 1,
                "description": "Power down\nThis bit is used to completely switch off all USB-related analog parts if it is required to completely disable the USB peripheral for any reason. When this bit is set, the USB peripheral is disconnected from the transceivers and it cannot be used."
              },
              "SUSPRDY": {
                "bit": 2,
                "description": "Suspend state effective \nThis bit is set by hardware as soon as the suspend state entered through the SUSPEN control gets internally effective. In this state USB activity is suspended, USB clock is gated, transceiver is set in low power mode by disabling the differential receiver. Only asynchronous wake-up logic and single ended receiver is kept alive to detect remote wake-up or resume events.\nSoftware must poll this bit to confirm it to be set before any STOP mode entry.\nThis bit is cleared by hardware simultaneously to the WAKEUP flag being set."
              },
              "SUSPEN": {
                "bit": 3,
                "description": "Suspend state enable\nSoftware can set this bit when the SUSP interrupt is received, which is issued when no traffic is received by the USB peripheral for 31ms. Software can also set this bit when the L1REQ interrupt is received with positive acknowledge sent.\nAs soon as the suspend state is propagated internally all device activity is stopped, USB clock is gated, USB transceiver is set into low power mode and the SUSPRDY bit is set by hardware. In the case that device application wants to pursue more aggressive power saving by stopping the USB clock source and by moving the microcontroller to stop mode, as in the case of bus powered device application, it must first wait few cycles to see the SUSPRDY1=11 acknowledge the suspend request.\nThis bit is cleared by hardware simultaneous with the WAKEUP flag set.\nSoftware can set this bit when host application has nothing scheduled for the next frames and wants to enter long term power saving. When set, it stops immediately SOF generation and any other host activity, gates the USB clock and sets the transceiver in low power mode. If any USB transaction is on-going at the time SUSPEN is set, suspend is entered at the end of the current transaction.\nAs soon as suspend state is propagated internally and gets effective the SUSPRDY bit is set. In the case that host application wants to pursue more aggressive power saving by stopping the USB clock source and by moving the micro-controller to STOP mode, it must first wait few cycles to see SUSPRDY=1 acknowledge to the suspend request.\nThis bit is cleared by hardware simultaneous with the WAKEUP flag set."
              },
              "L2RES": {
                "bit": 4,
                "description": "L2 remote wake-up / resume driver\nDevice mode\nThe microcontroller can set this bit to send remote wake-up signaling to the host. It must be activated, according to USB specifications, for no less than 11ms and no more than 151ms after which the host PC is ready to drive the resume sequence up to its end.\nHost mode\nSoftware sets this bit to send resume signaling to the device.\nSoftware clears this bit to send end of resume to device and restart SOF generation.\nIn the context of remote wake up, this bit is to be set following the WAKEUP interrupt."
              },
              "L1RES": {
                "bit": 5,
                "description": "L1 remote wake-up / resume driver"
              },
              "L1REQM": {
                "bit": 7,
                "description": "LPM L1 state request interrupt mask"
              },
              "ESOFM": {
                "bit": 8,
                "description": "Expected start of frame interrupt mask"
              },
              "SOFM": {
                "bit": 9,
                "description": "Start of frame interrupt mask"
              },
              "RST_DCONM": {
                "bit": 10,
                "description": "USB reset request (Device mode) or device connect/disconnect (Host mode) interrupt mask"
              },
              "SUSPM": {
                "bit": 11,
                "description": "Suspend mode interrupt mask"
              },
              "WKUPM": {
                "bit": 12,
                "description": "Wake-up interrupt mask"
              },
              "ERRM": {
                "bit": 13,
                "description": "Error interrupt mask"
              },
              "PMAOVRM": {
                "bit": 14,
                "description": "Packet memory area over / underrun interrupt mask"
              },
              "CTRM": {
                "bit": 15,
                "description": "Correct transfer interrupt mask"
              },
              "THR512M": {
                "bit": 16,
                "description": "512 byte threshold interrupt mask"
              },
              "DDISCM": {
                "bit": 17,
                "description": "Device disconnection mask\nHost mode"
              },
              "HOST": {
                "bit": 31,
                "description": "HOST mode\nHOST bit selects betweens host or device USB mode of operation. It must be set before enabling the USB peripheral by the function enable bit."
              }
            },
            "USB_ISTR": {
              "IDN": {
                "bit": 0,
                "description": "Device Endpoint / host channel identification number\nThese bits are written by the hardware according to the host channel or device endpoint number, which generated the interrupt request. If several endpoint/channel transactions are pending, the hardware writes the identification number related to the endpoint/channel having the highest priority defined in the following way: two levels are defined, in order of priority: isochronous and double-buffered bulk channels/endpoints are considered first and then the others are examined. If more than one endpoint/channel from the same set is requesting an interrupt, the IDN bits in USB_ISTR register are assigned according to the lowest requesting register, CHEP0R having the highest priority followed by CHEP1R and so on. The application software can assign a register to each endpoint/channel according to this priority scheme, so as to order the concurring endpoint/channel requests in a suitable way. These bits are read only.",
                "width": 4
              },
              "DIR": {
                "bit": 4,
                "description": "Direction of transaction\nThis bit is written by the hardware according to the direction of the successful transaction, which generated the interrupt request.\nIf DIR bit1=10, VTTX bit is set in the USB_CHEPnR register related to the interrupting endpoint. The interrupting transaction is of IN type (data transmitted by the USB peripheral to the host PC).\nIf DIR bit1=11, VTRX bit or both VTTX/VTRX are set in the USB_CHEPnR register related to the interrupting endpoint. The interrupting transaction is of OUT type (data received by the USB peripheral from the host PC) or two pending transactions are waiting to be processed.\nThis information can be used by the application software to access the USB_CHEPnR bits related to the triggering transaction since it represents the direction having the interrupt pending. This bit is read-only."
              },
              "L1REQ": {
                "bit": 7,
                "description": "LPM L1 state request\nDevice mode\nThis bit is set by the hardware when LPM command to enter the L1 state is successfully received and acknowledged. This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "ESOF": {
                "bit": 8,
                "description": "Expected start of frame\nDevice mode\nThis bit is set by the hardware when an SOF packet is expected but not received. The host sends an SOF packet each 11ms, but if the device does not receive it properly, the suspend timer issues this interrupt. If three consecutive ESOF interrupts are generated (for example three SOF packets are lost) without any traffic occurring in between, a SUSP interrupt is generated. This bit is set even when the missing SOF packets occur while the suspend timer is not yet locked. This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "SOF": {
                "bit": 9,
                "description": "Start of frame\nThis bit signals the beginning of a new USB frame and it is set when a SOF packet arrives through the USB bus. The interrupt service routine may monitor the SOF events to have a 11ms synchronization event to the USB host and to safely read the USB_FNR register which is updated at the SOF packet reception (this can be useful for isochronous applications). This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "RST_DCON": {
                "bit": 10,
                "description": "USB reset request (Device mode) or device connect/disconnect (Host mode)\nDevice mode\nThis bit is set by hardware when an USB reset is released by the host and the bus returns to idle. USB reset state is internally detected after the sampling of 60 consecutive SE0 cycles.\nHost mode\nThis bit is set by hardware when device connection or device disconnection is detected. Device connection is signaled after J state is sampled for 22 cycles consecutively from unconnected state. Device disconnection is signaled after SE0 state is seen for 22 bit times consecutively from connected state."
              },
              "SUSP": {
                "bit": 11,
                "description": "Suspend mode request\nDevice mode\nThis bit is set by the hardware when no traffic has been received for 31ms, indicating a suspend mode request from the USB bus. The suspend condition check is enabled immediately after any USB reset and it is disabled by the hardware when the suspend mode is active (SUSPEN=1) until the end of resume sequence. This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "WKUP": {
                "bit": 12,
                "description": "Wake-up\nThis bit is set to 1 by the hardware when, during suspend mode, activity is detected that wakes up the USB peripheral. This event asynchronously clears the SUSPRDY bit in the CTLR register and activates the USB_WAKEUP line, which can be used to notify the rest of the device (for example wake-up unit) about the start of the resume process. This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "ERR": {
                "bit": 13,
                "description": "Error\nThis flag is set whenever one of the errors listed below has occurred:\nNANS:\tNo ANSwer. The timeout for a host response has expired.\nCRC:\tCyclic redundancy check error. One of the received CRCs, either in the token or in the data, was wrong.\nBST:\tBit stuffing error. A bit stuffing error was detected anywhere in the PID, data, and/or CRC.\nFVIO:\tFraming format violation. A non-standard frame was received (EOP not in the right place, wrong token sequence, etc.).\nThe USB software can usually ignore errors, since the USB peripheral and the PC host manage retransmission in case of errors in a fully transparent way. This interrupt can be useful during the software development phase, or to monitor the quality of transmission over the USB bus, to flag possible problems to the user (for example loose connector, too noisy environment, broken conductor in the USB cable and so on). This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "PMAOVR": {
                "bit": 14,
                "description": "Packet memory area over / underrun\nThis bit is set if the microcontroller has not been able to respond in time to an USB memory request. The USB peripheral handles this event in the following way: During reception an ACK handshake packet is not sent, during transmission a bit-stuff error is forced on the transmitted stream; in both cases the host retries the transaction. The PMAOVR interrupt must never occur during normal operations. Since the failed transaction is retried by the host, the application software has the chance to speed-up device operations during this interrupt handling, to be ready for the next transaction retry; however this does not happen during isochronous transfers (no isochronous transaction is anyway retried) leading to a loss of data in this case. This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "CTR": {
                "bit": 15,
                "description": "Completed transfer in host mode\nThis bit is set by the hardware to indicate that an endpoint/channel has successfully completed a transaction; using DIR and IDN bits software can determine which endpoint/channel requested the interrupt. This bit is read-only."
              },
              "THR512": {
                "bit": 16,
                "description": "512 byte threshold interrupt\nThis bit is set to 1 by the hardware when 512 bytes have been transmitted or received during isochronous transfers. This bit is read/write but only 0 can be written and writing 1 has no effect. Note that no information is available to indicate the associated channel/endpoint, however in practice only one ISO endpoint/channel with such large packets can be supported, so that channel."
              },
              "DDISC": {
                "bit": 17,
                "description": "Device connection\nHost mode\nThis bit is set when a device connection is detected. This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "DCON_STAT": {
                "bit": 29,
                "description": "Device connection status\nHost mode:\nThis bit contains information about device connection status. It is set by hardware when a LS/FS device is attached to the host while it is reset when the device is disconnected."
              },
              "LS_DCON": {
                "bit": 30,
                "description": "Low speed device connected\nHost mode:\nThis bit is set by hardware when an LS device connection is detected. Device connection is signaled after LS J-state is sampled for 22 consecutive cycles of the USB clock (481MHz) from the unconnected state."
              }
            },
            "USB_FNR": {
              "FN": {
                "bit": 0,
                "description": "Frame number\nThis bit field contains the 11-bits frame number contained in the last received SOF packet. The frame number is incremented for every frame sent by the host and it is useful for isochronous transfers. This bit field is updated on the generation of an SOF interrupt.",
                "width": 11
              },
              "LSOF": {
                "bit": 11,
                "description": "Lost SOF\nDevice mode\nThese bits are written by the hardware when an ESOF interrupt is generated, counting the number of consecutive SOF packets lost. At the reception of an SOF packet, these bits are cleared.",
                "width": 2
              },
              "LCK": {
                "bit": 13,
                "description": "Locked\nDevice mode\nThis bit is set by the hardware when at least two consecutive SOF packets have been received after the end of an USB reset condition or after the end of an USB resume sequence. Once locked, the frame timer remains in this state until an USB reset or USB suspend event occurs."
              },
              "RXDM": {
                "bit": 14,
                "description": "Receive data - line status\nThis bit can be used to observe the status of received data minus upstream port data line. It can be used during end-of-suspend routines to help determining the wake-up event."
              },
              "RXDP": {
                "bit": 15,
                "description": "Receive data + line status \nThis bit can be used to observe the status of received data plus upstream port data line. It can be used during end-of-suspend routines to help determining the wake-up event."
              }
            },
            "USB_DADDR": {
              "ADD": {
                "bit": 0,
                "description": "Device address\nDevice mode\nThese bits contain the USB function address assigned by the host PC during the enumeration process. Both this field and the endpoint/channel address (EA) field in the associated USB_CHEPnR register must match with the information contained in a USB token in order to handle a transaction to the required endpoint.\nHost mode\nThese bits contain the address transmitted with the LPM transaction",
                "width": 7
              },
              "EF": {
                "bit": 7,
                "description": "Enable function\nThis bit is set by the software to enable the USB Device. The address of this device is contained in the following ADD[6:0] bits. If this bit is at 0 no transactions are handled, irrespective of the settings of USB_CHEPnR registers."
              }
            },
            "USB_LPMCSR": {
              "LPMEN": {
                "bit": 0,
                "description": "LPM support enable\nDevice mode\nThis bit is set by the software to enable the LPM support within the USB Device. If this bit is at 0 no LPM transactions are handled."
              },
              "LPMACK": {
                "bit": 1,
                "description": "LPM token acknowledge enable\nDevice mode:\nThe NYET/ACK is returned only on a successful LPM transaction:\nNo errors in both the EXT token and the LPM token (else ERROR)\nA valid bLinkState = 0001B (L1) is received (else STALL)"
              },
              "REMWAKE": {
                "bit": 3,
                "description": "bRemoteWake value\nDevice mode\nThis bit contains the bRemoteWake value received with last ACKed LPM Token"
              },
              "BESL": {
                "bit": 4,
                "description": "BESL value\nDevice mode\nThese bits contain the BESL value received with last ACKed LPM Token",
                "width": 4
              }
            },
            "USB_BCDR": {
              "BCDEN": {
                "bit": 0,
                "description": "Battery charging detector (BCD) enable\nDevice mode\nThis bit is set by the software to enable the BCD support within the USB Device. When enabled, the USB PHY is fully controlled by BCD and cannot be used for normal communication. Once the BCD discovery is finished, the BCD must be placed in OFF mode by clearing this bit to 0 in order to allow the normal USB operation."
              },
              "DCDEN": {
                "bit": 1,
                "description": "Data contact detection (DCD) mode enable\nDevice mode\nThis bit is set by the software to put the BCD into DCD mode. Only one detection mode (DCD, PD, SD or OFF) must be selected to work correctly."
              },
              "PDEN": {
                "bit": 2,
                "description": "Primary detection (PD) mode enable\nDevice mode\nThis bit is set by the software to put the BCD into PD mode. Only one detection mode (DCD, PD, SD or OFF) must be selected to work correctly."
              },
              "SDEN": {
                "bit": 3,
                "description": "Secondary detection (SD) mode enable\nDevice mode\nThis bit is set by the software to put the BCD into SD mode. Only one detection mode (DCD, PD, SD or OFF) must be selected to work correctly."
              },
              "DCDET": {
                "bit": 4,
                "description": "Data contact detection (DCD) status\nDevice mode\nThis bit gives the result of DCD."
              },
              "PDET": {
                "bit": 5,
                "description": "Primary detection (PD) status\nDevice mode\nThis bit gives the result of PD."
              },
              "SDET": {
                "bit": 6,
                "description": "Secondary detection (SD) status\nDevice mode\nThis bit gives the result of SD."
              },
              "PS2DET": {
                "bit": 7,
                "description": "DM pull-up detection status\nDevice mode\nThis bit is active only during PD and gives the result of comparison between DM voltage level and V<sub>LGC</sub> threshold. In normal situation, the DM level must be below this threshold. If it is above, it means that the DM is externally pulled high. This can be caused by connection to a PS2 port (which pulls-up both DP and DM lines) or to some proprietary charger not following the BCD specification."
              },
              "DPPU_DPD": {
                "bit": 15,
                "description": "DP pull-up / DPDM pull-down\nDevice mode\nThis bit is set by software to enable the embedded pull-up on DP line. Clearing it to 0 can be used to signal disconnect to the host when needed by the user software.\nHost mode\nThis bit is set by software to enable the embedded pull-down on DP and DM lines."
              }
            }
          }
        },
        "VREFBUF": {
          "instances": [
            {
              "name": "VREFBUF",
              "base": "0x40010030"
            }
          ],
          "registers": {
            "VREFBUF_CSR": {
              "offset": "0x00",
              "size": 32,
              "description": "VREFBUF control and status register"
            },
            "VREFBUF_CCR": {
              "offset": "0x04",
              "size": 32,
              "description": "VREFBUF calibration control register"
            }
          },
          "bits": {
            "VREFBUF_CSR": {
              "ENVR": {
                "bit": 0,
                "description": "Voltage reference buffer mode enable\nThis bit is used to enable the voltage reference buffer mode."
              },
              "HIZ": {
                "bit": 1,
                "description": "High impedance mode\nThis bit controls the analog switch to connect or not the V<sub>REF+</sub> pin.\nRefer to Table172: VREF buffer modes for the mode descriptions depending on ENVR bit configuration."
              },
              "VRS": {
                "bit": 2,
                "description": "Voltage reference scale\nThis bit selects the value generated by the voltage reference buffer."
              },
              "VRR": {
                "bit": 3,
                "description": "Voltage reference buffer ready"
              }
            },
            "VREFBUF_CCR": {
              "TRIM": {
                "bit": 0,
                "description": "None",
                "width": 6
              }
            }
          }
        }
      },
      "interrupts": {
        "count": 48,
        "vectors": [
          {
            "number": 0,
            "name": "Initial_SP"
          },
          {
            "number": 1,
            "name": "Reset_Handler"
          },
          {
            "number": 2,
            "name": "NMI_Handler"
          },
          {
            "number": 3,
            "name": "HardFault_Handler"
          },
          {
            "number": 4,
            "name": "MemManage_Handler"
          },
          {
            "number": 5,
            "name": "BusFault_Handler"
          },
          {
            "number": 6,
            "name": "UsageFault_Handler"
          },
          {
            "number": 11,
            "name": "SVC_Handler"
          },
          {
            "number": 12,
            "name": "DebugMon_Handler"
          },
          {
            "number": 14,
            "name": "PendSV_Handler"
          },
          {
            "number": 15,
            "name": "SysTick_Handler"
          },
          {
            "number": 16,
            "name": "WWDG_IRQHandler"
          },
          {
            "number": 17,
            "name": "PVD_PVM_IRQHandler"
          },
          {
            "number": 18,
            "name": "RTC_TAMP_IRQHandler"
          },
          {
            "number": 19,
            "name": "FLASH_IRQHandler"
          },
          {
            "number": 20,
            "name": "RCC_CRS_IRQHandler"
          },
          {
            "number": 21,
            "name": "EXTI0_1_IRQHandler"
          },
          {
            "number": 22,
            "name": "EXTI2_3_IRQHandler"
          },
          {
            "number": 23,
            "name": "EXTI4_15_IRQHandler"
          },
          {
            "number": 24,
            "name": "USB_IRQHandler"
          },
          {
            "number": 25,
            "name": "DMA1_CHannel1_IRQHandler"
          },
          {
            "number": 26,
            "name": "DMA1_Channel2_3_IRQHandler"
          },
          {
            "number": 27,
            "name": "DMA1_Channel4_5_6_7_IRQHandler"
          },
          {
            "number": 28,
            "name": "ADC_COMP_IRQHandler"
          },
          {
            "number": 29,
            "name": "TIM1_BRK_UP_TRG_COM_IRQHandler"
          },
          {
            "number": 30,
            "name": "TIM1_CC_IRQHandler"
          },
          {
            "number": 31,
            "name": "TIM2_IRQHandler"
          },
          {
            "number": 32,
            "name": "TIM3_IRQHandler"
          },
          {
            "number": 33,
            "name": "TIM6_DAC_LPTIM1_IRQHandler"
          },
          {
            "number": 34,
            "name": "TIM7_LPTIM2_IRQHandler"
          },
          {
            "number": 35,
            "name": "TIM15_LPTIM3_IRQHandler"
          },
          {
            "number": 36,
            "name": "TIM16_IRQHandler"
          },
          {
            "number": 37,
            "name": "TSC_IRQHandler"
          },
          {
            "number": 38,
            "name": "LCD_IRQHandler"
          },
          {
            "number": 39,
            "name": "I2C1_IRQHandler"
          },
          {
            "number": 40,
            "name": "I2C2_I2C3_I2C4_IRQHandler"
          },
          {
            "number": 41,
            "name": "SPI1_IRQHandler"
          },
          {
            "number": 42,
            "name": "SPI2_SPI3_IRQHandler"
          },
          {
            "number": 43,
            "name": "USART1_IRQHandler"
          },
          {
            "number": 44,
            "name": "USART2_LPUART2_IRQHandler"
          },
          {
            "number": 45,
            "name": "USART3_LPUART1_IRQHandler"
          },
          {
            "number": 46,
            "name": "USART4_LPUART3_IRQHandler"
          },
          {
            "number": 47,
            "name": "AES_RNG_IRQHandler"
          }
        ]
      }
    }
  }
}